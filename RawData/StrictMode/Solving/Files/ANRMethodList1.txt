<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)> -> _SINK_
<java.net.URLConnection: long getContentLengthLong()> -> _SINK_
<java.io.File: boolean isAbsolute()> -> _SINK_
<java.io.ObjectOutputStream: void writeChar(int)> -> _SINK_
<java.nio.FileChannelImpl: void release(java.nio.channels.FileLock)> -> _SINK_
<java.net.URL: java.lang.String getHost()> -> _SINK_
<java.io.FileInputStream: void <init>(java.io.File)> -> _SINK_
<java.io.RandomAccessFile: int skipBytes(int)> -> _SINK_
<java.io.File: boolean isDirectory()> -> _SINK_
<java.nio.charset.IllegalCharsetNameException: void <init>(java.lang.String)> -> _SINK_
<java.io.PipedReader: boolean ready()> -> _SINK_
<java.net.IDN: java.lang.String toASCII(java.lang.String,int)> -> _SINK_
<java.io.ObjectInputStream: boolean enableResolveObject(boolean)> -> _SINK_
<java.io.File: boolean canExecute()> -> _SINK_
<java.io.LineNumberReader: void <init>(java.io.Reader)> -> _SINK_
<java.net.CookieStoreImpl: void add(java.net.URI,java.net.HttpCookie)> -> _SINK_
<java.io.PushbackInputStream: int available()> -> _SINK_
<java.io.Reader: int read(char[])> -> _SINK_
<java.net.InetAddress$1: void run()> -> _SINK_
<java.io.PrintStream: void print(boolean)> -> _SINK_
<java.net.Socket: int getSendBufferSize()> -> _SINK_
<java.net.URI: java.lang.String getRawFragment()> -> _SINK_
<java.net.InetAddress: java.lang.String getHostAddress()> -> _SINK_
<java.nio.FileChannelImpl: long size()> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.File: java.lang.String getName()> -> _SINK_
<java.io.PrintStream: void print(java.lang.String)> -> _SINK_
<java.io.FilterWriter: void flush()> -> _SINK_
<java.io.ObjectInputStream: void readFully(byte[],int,int)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void connect(java.net.InetAddress,int)> -> _SINK_
<java.io.File: boolean setExecutable(boolean)> -> _SINK_
<java.net.Socket: void setReuseAddress(boolean)> -> _SINK_
<java.net.Socket: void setOOBInline(boolean)> -> _SINK_
<java.nio.DatagramChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider)> -> _SINK_
<java.nio.LongBuffer: int compareTo(java.lang.Object)> -> _SINK_
<java.io.FileInputStream: void close()> -> _SINK_
<java.io.UnsupportedEncodingException: void <init>()> -> _SINK_
<java.sql.Time: void <init>(int,int,int)> -> _SINK_
<java.nio.charset.UnmappableCharacterException: java.lang.String getMessage()> -> _SINK_
<java.io.CharConversionException: void <init>(java.lang.String)> -> _SINK_
<java.net.Socket: void <init>(java.net.SocketImpl)> -> _SINK_
<java.net.URI: boolean isAbsolute()> -> _SINK_
<java.net.CookieManager: void <init>(java.net.CookieStore,java.net.CookiePolicy)> -> _SINK_
<java.sql.Time: java.sql.Time valueOf(java.lang.String)> -> _SINK_
<java.net.Inet4Address: boolean equals(java.lang.Object)> -> _SINK_
<java.net.URI: java.lang.String getRawQuery()> -> _SINK_
<java.io.File: boolean createNewFile()> -> _SINK_
<java.io.ObjectInputStream: java.lang.String readUTF()> -> _SINK_
<java.io.PushbackReader: long skip(long)> -> _SINK_
<java.nio.FileChannelImpl: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.io.FilterReader: void reset()> -> _SINK_
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(long)> -> _SINK_
<java.nio.file.attribute.FileTime: boolean equals(java.lang.Object)> -> _SINK_
<java.net.HttpCookie: boolean getSecure()> -> _SINK_
<java.io.PrintStream: void write(byte[])> -> _SINK_
<java.net.CookieManager: void <init>()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getRequestMethod()> -> _SINK_
<javax.net.DefaultServerSocketFactory: java.net.ServerSocket createServerSocket(int)> -> _SINK_
<java.io.CharArrayReader: void reset()> -> _SINK_
<java.io.ObjectStreamField: int compareTo(java.lang.Object)> -> _SINK_
<java.net.HttpCookie: void setHttpOnly(boolean)> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)> -> _SINK_
<java.io.ObjectStreamException: void <init>()> -> _SINK_
<java.io.PushbackInputStream: void <init>(java.io.InputStream,int)> -> _SINK_
<java.io.CharArrayWriter: void flush()> -> _SINK_
<java.io.PrintWriter: void <init>(java.io.OutputStream,boolean)> -> _SINK_
<java.nio.SocketChannelImpl: int writeImpl(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.spi.SelectorProvider: java.nio.channels.spi.SelectorProvider provider()> -> _SINK_
<java.net.Socket: void cacheLocalAddress()> -> _SINK_
<java.net.DatagramSocket: void <init>(java.net.DatagramSocketImpl)> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getHeaderField(int)> -> _SINK_
<java.nio.DatagramChannelImpl: int writeImpl(java.nio.ByteBuffer)> -> _SINK_
<java.io.PipedWriter: void flush()> -> _SINK_
<java.io.PrintStream: void <init>(java.io.OutputStream,boolean)> -> _SINK_
<java.io.ObjectInputStream: java.lang.Class resolveClass(java.io.ObjectStreamClass)> -> _SINK_
<java.io.File: boolean canRead()> -> _SINK_
<java.io.ObjectOutputStream: java.io.ObjectOutputStream$PutField putFields()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress parseNumericAddress(java.lang.String)> -> _SINK_
<java.io.ByteArrayInputStream: void mark(int)> -> _SINK_
<java.net.Inet6Address: java.lang.String getHostAddress()> -> _SINK_
<java.io.IOException: void <init>(java.lang.Throwable)> -> _SINK_
<java.nio.DatagramChannelImpl: int send(java.nio.ByteBuffer,java.net.SocketAddress)> -> _SINK_
<java.net.Inet6Address: byte[] getAddress()> -> _SINK_
<java.net.Inet6Address: boolean isMulticastAddress()> -> _SINK_
<java.net.InetAddress: boolean isLoopbackAddress()> -> _SINK_
<java.net.Socket: int getSoLinger()> -> _SINK_
<java.nio.IntBuffer: java.lang.String toString()> -> _SINK_
<java.io.Writer: void <init>()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getLocalHost()> -> _SINK_
<java.nio.DoubleBuffer: int hashCode()> -> _SINK_
<java.net.MulticastSocket: void setNetworkInterface(java.net.NetworkInterface)> -> _SINK_
<java.io.File: boolean setLastModified(long)> -> _SINK_
<java.io.RandomAccessFile: void writeBoolean(boolean)> -> _SINK_
<java.nio.LongBuffer: boolean equals(java.lang.Object)> -> _SINK_
<java.net.ServerSocket: void close()> -> _SINK_
<java.net.NetworkInterface: int hashCode()> -> _SINK_
<java.io.BufferedInputStream: int available()> -> _SINK_
<java.nio.ShortBuffer: int compareTo(java.lang.Object)> -> _SINK_
<java.net.HttpURLConnection: java.security.Permission getPermission()> -> _SINK_
<java.net.SocketException: void <init>()> -> _SINK_
<java.nio.channels.DatagramChannel: java.nio.channels.DatagramChannel open()> -> _SINK_
<java.net.HttpCookie: void setPortlist(java.lang.String)> -> _SINK_
<java.net.URLConnection: long getHeaderFieldLong(java.lang.String,long)> -> _SINK_
<java.io.FilterWriter: void <init>(java.io.Writer)> -> _SINK_
<java.io.FilterInputStream: void mark(int)> -> _SINK_
<java.io.File: java.net.URI toURI()> -> _SINK_
<java.io.FileInputStream: int read(byte[],int,int)> -> _SINK_
<java.nio.DatagramChannelImpl: void onBind(boolean)> -> _SINK_
<java.io.DataOutputStream: void writeShort(int)> -> _SINK_
<java.net.DatagramSocket: void receive(java.net.DatagramPacket)> -> _SINK_
<java.net.Authenticator: java.lang.String getRequestingHost()> -> _SINK_
<java.net.PasswordAuthentication: char[] getPassword()> -> _SINK_
<java.io.ObjectStreamClass: java.lang.String getName()> -> _SINK_
<java.io.DataInputStream: byte readByte()> -> _SINK_
<java.net.URI: java.lang.String toASCIIString()> -> _SINK_
<java.io.RandomAccessFile: boolean readBoolean()> -> _SINK_
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)> -> _SINK_
<java.nio.channels.spi.AbstractSelector: void close()> -> _SINK_
<java.net.URLConnection: void setDefaultUseCaches(boolean)> -> _SINK_
<java.nio.charset.CoderResult: boolean isUnmappable()> -> _SINK_
<java.io.DataOutputStream: void writeChar(int)> -> _SINK_
<java.io.ObjectInputStream: java.lang.Object readObject()> -> _SINK_
<java.io.PrintStream: void close()> -> _SINK_
<java.nio.channels.FileChannel$MapMode: void <clinit>()> -> _SINK_
<java.nio.DatagramChannelImpl: void implConfigureBlocking(boolean)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.io.RandomAccessFile: void finalize()> -> _SINK_
<java.io.DataOutputStream: void writeDouble(double)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<java.io.PushbackInputStream: int read(byte[],int,int)> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByIndex(int)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)> -> _SINK_
<java.nio.channels.FileLock: java.lang.String toString()> -> _SINK_
<java.io.PushbackReader: int read()> -> _SINK_
<java.net.URI: boolean isOpaque()> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)> -> _SINK_
<java.net.URISyntaxException: java.lang.String getInput()> -> _SINK_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SINK_
<java.io.PrintWriter: void println(java.lang.String)> -> _SINK_
<java.io.ObjectInputStream: void readFully(byte[])> -> _SINK_
<java.io.ObjectOutputStream: void writeFloat(float)> -> _SINK_
<java.net.SocketImpl: java.lang.String toString()> -> _SINK_
<java.nio.CharBuffer: int length()> -> _SINK_
<java.io.PipedWriter: void write(int)> -> _SINK_
<java.io.SequenceInputStream: void <init>(java.io.InputStream,java.io.InputStream)> -> _SINK_
<java.io.File: java.io.File[] listFiles()> -> _SINK_
<java.io.LineNumberReader: java.lang.String readLine()> -> _SINK_
<java.io.ObjectInputStream: int read(byte[],int,int)> -> _SINK_
<java.net.CookieStoreImpl: java.util.List get(java.net.URI)> -> _SINK_
<java.io.DataInputStream: java.lang.String readUTF()> -> _SINK_
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()> -> _SINK_
<java.io.FilterReader: void mark(int)> -> _SINK_
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.CharsetDecoder)> -> _SINK_
<java.io.PushbackInputStream: void mark(int)> -> _SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.net.Socket accept()> -> _SINK_
<java.io.RandomAccessFile: void close()> -> _SINK_
<java.io.EOFException: void <init>()> -> _SINK_
<java.net.Socket: void setReceiveBufferSize(int)> -> _SINK_
<java.net.URLConnection: int getContentLength()> -> _SINK_
<java.io.CharArrayWriter: int size()> -> _SINK_
<java.io.File: void <clinit>()> -> _SINK_
<java.io.FilterInputStream: int read(byte[])> -> _SINK_
<java.io.StringReader: void <init>(java.lang.String)> -> _SINK_
<java.io.PushbackInputStream: void unread(byte[])> -> _SINK_
<java.io.PipedInputStream: void <init>()> -> _SINK_
<java.io.BufferedWriter: void <init>(java.io.Writer,int)> -> _SINK_
<java.nio.FileChannelImpl$FileLockImpl: void release()> -> _SINK_
<java.nio.CharBuffer: boolean equals(java.lang.Object)> -> _SINK_
<java.io.PrintStream: void println(float)> -> _SINK_
<java.net.URLClassLoader: void addURL(java.net.URL)> -> _SINK_
<java.net.URLConnection: long getHeaderFieldDate(java.lang.String,long)> -> _SINK_
<java.net.Socket: void <init>(java.net.Proxy)> -> _SINK_
<java.io.DataInputStream: int read(byte[],int,int)> -> _SINK_
<java.net.HttpCookie$CookieParser: void setAttribute(java.net.HttpCookie,java.lang.String,java.lang.String)> -> _SINK_
<java.io.CharArrayWriter: void write(char[],int,int)> -> _SINK_
<java.net.ProxySelectorImpl: java.net.Proxy selectOneProxy(java.net.URI)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<java.nio.charset.CoderResult: java.lang.String toString()> -> _SINK_
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter format(java.lang.String,java.lang.Object[])> -> _SINK_
<java.net.URLConnection: void setIfModifiedSince(long)> -> _SINK_
<java.nio.MemoryBlock$MemoryMappedBlock: void free()> -> _SINK_
<java.net.DatagramSocket: void close()> -> _SINK_
<java.io.Reader: long skip(long)> -> _SINK_
<java.net.Inet6Address: boolean isIPv4CompatibleAddress()> -> _SINK_
<java.nio.CharBuffer: java.lang.String toString()> -> _SINK_
<java.nio.DatagramChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.Reader: void <init>()> -> _SINK_
<java.net.Socket: void tryAllAddresses(java.lang.String,int,java.net.InetAddress,int,boolean)> -> _SINK_
<java.net.PasswordAuthentication: java.lang.String getUserName()> -> _SINK_
<java.nio.ServerSocketChannelImpl$ServerSocketAdapter: java.net.Socket implAccept(java.nio.SocketChannelImpl)> -> _SINK_
<java.net.NetworkInterface: java.util.List getNetworkInterfacesList()> -> _SINK_
<java.net.URL: boolean equals(java.lang.Object)> -> _SINK_
<java.nio.ShortBuffer: java.lang.String toString()> -> _SINK_
<java.nio.charset.Charset: boolean equals(java.lang.Object)> -> _SINK_
<java.io.File: java.lang.String[] list(java.io.FilenameFilter)> -> _SINK_
<java.io.RandomAccessFile: void write(int)> -> _SINK_
<java.io.InputStreamReader: void <init>(java.io.InputStream)> -> _SINK_
<java.net.URI: java.lang.String getHost()> -> _SINK_
<java.io.OutputStream: void flush()> -> _SINK_
<java.io.BufferedReader: long skip(long)> -> _SINK_
<java.io.InterruptedIOException: void <init>()> -> _SINK_
<java.io.InvalidObjectException: void <init>(java.lang.String)> -> _SINK_
<java.io.PipedWriter: void write(char[],int,int)> -> _SINK_
<java.io.UTFDataFormatException: void <init>(java.lang.String)> -> _SINK_
<java.net.InetSocketAddress: int getPort()> -> _SINK_
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.nio.CharBuffer: int compareTo(java.lang.Object)> -> _SINK_
<java.net.MulticastSocket: void leaveGroup(java.net.InetAddress)> -> _SINK_
<java.io.PipedInputStream: int read(byte[],int,int)> -> _SINK_
<java.io.ByteArrayInputStream: void <init>(byte[])> -> _SINK_
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
<java.io.InterruptedIOException: void <init>(java.lang.String)> -> _SINK_
<java.nio.FileChannelImpl: void force(boolean)> -> _SINK_
<java.nio.IntBuffer: int hashCode()> -> _SINK_
<java.io.StringWriter: void write(java.lang.String)> -> _SINK_
<java.net.HttpURLConnection: int getResponseCode()> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.RandomAccessFile: java.io.FileDescriptor getFD()> -> _SINK_
<java.io.RandomAccessFile: void setLength(long)> -> _SINK_
<java.io.StringReader: void mark(int)> -> _SINK_
<java.net.Socket: java.io.InputStream getInputStream()> -> _SINK_
<java.io.DataInputStream: int readUnsignedByte()> -> _SINK_
<java.net.HttpCookie: void setComment(java.lang.String)> -> _SINK_
<java.net.Socket: void <init>(java.lang.String,int)> -> _SINK_
<java.net.ServerSocket: void <init>(int,int)> -> _SINK_
<java.net.URLConnection: boolean getDoOutput()> -> _SINK_
<java.io.IOException: void <init>(java.lang.String)> -> _SINK_
<java.nio.channels.Channels: java.nio.channels.WritableByteChannel newChannel(java.io.OutputStream)> -> _SINK_
<java.net.DatagramSocket: void connect(java.net.SocketAddress)> -> _SINK_
<java.nio.file.DirectoryIteratorException: void <init>(java.io.IOException)> -> _SINK_
<java.io.PrintStream: boolean checkError()> -> _SINK_
<java.nio.file.Files: java.nio.file.Path createDirectories(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])> -> _SINK_
<java.net.ProxySelectorImpl: java.net.Proxy lookupProxy(java.lang.String,java.lang.String,java.net.Proxy$Type,int)> -> _SINK_
<java.io.PrintStream: void println(java.lang.String)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.StringReader: int read(char[],int,int)> -> _SINK_
<java.net.ProxySelector: void <init>()> -> _SINK_
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)> -> _SINK_
<java.nio.charset.CodingErrorAction: java.lang.String toString()> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String)> -> _SINK_
<java.nio.charset.CoderResult: void throwException()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> -> _SINK_
<java.net.InetAddress: boolean access$0(java.net.InetAddress,java.net.InetAddress,java.net.InetAddress,int)> -> _SINK_
<java.net.InetSocketAddress: java.lang.String getHostString()> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress,int)> -> _SINK_
<java.net.DatagramSocket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.io.InputStream: void close()> -> _SINK_
<java.nio.PipeImpl: void <init>(java.nio.channels.spi.SelectorProvider)> -> _SINK_
<java.io.CharArrayReader: int read(char[],int,int)> -> _SINK_
<java.net.HttpURLConnection: long getHeaderFieldDate(java.lang.String,long)> -> _SINK_
<java.net.IDN: java.lang.String toASCII(java.lang.String)> -> _SINK_
<java.net.InetAddress: boolean isReachable(int)> -> _SINK_
<java.io.Console: java.io.Console format(java.lang.String,java.lang.Object[])> -> _SINK_
<java.nio.FileChannelImpl: int transferIoVec(java.nio.IoVec)> -> _SINK_
<java.net.BindException: void <init>(java.lang.String)> -> _SINK_
<java.net.URL: java.lang.String getProtocol()> -> _SINK_
<java.io.RandomAccessFile: char readChar()> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.PrintStream: void println(long)> -> _SINK_
<java.nio.channels.SocketChannel: java.nio.channels.SocketChannel open()> -> _SINK_
<java.io.PrintWriter: void print(float)> -> _SINK_
<java.net.URI: java.lang.String getRawUserInfo()> -> _SINK_
<java.io.FileInputStream: void <init>(java.io.FileDescriptor)> -> _SINK_
<java.nio.FileChannelImpl: java.nio.channels.FileChannel truncate(long)> -> _SINK_
<java.nio.file.attribute.FileTime: int compareTo(java.nio.file.attribute.FileTime)> -> _SINK_
<java.io.InvalidClassException: java.lang.String getMessage()> -> _SINK_
<java.io.PrintStream: java.io.PrintStream format(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<java.net.CookieManager: void setCookiePolicy(java.net.CookiePolicy)> -> _SINK_
<java.io.FileWriter: void <init>(java.lang.String)> -> _SINK_
<java.net.NetworkInterface: java.util.Enumeration getNetworkInterfaces()> -> _SINK_
<java.net.MalformedURLException: void <init>()> -> _SINK_
<java.io.StringWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.nio.ByteOrder: void <clinit>()> -> _SINK_
<java.net.URLClassLoader: void <init>(java.net.URL[],java.lang.ClassLoader)> -> _SINK_
<java.io.PushbackReader: void <init>(java.io.Reader)> -> _SINK_
<java.net.URL: java.net.URI toURI()> -> _SINK_
<java.net.DatagramSocket: void <init>(int)> -> _SINK_
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URI: java.lang.String getFragment()> -> _SINK_
<java.nio.file.Files: java.nio.channels.SeekableByteChannel newByteChannel(java.nio.file.Path,java.nio.file.OpenOption[])> -> _SINK_
<java.net.URLStreamHandler: void <init>()> -> _SINK_
<java.net.Socket: boolean getTcpNoDelay()> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.CharsetEncoder)> -> _SINK_
<java.io.PushbackReader: void unread(char[],int,int)> -> _SINK_
<java.io.File: boolean setReadable(boolean)> -> _SINK_
<java.nio.LongBuffer: java.lang.String toString()> -> _SINK_
<java.io.FileInputStream: void <init>(java.lang.String)> -> _SINK_
<java.io.NotSerializableException: void <init>(java.lang.String)> -> _SINK_
<java.io.Reader: int read(java.nio.CharBuffer)> -> _SINK_
<java.net.InetAddress: int hashCode()> -> _SINK_
<java.io.FilterOutputStream: void close()> -> _SINK_
<java.io.File: boolean delete()> -> _SINK_
<java.io.RandomAccessFile: void seek(long)> -> _SINK_
<java.net.InetAddress: byte[] getAddress()> -> _SINK_
<java.io.DataInputStream: java.lang.String readLine()> -> _SINK_
<java.nio.file.LinkOption: void <init>(java.lang.String,int)> -> _SINK_
<java.io.ObjectStreamClass: java.lang.String toString()> -> _SINK_
<java.io.InputStream: boolean markSupported()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: java.lang.String readLine()> -> _SINK_
<java.io.PrintStream: void println()> -> _SINK_
<java.io.PipedOutputStream: void <init>()> -> _SINK_
<java.io.BufferedReader: void <init>(java.io.Reader)> -> _SINK_
<java.io.PipedInputStream: int read()> -> _SINK_
<java.io.ObjectOutputStream: void defaultWriteObject()> -> _SINK_
<java.nio.SelectorImpl: int select(long)> -> _SINK_
<java.net.InetAddress: boolean isLinkLocalAddress()> -> _SINK_
<java.io.CharArrayWriter: void write(int)> -> _SINK_
<java.io.File: boolean mkdirs()> -> _SINK_
<java.net.URLConnection: void setUseCaches(boolean)> -> _SINK_
<java.io.BufferedReader: void reset()> -> _SINK_
<java.net.Inet6Address: boolean isLinkLocalAddress()> -> _SINK_
<java.nio.SelectorImpl: int selectNow()> -> _SINK_
<java.io.BufferedReader: void <init>(java.io.Reader,int)> -> _SINK_
<java.io.ObjectInputStream: int read()> -> _SINK_
<java.net.URI: int hashCode()> -> _SINK_
<java.net.Socket: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<java.nio.SelectorImpl: int selectInternal(long)> -> _SINK_
<java.io.FileOutputStream: java.io.FileDescriptor getFD()> -> _SINK_
<java.net.HttpCookie: int hashCode()> -> _SINK_
<java.io.FilterWriter: void write(int)> -> _SINK_
<java.net.ProtocolException: void <init>(java.lang.String)> -> _SINK_
<java.net.NetworkInterface: boolean supportsMulticast()> -> _SINK_
<java.io.CharArrayReader: void <init>(char[])> -> _SINK_
<java.net.Socket: void accepted()> -> _SINK_
<java.io.File: long lastModified()> -> _SINK_
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void connect(java.net.SocketAddress)> -> _SINK_
<java.net.Socket: void startupSocket(java.net.InetAddress,int,java.net.InetAddress,int,boolean)> -> _SINK_
<java.io.DataOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.nio.FileChannelImpl: long position()> -> _SINK_
<java.net.Socket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.net.URI: java.lang.String getRawAuthority()> -> _SINK_
<java.net.URI: java.net.URI resolve(java.net.URI)> -> _SINK_
<java.nio.charset.CoderResult: void <clinit>()> -> _SINK_
<java.io.CharArrayWriter: char[] toCharArray()> -> _SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.nio.channels.ClosedChannelException: void <init>()> -> _SINK_
<java.io.ByteArrayOutputStream: void reset()> -> _SINK_
<java.io.File: boolean mkdir()> -> _SINK_
<java.net.Socket: void setSoLinger(boolean,int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_
<java.net.HttpCookie: java.lang.String getComment()> -> _SINK_
<java.io.FileOutputStream: void finalize()> -> _SINK_
<java.io.ObjectOutputStream: void writeFields()> -> _SINK_
<java.io.StringReader: int read()> -> _SINK_
<java.net.ServerSocket: void <init>(int)> -> _SINK_
<java.nio.charset.CodingErrorAction: void <clinit>()> -> _SINK_
<java.io.FileInputStream: void finalize()> -> _SINK_
<java.net.UnknownServiceException: void <init>(java.lang.String)> -> _SINK_
<java.nio.charset.Charset: boolean isSupported(java.lang.String)> -> _SINK_
<java.net.Inet6Address: java.net.NetworkInterface getScopedInterface()> -> _SINK_
<java.net.HttpCookie: java.util.List parse(java.lang.String)> -> _SINK_
<java.io.BufferedInputStream: void close()> -> _SINK_
<java.nio.ShortBuffer: int hashCode()> -> _SINK_
<java.net.Socket: java.net.InetAddress getInetAddress()> -> _SINK_
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer force()> -> _SINK_
<java.io.ByteArrayOutputStream: void writeTo(java.io.OutputStream)> -> _SINK_
<java.net.HttpCookie: java.lang.String toString()> -> _SINK_
<java.net.URI: java.lang.String getUserInfo()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SINK_
<java.io.BufferedOutputStream: void flush()> -> _SINK_
<java.io.InputStreamReader: int read(char[],int,int)> -> _SINK_
<java.io.ObjectInputStream: int readUnsignedByte()> -> _SINK_
<java.io.DataInputStream: char readChar()> -> _SINK_
<java.nio.file.LinkOption: java.nio.file.LinkOption[] $values()> -> _SINK_
<java.net.MulticastSocket: void joinGroup(java.net.InetAddress)> -> _SINK_
<java.net.URLConnection: java.net.URL getURL()> -> _SINK_
<java.io.StringWriter: void <init>(int)> -> _SINK_
<java.net.NetworkInterface: int readIntFile(java.lang.String)> -> _SINK_
<java.net.Socket: void setSendBufferSize(int)> -> _SINK_
<java.io.FilterInputStream: void <init>(java.io.InputStream)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress parseNumericAddressNoThrow(java.lang.String)> -> _SINK_
<java.io.BufferedWriter: void flush()> -> _SINK_
<java.nio.FileChannelImpl: java.nio.channels.FileLock lock(long,long,boolean)> -> _SINK_
<java.nio.SelectorProviderImpl: java.nio.channels.SocketChannel openSocketChannel()> -> _SINK_
<java.net.HttpCookie: void setSecure(boolean)> -> _SINK_
<java.io.PipedOutputStream: void flush()> -> _SINK_
<java.net.URI: java.lang.String getScheme()> -> _SINK_
<java.io.InputStream: int available()> -> _SINK_
<java.io.File: void <init>(java.lang.String)> -> _SINK_
<java.net.InetAddress: boolean isAnyLocalAddress()> -> _SINK_
<java.net.DatagramPacket: void <init>(byte[],int,int)> -> _SINK_
<java.net.URLConnection: java.lang.String getContentEncoding()> -> _SINK_
<java.net.URI: java.net.URI normalize()> -> _SINK_
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)> -> _SINK_
<java.io.EOFException: void <init>(java.lang.String)> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteBuffer allocateDirect(int)> -> _SINK_
<java.nio.SelectorImpl: void implCloseSelector()> -> _SINK_
<java.nio.BufferOverflowException: void <init>()> -> _SINK_
<java.net.InterfaceAddress: int hashCode()> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.net.CookieStoreImpl: java.net.URI cookiesUri(java.net.URI)> -> _SINK_
<java.net.NetworkInterface: boolean hasFlag(int)> -> _SINK_
<java.net.HttpCookie: boolean hasExpired()> -> _SINK_
<java.net.DatagramPacket: byte[] getData()> -> _SINK_
<java.net.DatagramSocket: boolean isClosed()> -> _SINK_
<java.io.RandomAccessFile: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress[] getAllByNameImpl(java.lang.String)> -> _SINK_
<java.nio.IntBuffer: java.nio.IntBuffer wrap(int[])> -> _SINK_
<java.nio.channels.Channels: java.io.InputStream newInputStream(java.nio.channels.ReadableByteChannel)> -> _SINK_
<java.io.InputStreamReader: java.lang.String getEncoding()> -> _SINK_
<java.io.PrintWriter: boolean checkError()> -> _SINK_
<java.io.DataInputStream: int readInt()> -> _SINK_
<java.net.DatagramPacket: void setLength(int)> -> _SINK_
<java.io.CharArrayWriter: void writeTo(java.io.Writer)> -> _SINK_
<java.io.FileReader: void <init>(java.lang.String)> -> _SINK_
<java.io.FilterInputStream: long skip(long)> -> _SINK_
<java.net.ConnectException: void <init>(java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.net.URL,java.lang.String)> -> _SINK_
<java.io.WriteAbortedException: java.lang.Throwable getCause()> -> _SINK_
<java.io.File: int hashCode()> -> _SINK_
<java.nio.FileChannelImpl: long transferTo(long,long,java.nio.channels.WritableByteChannel)> -> _SINK_
<java.net.NetworkInterface: void collectIpv4Address(java.lang.String,java.util.List,java.util.List)> -> _SINK_
<java.nio.charset.MalformedInputException: java.lang.String getMessage()> -> _SINK_
<java.net.Authenticator: java.net.PasswordAuthentication requestPasswordAuthentication(java.lang.String,java.net.InetAddress,int,java.lang.String,java.lang.String,java.lang.String,java.net.URL,java.net.Authenticator$RequestorType)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintStream: void print(double)> -> _SINK_
<java.nio.PipeImpl$PipeSinkChannel: void implConfigureBlocking(boolean)> -> _SINK_
<java.nio.charset.StandardCharsets: void <clinit>()> -> _SINK_
<java.io.StringReader: boolean markSupported()> -> _SINK_
<java.net.URI: java.net.URI parseServerAuthority()> -> _SINK_
<java.net.URLConnection: boolean getDefaultUseCaches()> -> _SINK_
<java.net.SocketException: void <init>(java.lang.String)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)> -> _SINK_
<java.io.File: boolean setReadable(boolean,boolean)> -> _SINK_
<java.io.PrintWriter: void close()> -> _SINK_
<java.nio.charset.Charset: int hashCode()> -> _SINK_
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)> -> _SINK_
<java.io.RandomAccessFile: void writeByte(int)> -> _SINK_
<java.net.HttpCookie: boolean equals(java.lang.Object)> -> _SINK_
<java.nio.DoubleBuffer: int compareTo(java.lang.Object)> -> _SINK_
<java.net.Socket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.NetworkInterface: boolean equals(java.lang.Object)> -> _SINK_
<java.io.BufferedReader: void close()> -> _SINK_
<java.io.FilterOutputStream: void write(byte[])> -> _SINK_
<java.nio.channels.FileChannel$MapMode: java.lang.String toString()> -> _SINK_
<java.io.File: int compareTo(java.lang.Object)> -> _SINK_
<java.io.FilterReader: int read(char[],int,int)> -> _SINK_
<java.nio.channels.ServerSocketChannel: java.nio.channels.ServerSocketChannel open()> -> _SINK_
<java.io.SequenceInputStream: void close()> -> _SINK_
<java.net.URL: java.lang.String toExternalForm()> -> _SINK_
<java.io.FileNotFoundException: void <init>(java.lang.String)> -> _SINK_
<java.io.ObjectInputStream: void <init>(java.io.InputStream)> -> _SINK_
<java.net.URLConnection: boolean getDoInput()> -> _SINK_
<java.nio.SocketChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider)> -> _SINK_
<java.net.URLConnection: void setDoInput(boolean)> -> _SINK_
<java.io.PipedWriter: void close()> -> _SINK_
<java.nio.FloatBuffer: int compareTo(java.lang.Object)> -> _SINK_
<java.net.DatagramPacket: int getOffset()> -> _SINK_
<java.net.Authenticator: java.net.URL getRequestingURL()> -> _SINK_
<java.net.HttpRetryException: int responseCode()> -> _SINK_
<java.net.URI: java.lang.String getRawPath()> -> _SINK_
<java.nio.channels.ReadableByteChannel: int read(java.nio.ByteBuffer)> -> _SINK_
<java.io.ObjectInputStream: int readUnsignedShort()> -> _SINK_
<java.io.UncheckedIOException: void <init>(java.io.IOException)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.nio.FileChannelImpl: long read(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.io.RandomAccessFile: void writeLong(long)> -> _SINK_
<java.net.CacheRequest: void <init>()> -> _SINK_
<java.net.Authenticator$RequestorType: void <clinit>()> -> _SINK_
<java.io.File: void mkdirErrno()> -> _SINK_
<java.io.IOException: void <init>()> -> _SINK_
<java.net.HttpRetryException: void <init>(java.lang.String,int)> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()> -> _SINK_
<java.io.StringWriter: java.io.StringWriter append(char)> -> _SINK_
<java.nio.SelectorImpl: int processPollFds()> -> _SINK_
<java.net.CookiePolicy: void <clinit>()> -> _SINK_
<java.io.BufferedWriter: void newLine()> -> _SINK_
<javax.net.ssl.DefaultHostnameVerifier: boolean verify(java.lang.String,javax.net.ssl.SSLSession)> -> _SINK_
<java.net.Socket: void shutdownOutput()> -> _SINK_
<java.net.URLConnection: long getExpiration()> -> _SINK_
<java.io.ObjectStreamField: java.lang.String toString()> -> _SINK_
<java.net.HttpCookie$CookieParser: java.util.List parse()> -> _SINK_
<java.net.Proxy: void <clinit>()> -> _SINK_
<java.io.FilterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.net.Inet4Address: java.lang.String getHostAddress()> -> _SINK_
<java.io.FileInputStream: java.io.FileDescriptor getFD()> -> _SINK_
<java.io.ByteArrayOutputStream: java.lang.String toString()> -> _SINK_
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)> -> _SINK_
<java.io.FileWriter: void <init>(java.io.File,boolean)> -> _SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer,long)> -> _SINK_
<java.net.Authenticator$RequestorType: void <init>(java.lang.String,int)> -> _SINK_
<java.io.FileOutputStream: void <init>(java.lang.String)> -> _SINK_
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)> -> _SINK_
<java.net.Socket: java.nio.channels.SocketChannel getChannel()> -> _SINK_
<java.net.URI: java.net.URI create(java.lang.String)> -> _SINK_
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)> -> _SINK_
<java.io.File: long getFreeSpace()> -> _SINK_
<java.nio.ShortBuffer: java.nio.ShortBuffer wrap(short[])> -> _SINK_
<javax.net.DefaultSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)> -> _SINK_
<java.net.InetAddress: java.lang.String toString()> -> _SINK_
<java.nio.charset.CharacterCodingException: void <init>()> -> _SINK_
<java.net.URL: int getDefaultPort()> -> _SINK_
<java.net.URI: int compareTo(java.lang.Object)> -> _SINK_
<java.nio.ByteBuffer: boolean equals(java.lang.Object)> -> _SINK_
<java.io.File: boolean exists()> -> _SINK_
<java.io.FileInputStream: long skip(long)> -> _SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)> -> _SINK_
<java.io.PrintStream: void <init>(java.io.File)> -> _SINK_
<java.io.PrintStream: void println(boolean)> -> _SINK_
<java.io.PushbackReader: int read(char[],int,int)> -> _SINK_
<java.io.File: boolean setWritable(boolean)> -> _SINK_
<java.io.PushbackInputStream: boolean markSupported()> -> _SINK_
<java.nio.SocketChannelImpl: void onAccept(java.net.InetSocketAddress,boolean)> -> _SINK_
<java.net.HttpCookie: boolean getDiscard()> -> _SINK_
<java.net.DatagramSocket: void setSoTimeout(int)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> -> _SINK_
<java.nio.DatagramChannelImpl: java.net.SocketAddress receive(java.nio.ByteBuffer)> -> _SINK_
<java.io.File: java.lang.String getAbsoluteName()> -> _SINK_
<java.io.ByteArrayOutputStream: void write(int)> -> _SINK_
<java.io.DataOutputStream: void <init>(java.io.OutputStream)> -> _SINK_
<java.io.ObjectInputStream: int skipBytes(int)> -> _SINK_
<java.net.InterfaceAddress: java.net.InetAddress getBroadcast()> -> _SINK_
<java.io.PrintWriter: void <init>(java.io.Writer,boolean)> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<java.nio.IntBuffer: boolean equals(java.lang.Object)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence,int,int)> -> _SINK_
<java.net.InetAddress: boolean isReachable(java.net.NetworkInterface,int,int)> -> _SINK_
<java.net.URL: int getPort()> -> _SINK_
<java.io.BufferedInputStream: void mark(int)> -> _SINK_
<java.net.URLClassLoader: void <init>(java.net.URL[])> -> _SINK_
<java.sql.Timestamp: java.sql.Timestamp valueOf(java.lang.String)> -> _SINK_
<java.nio.CharBuffer: int hashCode()> -> _SINK_
<java.nio.ServerSocketChannelImpl: java.nio.channels.SocketChannel accept()> -> _SINK_
<java.io.FilterReader: int read()> -> _SINK_
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)> -> _SINK_
<java.net.HttpURLConnection: void setFollowRedirects(boolean)> -> _SINK_
<java.net.MulticastSocket: void setTimeToLive(int)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.net.Authenticator: void <init>()> -> _SINK_
<java.io.BufferedInputStream: int read(byte[],int,int)> -> _SINK_
<java.io.Reader: void mark(int)> -> _SINK_
<java.io.File: java.io.File getParentFile()> -> _SINK_
<java.net.HttpRetryException: java.lang.String getReason()> -> _SINK_
<java.net.Socket: boolean isBound()> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter format(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<java.io.ObjectInputStream: java.lang.String readLine()> -> _SINK_
<java.io.StreamCorruptedException: void <init>(java.lang.String)> -> _SINK_
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)> -> _SINK_
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)> -> _SINK_
<java.io.CharArrayReader: boolean markSupported()> -> _SINK_
<java.net.DatagramPacket: int getPort()> -> _SINK_
<java.io.RandomAccessFile: void writeBytes(java.lang.String)> -> _SINK_
<java.net.URLConnection: long getDate()> -> _SINK_
<java.nio.SocketChannelImpl: void onBind(boolean)> -> _SINK_
<java.io.SequenceInputStream: void <init>(java.util.Enumeration)> -> _SINK_
<java.net.InetSocketAddress: java.lang.String getHostName()> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence)> -> _SINK_
<java.io.OutputStream: void close()> -> _SINK_
<java.net.Socket: void setPerformancePreferences(int,int,int)> -> _SINK_
<java.io.ObjectOutputStream: void <init>(java.io.OutputStream)> -> _SINK_
<java.io.PrintStream: void <init>(java.io.OutputStream)> -> _SINK_
<java.net.Socket: java.net.InetAddress getLocalAddress()> -> _SINK_
<java.io.PrintStream: void println(char)> -> _SINK_
<java.io.File: long getTotalSpace()> -> _SINK_
<java.net.InetSocketAddress: int hashCode()> -> _SINK_
<java.io.ObjectStreamClass: void <clinit>()> -> _SINK_
<java.io.RandomAccessFile: byte readByte()> -> _SINK_
<java.nio.IntBuffer: int compareTo(java.lang.Object)> -> _SINK_
<java.net.HttpCookie: java.lang.String getPath()> -> _SINK_
<java.net.Socket: void setTcpNoDelay(boolean)> -> _SINK_
<java.nio.CharBuffer: int read(java.nio.CharBuffer)> -> _SINK_
<java.net.URLConnection: java.lang.String guessContentTypeFromName(java.lang.String)> -> _SINK_
<java.io.BufferedWriter: void close()> -> _SINK_
<java.io.StringWriter: java.lang.String toString()> -> _SINK_
<javax.net.DefaultSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> -> _SINK_
<java.io.PrintStream: void println(char[])> -> _SINK_
<java.net.ServerSocket: void <init>()> -> _SINK_
<java.io.DataInputStream: double readDouble()> -> _SINK_
<java.io.File: boolean setWritable(boolean,boolean)> -> _SINK_
<java.io.StringWriter: void write(char[],int,int)> -> _SINK_
<java.io.RandomAccessFile: int read(byte[])> -> _SINK_
<java.net.Proxy: int hashCode()> -> _SINK_
<java.net.Socket: java.net.SocketAddress getRemoteSocketAddress()> -> _SINK_
<java.io.PrintWriter: void println(int)> -> _SINK_
<java.nio.SelectorProviderImpl: java.nio.channels.spi.AbstractSelector openSelector()> -> _SINK_
<java.net.Socket: boolean isClosed()> -> _SINK_
<java.io.BufferedReader: void mark(int)> -> _SINK_
<java.io.SequenceInputStream: int read()> -> _SINK_
<javax.net.ssl.SSLServerSocket: void <init>(int,int)> -> _SINK_
<javax.net.ssl.DefaultHostnameVerifier: boolean verify(java.lang.String,java.security.cert.X509Certificate)> -> _SINK_
<java.io.File: boolean isFile()> -> _SINK_
<java.net.ProxySelector: java.net.ProxySelector getDefault()> -> _SINK_
<java.net.Socket: boolean isConnected()> -> _SINK_
<java.nio.file.Files: void delete(java.nio.file.Path)> -> _SINK_
<java.io.BufferedWriter: void <init>(java.io.Writer)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence)> -> _SINK_
<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SINK_
<java.net.DatagramPacket: void <init>(byte[],int,java.net.InetAddress,int)> -> _SINK_
<java.io.FileOutputStream: void <init>(java.io.File)> -> _SINK_
<java.nio.channels.Channels: java.nio.channels.ReadableByteChannel newChannel(java.io.InputStream)> -> _SINK_
<java.io.ByteArrayInputStream: long skip(long)> -> _SINK_
<java.nio.CharBuffer: char charAt(int)> -> _SINK_
<java.nio.PipeImpl$PipeSourceChannel: void implConfigureBlocking(boolean)> -> _SINK_
<java.io.ByteArrayOutputStream: void <init>()> -> _SINK_
<java.nio.FileChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int,java.net.InetAddress,int)> -> _SINK_
<java.io.PipedReader: void close()> -> _SINK_
<java.net.MulticastSocket: void <init>(int)> -> _SINK_
<java.nio.SocketChannelImpl$SocketAdapter: void bind(java.net.SocketAddress)> -> _SINK_
<java.io.FilterInputStream: boolean markSupported()> -> _SINK_
<java.io.DataOutputStream: void flush()> -> _SINK_
<java.nio.SocketChannelImpl: long read(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.nio.SocketChannelImpl: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.nio.FloatBuffer: boolean equals(java.lang.Object)> -> _SINK_
<java.nio.file.LinkOption: void <clinit>()> -> _SINK_
<java.net.Socket: int getLocalPort()> -> _SINK_
<java.net.InetAddress: boolean equals(java.lang.Object)> -> _SINK_
<java.io.CharArrayReader: void mark(int)> -> _SINK_
<java.io.WriteAbortedException: java.lang.String getMessage()> -> _SINK_
<java.io.ByteArrayOutputStream: void close()> -> _SINK_
<java.net.Socket: boolean getKeepAlive()> -> _SINK_
<java.io.FilterWriter: void close()> -> _SINK_
<java.net.Socket: void connect(java.net.SocketAddress)> -> _SINK_
<java.io.RandomAccessFile: void writeInt(int)> -> _SINK_
<java.net.HttpCookie: java.lang.String getCommentURL()> -> _SINK_
<java.nio.channels.FileLock: void close()> -> _SINK_
<java.io.FileInputStream: int read(byte[])> -> _SINK_
<java.nio.SelectorImpl: java.nio.channels.Selector wakeup()> -> _SINK_
<java.io.BufferedInputStream: void reset()> -> _SINK_
<java.io.PipedInputStream: void connect(java.io.PipedOutputStream)> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void send(java.net.DatagramPacket)> -> _SINK_
<java.io.PrintStream: void print(char)> -> _SINK_
<java.net.ProxySelectorImpl: java.util.List select(java.net.URI)> -> _SINK_
<java.net.NoRouteToHostException: void <init>(java.lang.String)> -> _SINK_
<java.io.ByteArrayOutputStream: byte[] toByteArray()> -> _SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_
<java.nio.FileChannelImpl: java.nio.channels.FileChannel position(long)> -> _SINK_
<java.net.URL: java.lang.String getAuthority()> -> _SINK_
<java.io.FileNotFoundException: void <init>()> -> _SINK_
<java.io.PrintStream: void println(int)> -> _SINK_
<java.io.BufferedInputStream: boolean markSupported()> -> _SINK_
<java.net.InetSocketAddress: boolean equals(java.lang.Object)> -> _SINK_
<java.nio.DatagramChannelImpl: int read(java.nio.ByteBuffer)> -> _SINK_
<java.net.DatagramSocket: void setReuseAddress(boolean)> -> _SINK_
<java.net.URLConnection: void setDoOutput(boolean)> -> _SINK_
<java.net.URLConnection: java.util.Map getRequestProperties()> -> _SINK_
<java.io.ObjectInputStream: java.io.ObjectInputStream$GetField readFields()> -> _SINK_
<java.net.InetAddress: java.lang.String getCanonicalHostName()> -> _SINK_
<java.io.ByteArrayInputStream: void close()> -> _SINK_
<java.io.PipedOutputStream: void close()> -> _SINK_
<java.net.URI: java.net.URI resolve(java.lang.String)> -> _SINK_
<java.nio.BufferUnderflowException: void <init>()> -> _SINK_
<java.nio.charset.CoderResult: boolean isUnderflow()> -> _SINK_
<java.io.FileOutputStream: void <init>(java.io.File,boolean)> -> _SINK_
<java.io.Reader: boolean ready()> -> _SINK_
<java.net.InetSocketAddress: java.lang.String toString()> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)> -> _SINK_
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)> -> _SINK_
<java.net.CookieManager: java.util.List parseCookie(java.util.Map)> -> _SINK_
<java.io.InputStream: void reset()> -> _SINK_
<java.net.URL: java.lang.String getFile()> -> _SINK_
<java.nio.channels.spi.AbstractInterruptibleChannel: boolean isOpen()> -> _SINK_
<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)> -> _SINK_
<java.io.FilterOutputStream: void flush()> -> _SINK_
<java.net.DatagramPacket: int getLength()> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(java.lang.CharSequence)> -> _SINK_
<java.io.StringReader: boolean ready()> -> _SINK_
<java.io.PrintWriter: void println(char)> -> _SINK_
<java.nio.SelectorProviderImpl: java.nio.channels.Pipe openPipe()> -> _SINK_
<java.io.CharArrayReader: void <init>(char[],int,int)> -> _SINK_
<java.io.Reader: int read()> -> _SINK_
<java.net.DatagramPacket: void <init>(byte[],int)> -> _SINK_
<java.io.DataInputStream: float readFloat()> -> _SINK_
<java.nio.SelectorProviderImpl: java.nio.channels.DatagramChannel openDatagramChannel()> -> _SINK_
<java.io.CharArrayReader: int read()> -> _SINK_
<java.net.InetSocketAddress: void <init>(java.lang.String,int,boolean)> -> _SINK_
<java.io.ByteArrayOutputStream: void <init>(int)> -> _SINK_
<java.net.Inet6Address: boolean isAnyLocalAddress()> -> _SINK_
<java.net.HttpCookie: boolean isHttpOnly()> -> _SINK_
<java.nio.ByteBuffer: int compareTo(java.lang.Object)> -> _SINK_
<java.io.ObjectInputStream: byte readByte()> -> _SINK_
<java.io.Console: void flush()> -> _SINK_
<java.io.OutputStreamWriter: java.lang.String getEncoding()> -> _SINK_
<java.io.PrintStream: java.io.PrintStream printf(java.util.Locale,java.lang.String,java.lang.Object[])> -> _SINK_
<java.net.NetworkInterface: java.lang.String[] readIfInet6Lines()> -> _SINK_
<java.net.URLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.nio.DatagramChannelImpl: long write(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.net.Proxy: boolean equals(java.lang.Object)> -> _SINK_
<java.net.URLClassLoader$URLFileHandler: java.lang.Class findClass(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)> -> _SINK_
<java.net.Inet4Address: boolean isLoopbackAddress()> -> _SINK_
<java.io.ByteArrayInputStream: int read(byte[],int,int)> -> _SINK_
<java.io.PrintWriter: void print(java.lang.Object)> -> _SINK_
<java.io.ObjectInputStream: java.io.ObjectStreamClass readClassDescriptor()> -> _SINK_
<java.net.InetSocketAddress: void <init>(int)> -> _SINK_
<java.net.URISyntaxException: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.io.PrintWriter: void flush()> -> _SINK_
<java.io.PrintWriter: void <init>(java.io.Writer)> -> _SINK_
<java.net.Authenticator: java.lang.String getRequestingPrompt()> -> _SINK_
<java.nio.file.Paths: java.nio.file.Path get(java.lang.String,java.lang.String[])> -> _SINK_
<java.io.RandomAccessFile: java.lang.String readUTF()> -> _SINK_
<java.net.InetAddress: boolean isNumeric(java.lang.String)> -> _SINK_
<java.io.PrintStream: void println(java.lang.Object)> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByInetAddress(java.net.InetAddress)> -> _SINK_
<java.nio.FileChannelImpl: int readImpl(java.nio.ByteBuffer,long)> -> _SINK_
<java.nio.charset.CoderResult: boolean isOverflow()> -> _SINK_
<java.net.Socket: boolean getOOBInline()> -> _SINK_
<java.io.RandomAccessFile: int readUnsignedByte()> -> _SINK_
<java.net.Socket: void setTrafficClass(int)> -> _SINK_
<java.io.DataInputStream: void <init>(java.io.InputStream)> -> _SINK_
<java.io.RandomAccessFile: void writeChar(int)> -> _SINK_
<java.net.URLStreamHandler: java.net.InetAddress getHostAddress(java.net.URL)> -> _SINK_
<java.io.Console: void <clinit>()> -> _SINK_
<java.nio.SocketChannelImpl: void <init>(java.nio.channels.spi.SelectorProvider,boolean)> -> _SINK_
<java.net.URI: boolean equals(java.lang.Object)> -> _SINK_
<java.nio.file.attribute.FileTime: int compareTo(java.lang.Object)> -> _SINK_
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)> -> _SINK_
<java.io.InputStream: int read(byte[])> -> _SINK_
<java.net.URL: void <init>(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void println(java.lang.Object)> -> _SINK_
<java.nio.ByteOrder: java.nio.ByteOrder nativeOrder()> -> _SINK_
<java.io.ObjectOutputStream: void writeShort(int)> -> _SINK_
<java.io.ObjectInputStream: void defaultReadObject()> -> _SINK_
<java.io.FilterReader: void <init>(java.io.Reader)> -> _SINK_
<java.net.CookieHandler: void setDefault(java.net.CookieHandler)> -> _SINK_
<java.net.SocketImpl: void <init>()> -> _SINK_
<java.io.PipedOutputStream: void write(int)> -> _SINK_
<java.net.Socket: boolean isInputShutdown()> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.net.URLClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)> -> _SINK_
<java.io.FilterWriter: void write(char[],int,int)> -> _SINK_
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.net.SecureCacheResponse: void <init>()> -> _SINK_
<java.nio.FileChannelImpl: java.nio.MappedByteBuffer map(java.nio.channels.FileChannel$MapMode,long,long)> -> _SINK_
<java.nio.charset.Charset: java.lang.String toString()> -> _SINK_
<java.nio.LongBuffer: java.nio.LongBuffer allocate(int)> -> _SINK_
<java.net.Inet6Address: boolean equals(java.lang.Object)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.File: void <init>(java.io.File,java.lang.String)> -> _SINK_
<java.io.LineNumberReader: void <init>(java.io.Reader,int)> -> _SINK_
<java.nio.MemoryBlock$MemoryMappedBlock: void finalize()> -> _SINK_
<java.net.ServerSocket: void setReuseAddress(boolean)> -> _SINK_
<java.nio.file.Files: boolean isSameFile(java.nio.file.Path,java.nio.file.Path)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.net.ServerSocket: void <init>(int,int,java.net.InetAddress)> -> _SINK_
<java.io.RandomAccessFile: void writeShort(int)> -> _SINK_
<java.nio.SocketChannelImpl: boolean connect(java.net.SocketAddress)> -> _SINK_
<java.nio.IntBuffer: java.nio.IntBuffer allocate(int)> -> _SINK_
<java.io.File: boolean isHidden()> -> _SINK_
<java.io.FileInputStream: int read()> -> _SINK_
<java.nio.charset.Charset: int compareTo(java.lang.Object)> -> _SINK_
<javax.net.DefaultSocketFactory: java.net.Socket createSocket(java.lang.String,int)> -> _SINK_
<java.net.DatagramSocket: void setNetworkInterface(java.net.NetworkInterface)> -> _SINK_
<java.io.File: long getUsableSpace()> -> _SINK_
<java.net.Socket: boolean getReuseAddress()> -> _SINK_
<java.net.URI: java.lang.String getPath()> -> _SINK_
<java.nio.FloatBuffer: java.lang.String toString()> -> _SINK_
<java.io.DataInputStream: short readShort()> -> _SINK_
<java.io.BufferedReader: boolean ready()> -> _SINK_
<java.nio.file.attribute.FileTime: java.lang.String toString()> -> _SINK_
<java.io.PipedOutputStream: void connect(java.io.PipedInputStream)> -> _SINK_
<java.nio.file.Files: java.nio.file.attribute.BasicFileAttributes readAttributes(java.nio.file.Path,java.lang.Class,java.nio.file.LinkOption[])> -> _SINK_
<java.io.File: boolean setReadOnly()> -> _SINK_
<java.net.ServerSocket: java.net.InetAddress getInetAddress()> -> _SINK_
<java.nio.FileChannelImpl: java.nio.channels.FileLock tryLock(long,long,boolean)> -> _SINK_
<javax.net.ssl.SSLServerSocket: void <init>(int)> -> _SINK_
<java.io.SequenceInputStream: int read(byte[],int,int)> -> _SINK_
<java.net.Authenticator: void setDefault(java.net.Authenticator)> -> _SINK_
<java.net.IDN: java.lang.String toUnicode(java.lang.String)> -> _SINK_
<java.io.FilterReader: void close()> -> _SINK_
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)> -> _SINK_
<java.io.File: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.io.ObjectStreamField: void <init>(java.lang.String,java.lang.Class)> -> _SINK_
<java.nio.FileChannelImpl: long transferFrom(java.nio.channels.ReadableByteChannel,long,long)> -> _SINK_
<java.net.ServerSocket: void setReceiveBufferSize(int)> -> _SINK_
<java.net.URI: java.lang.String getQuery()> -> _SINK_
<java.net.InetAddress: boolean isMulticastAddress()> -> _SINK_
<java.io.DataInputStream: int skipBytes(int)> -> _SINK_
<java.io.PipedWriter: void <init>()> -> _SINK_
<java.io.PrintStream: java.io.PrintStream append(char)> -> _SINK_
<java.net.Socket: int getReceiveBufferSize()> -> _SINK_
<java.io.PushbackInputStream: void <init>(java.io.InputStream)> -> _SINK_
<java.io.FilterInputStream: int read()> -> _SINK_
<java.net.Inet4Address: boolean isMulticastAddress()> -> _SINK_
<java.net.DatagramSocket: int getLocalPort()> -> _SINK_
<java.io.File: java.io.File getAbsoluteFile()> -> _SINK_
<java.io.InputStream: long skip(long)> -> _SINK_
<java.io.PipedOutputStream: void <init>(java.io.PipedInputStream)> -> _SINK_
<java.io.File: java.net.URL toURL()> -> _SINK_
<java.net.HttpURLConnection: boolean getFollowRedirects()> -> _SINK_
<java.io.FileReader: void <init>(java.io.File)> -> _SINK_
<java.net.URL: java.net.URI toURILenient()> -> _SINK_
<java.nio.MemoryBlock: java.nio.MemoryBlock mmap(java.io.FileDescriptor,long,long,java.nio.channels.FileChannel$MapMode)> -> _SINK_
<java.io.PrintWriter: void <init>(java.io.OutputStream)> -> _SINK_
<java.net.URL: java.lang.String getPath()> -> _SINK_
<java.net.URL: java.lang.String getRef()> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.nio.DatagramChannelImpl: java.net.SocketAddress receiveDirectImpl(java.nio.ByteBuffer,boolean)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByAddress(java.lang.String,byte[])> -> _SINK_
<java.net.URLConnection: java.lang.String getRequestProperty(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: boolean enableReplaceObject(boolean)> -> _SINK_
<java.nio.SocketChannelImpl: int readImpl(java.nio.ByteBuffer)> -> _SINK_
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[])> -> _SINK_
<java.io.PrintWriter: void print(boolean)> -> _SINK_
<java.io.ByteArrayInputStream: boolean markSupported()> -> _SINK_
<java.io.DataInputStream: void readFully(byte[])> -> _SINK_
<java.net.PasswordAuthentication: void <init>(java.lang.String,char[])> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<java.nio.file.FileSystemException: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.UnknownHostException: void <init>()> -> _SINK_
<java.nio.channels.Channels: java.io.OutputStream newOutputStream(java.nio.channels.WritableByteChannel)> -> _SINK_
<java.io.PushbackReader: boolean ready()> -> _SINK_
<java.nio.FloatBuffer: int hashCode()> -> _SINK_
<java.net.URI: void readObject(java.io.ObjectInputStream)> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getHeaderFieldKey(int)> -> _SINK_
<java.net.URL: java.io.InputStream openStream()> -> _SINK_
<java.io.BufferedOutputStream: void write(int)> -> _SINK_
<java.net.Inet6Address: int hashCode()> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByName(java.lang.String)> -> _SINK_
<java.io.PrintWriter: void write(char[],int,int)> -> _SINK_
<java.net.NetworkInterface: java.util.Enumeration getInetAddresses()> -> _SINK_
<java.io.CharArrayWriter: java.lang.String toString()> -> _SINK_
<java.io.PushbackReader: void <init>(java.io.Reader,int)> -> _SINK_
<java.net.InetSocketAddress: void <init>(java.lang.String,int)> -> _SINK_
<java.nio.charset.CoderResult: boolean isError()> -> _SINK_
<java.net.NetworkInterface: byte[] getHardwareAddress()> -> _SINK_
<java.io.PrintStream: void write(byte[],int,int)> -> _SINK_
<java.net.MulticastSocket: java.net.InetAddress getInterface()> -> _SINK_
<java.sql.Date: java.sql.Date valueOf(java.lang.String)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(char)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.nio.FileChannelImpl: int writeImpl(java.nio.ByteBuffer,long)> -> _SINK_
<java.net.MulticastSocket: void setInterface(java.net.InetAddress)> -> _SINK_
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.nio.SocketChannelImpl: int write(java.nio.ByteBuffer)> -> _SINK_
<java.net.URLConnection: int getHeaderFieldInt(java.lang.String,int)> -> _SINK_
<java.net.URLConnection: boolean getAllowUserInteraction()> -> _SINK_
<java.net.URI: java.lang.String getSchemeSpecificPart()> -> _SINK_
<java.net.URI: void parseAuthority(boolean)> -> _SINK_
<java.io.File: boolean canWrite()> -> _SINK_
<java.net.CookiePolicy$3: boolean shouldAccept(java.net.URI,java.net.HttpCookie)> -> _SINK_
<java.net.URL: int hashCode()> -> _SINK_
<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence)> -> _SINK_
<java.net.NetworkInterface: java.lang.String getName()> -> _SINK_
<java.nio.FileChannelImpl: int read(java.nio.ByteBuffer,long)> -> _SINK_
<java.io.InputStreamReader: int read()> -> _SINK_
<java.nio.file.Files: java.io.InputStream newInputStream(java.nio.file.Path,java.nio.file.OpenOption[])> -> _SINK_
<java.io.PrintStream: void flush()> -> _SINK_
<java.net.URI: java.net.URL toURL()> -> _SINK_
<java.net.Inet6Address: java.lang.String toString()> -> _SINK_
<java.net.HttpCookie: long getMaxAge()> -> _SINK_
<java.net.Socket: void shutdownInput()> -> _SINK_
<java.net.URLConnection: void <init>(java.net.URL)> -> _SINK_
<java.io.FileOutputStream: java.nio.channels.FileChannel getChannel()> -> _SINK_
<java.io.Console: java.lang.String readLine(java.lang.String,java.lang.Object[])> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void receive(java.net.DatagramPacket)> -> _SINK_
<java.net.Inet4Address: boolean isLinkLocalAddress()> -> _SINK_
<java.io.File: boolean renameTo(java.io.File)> -> _SINK_
<java.io.InvalidClassException: void <init>(java.lang.String)> -> _SINK_
<java.io.ObjectInputStream: double readDouble()> -> _SINK_
<java.net.URLConnection: long getLastModified()> -> _SINK_
<java.net.URLConnection: java.lang.String toString()> -> _SINK_
<java.nio.SocketChannelImpl: void implCloseSelectableChannel()> -> _SINK_
<java.io.DataInputStream: void readFully(byte[],int,int)> -> _SINK_
<java.nio.MappedByteBuffer: java.nio.MappedByteBuffer load()> -> _SINK_
<java.net.NetworkInterface: java.util.List getInterfaceAddresses()> -> _SINK_
<java.io.File: boolean equals(java.lang.Object)> -> _SINK_
<java.nio.charset.CoderResult: boolean isMalformed()> -> _SINK_
<java.net.Socket: void <init>(java.net.InetAddress,int)> -> _SINK_
<java.net.HttpCookie: void setCommentURL(java.lang.String)> -> _SINK_
<java.net.HttpCookie: void setVersion(int)> -> _SINK_
<java.io.Writer: java.io.Writer append(char)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.FilterReader: long skip(long)> -> _SINK_
<java.io.BufferedInputStream: long skip(long)> -> _SINK_
<java.net.NetworkInterface: boolean isLoopback()> -> _SINK_
<java.net.DatagramSocket: void <init>(java.net.SocketAddress)> -> _SINK_
<java.io.PushbackInputStream: void unread(int)> -> _SINK_
<java.io.PrintWriter: void write(java.lang.String)> -> _SINK_
<java.net.URLConnection: java.io.InputStream getInputStream()> -> _SINK_
<java.io.BufferedWriter: void write(char[],int,int)> -> _SINK_
<java.io.FilterInputStream: int available()> -> _SINK_
<java.net.Socket: void <init>(java.net.InetAddress,int,boolean)> -> _SINK_
<java.nio.file.DirectoryIteratorException: java.io.IOException getCause()> -> _SINK_
<java.net.URLConnection: java.lang.String guessContentTypeFromStream(java.io.InputStream)> -> _SINK_
<java.io.RandomAccessFile: int read()> -> _SINK_
<java.net.URLConnection: int getConnectTimeout()> -> _SINK_
<java.net.URLConnection: java.lang.Object getContent(java.lang.Class[])> -> _SINK_
<java.net.Proxy: java.net.Proxy$Type type()> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer append(char)> -> _SINK_
<java.net.NetworkInterface: int getMTU()> -> _SINK_
<java.net.URLConnection: void setConnectTimeout(int)> -> _SINK_
<java.nio.channels.Channels: java.io.Reader newReader(java.nio.channels.ReadableByteChannel,java.lang.String)> -> _SINK_
<java.io.File: java.nio.file.Path toPath()> -> _SINK_
<java.net.HttpCookie: void setMaxAge(long)> -> _SINK_
<java.io.FileOutputStream: void <init>(java.io.FileDescriptor)> -> _SINK_
<java.net.SocketAddress: void <init>()> -> _SINK_
<java.net.ServerSocket: void implAccept(java.net.Socket)> -> _SINK_
<javax.net.DefaultSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SINK_
<java.nio.ByteBuffer: java.lang.String toString()> -> _SINK_
<java.nio.ReadOnlyBufferException: void <init>()> -> _SINK_
<java.net.MulticastSocket: void <init>(java.net.SocketAddress)> -> _SINK_
<java.io.FileDescriptor: void sync()> -> _SINK_
<java.io.Console: java.io.Console makeConsole()> -> _SINK_
<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)> -> _SINK_
<java.io.ObjectInputStream: int available()> -> _SINK_
<java.net.Inet4Address: byte[] getAddress()> -> _SINK_
<java.net.Socket: void <init>(java.lang.String,int,boolean)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream format(java.lang.String,java.lang.Object[])> -> _SINK_
<java.io.BufferedReader: int read(char[],int,int)> -> _SINK_
<java.io.RandomAccessFile: java.nio.channels.FileChannel getChannel()> -> _SINK_
<java.io.RandomAccessFile: long length()> -> _SINK_
<java.io.StringWriter: java.lang.StringBuffer getBuffer()> -> _SINK_
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.File: java.lang.String toString()> -> _SINK_
<java.net.InetSocketAddress: java.net.InetAddress getAddress()> -> _SINK_
<java.io.StringWriter: void write(int)> -> _SINK_
<java.net.NetworkInterface: boolean isUp()> -> _SINK_
<java.io.PipedInputStream: void close()> -> _SINK_
<java.net.CookieStoreImpl: boolean remove(java.net.URI,java.net.HttpCookie)> -> _SINK_
<java.io.PrintWriter: void print(char)> -> _SINK_
<java.net.HttpCookie: int getVersion()> -> _SINK_
<java.nio.file.Files: java.util.stream.Stream lines(java.nio.file.Path,java.nio.charset.Charset)> -> _SINK_
<java.io.RandomAccessFile: short readShort()> -> _SINK_
<java.io.StringWriter: java.io.StringWriter append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.PrintStream: void print(int)> -> _SINK_
<java.net.Proxy: java.lang.String toString()> -> _SINK_
<java.net.Proxy: void <init>(java.net.Proxy$Type,java.net.SocketAddress)> -> _SINK_
<java.io.ObjectInputStream: java.lang.Class resolveProxyClass(java.lang.String[])> -> _SINK_
<java.io.PushbackReader: void close()> -> _SINK_
<java.io.ObjectInputStream: char readChar()> -> _SINK_
<java.net.InetAddress: java.lang.String getHostName()> -> _SINK_
<java.net.Socket: java.lang.String toString()> -> _SINK_
<java.io.File: java.lang.String[] list()> -> _SINK_
<java.io.OutputStreamWriter: void close()> -> _SINK_
<java.nio.channels.CancelledKeyException: void <init>()> -> _SINK_
<java.net.ServerSocket: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<java.net.URI: void <init>(java.lang.String)> -> _SINK_
<java.net.HttpURLConnection: void <init>(java.net.URL)> -> _SINK_
<java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path,java.nio.file.OpenOption[])> -> _SINK_
<java.net.ServerSocket: java.net.Socket accept()> -> _SINK_
<java.net.ServerSocket: boolean isClosed()> -> _SINK_
<java.io.PushbackInputStream: int read()> -> _SINK_
<java.net.Proxy$Type: void <init>(java.lang.String,int)> -> _SINK_
<java.nio.file.Paths: java.nio.file.Path get(java.net.URI)> -> _SINK_
<java.io.PrintWriter: void println(long)> -> _SINK_
<java.io.InputStreamReader: void close()> -> _SINK_
<java.io.ObjectInputStream: boolean readBoolean()> -> _SINK_
<java.io.FileInputStream: int available()> -> _SINK_
<java.io.PrintStream: void print(long)> -> _SINK_
<java.io.InputStream: void <init>()> -> _SINK_
<java.io.ObjectInputStream: float readFloat()> -> _SINK_
<java.nio.MappedByteBuffer: boolean isLoaded()> -> _SINK_
<java.net.ProxySelector: void setDefault(java.net.ProxySelector)> -> _SINK_
<java.net.NetworkInterface: boolean isPointToPoint()> -> _SINK_
<java.net.Socket: int getTrafficClass()> -> _SINK_
<java.io.FilterReader: boolean markSupported()> -> _SINK_
<java.nio.DatagramChannelImpl: void implCloseSelectableChannel()> -> _SINK_
<java.io.DataInputStream: boolean readBoolean()> -> _SINK_
<java.io.File: java.lang.String getPath()> -> _SINK_
<java.net.InetAddress: boolean isReachable(java.net.InetAddress,java.net.InetAddress,int)> -> _SINK_
<java.nio.LongBuffer: int hashCode()> -> _SINK_
<java.io.CharArrayWriter: void close()> -> _SINK_
<java.net.DatagramSocket: void <init>()> -> _SINK_
<java.net.DatagramPacket: java.net.InetAddress getAddress()> -> _SINK_
<java.io.DataInputStream: int readUnsignedShort()> -> _SINK_
<java.io.PushbackInputStream: void unread(byte[],int,int)> -> _SINK_
<java.net.Proxy: java.net.SocketAddress address()> -> _SINK_
<java.net.InetAddress: java.net.InetAddress disallowDeprecatedFormats(java.lang.String,java.net.InetAddress)> -> _SINK_
<java.net.URLConnection: java.util.Map getHeaderFields()> -> _SINK_
<java.net.URISyntaxException: java.lang.String getMessage()> -> _SINK_
<java.io.File: java.lang.String getParent()> -> _SINK_
<java.io.BufferedReader: java.lang.String readLine()> -> _SINK_
<java.io.PipedReader: void <init>(java.io.PipedWriter)> -> _SINK_
<java.io.ByteArrayOutputStream: int size()> -> _SINK_
<java.net.URLConnection: java.lang.Object getContent()> -> _SINK_
<java.io.PrintWriter: void print(double)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.nio.file.Files: boolean isDirectory(java.nio.file.Path,java.nio.file.LinkOption[])> -> _SINK_
<javax.net.DefaultServerSocketFactory: java.net.ServerSocket createServerSocket(int,int,java.net.InetAddress)> -> _SINK_
<java.net.ServerSocket: void readBackBindState()> -> _SINK_
<java.net.URL: java.lang.Object getContent()> -> _SINK_
<java.io.PrintStream: void print(char[])> -> _SINK_
<java.net.URI: void parseURI(java.lang.String,boolean)> -> _SINK_
<java.net.ServerSocket: java.lang.String toString()> -> _SINK_
<java.io.ObjectInputStream: short readShort()> -> _SINK_
<java.io.StringWriter: void <init>()> -> _SINK_
<java.net.NetworkInterface: java.lang.String toString()> -> _SINK_
<java.nio.channels.Selector: java.nio.channels.Selector open()> -> _SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)> -> _SINK_
<java.net.ConnectException: void <init>()> -> _SINK_
<java.net.InterfaceAddress: boolean equals(java.lang.Object)> -> _SINK_
<java.nio.file.FileSystemException: java.lang.String getMessage()> -> _SINK_
<java.io.ObjectOutputStream: void writeByte(int)> -> _SINK_
<java.io.File: void deleteOnExit()> -> _SINK_
<java.io.PrintWriter: void println(boolean)> -> _SINK_
<java.io.Reader: void reset()> -> _SINK_
<java.io.FilterReader: boolean ready()> -> _SINK_
<java.io.File: boolean doChmod(int,boolean)> -> _SINK_
<java.io.DataInputStream: int read(byte[])> -> _SINK_
<java.nio.SocketChannelImpl: int read(java.nio.ByteBuffer)> -> _SINK_
<java.net.URL: java.lang.String getQuery()> -> _SINK_
<java.nio.file.attribute.FileTime: java.nio.file.attribute.FileTime fromMillis(long)> -> _SINK_
<java.io.InputStreamReader: boolean ready()> -> _SINK_
<java.io.FileOutputStream: void close()> -> _SINK_
<java.nio.DatagramChannelImpl: java.nio.channels.DatagramChannel disconnect()> -> _SINK_
<java.net.HttpCookie: java.lang.Object clone()> -> _SINK_
<java.nio.IoVec: int doTransfer(java.io.FileDescriptor)> -> _SINK_
<java.io.CharArrayWriter: java.io.CharArrayWriter append(char)> -> _SINK_
<java.nio.DatagramChannelImpl: java.nio.channels.DatagramChannel connect(java.net.SocketAddress)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[])> -> _SINK_
<java.io.File: boolean mkdirs(boolean)> -> _SINK_
<java.net.HttpCookie: java.lang.String getName()> -> _SINK_
<java.net.CacheResponse: void <init>()> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<java.net.URL: void setURLStreamHandlerFactory(java.net.URLStreamHandlerFactory)> -> _SINK_
<java.io.FilterInputStream: int read(byte[],int,int)> -> _SINK_
<java.nio.file.Files: java.nio.file.Path createFile(java.nio.file.Path,java.nio.file.attribute.FileAttribute[])> -> _SINK_
<java.nio.ServerSocketChannelImpl: void implConfigureBlocking(boolean)> -> _SINK_
<java.net.URLClassLoader: void close()> -> _SINK_
<java.net.Inet4Address: boolean isAnyLocalAddress()> -> _SINK_
<java.io.RandomAccessFile: void writeDouble(double)> -> _SINK_
<java.nio.DatagramChannelImpl: java.net.SocketAddress receiveImpl(java.nio.ByteBuffer,boolean)> -> _SINK_
<java.net.Socket: void sendUrgentData(int)> -> _SINK_
<java.io.File: void <init>(java.net.URI)> -> _SINK_
<java.nio.DatagramChannelImpl: int readImpl(java.nio.ByteBuffer)> -> _SINK_
<java.net.Proxy$Type: java.net.Proxy$Type[] $values()> -> _SINK_
<java.net.InterfaceAddress: java.lang.String toString()> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void flush()> -> _SINK_
<java.io.ObjectInputStream: int readInt()> -> _SINK_
<java.net.URI: java.lang.String toString()> -> _SINK_
<java.io.FilterOutputStream: void write(int)> -> _SINK_
<java.net.URI: boolean isValidHost(boolean,java.lang.String)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.net.CookieManager: java.util.Map get(java.net.URI,java.util.Map)> -> _SINK_
<java.io.PrintStream: void write(int)> -> _SINK_
<java.net.Socket: boolean isOutputShutdown()> -> _SINK_
<java.io.OutputStreamWriter: void write(int)> -> _SINK_
<java.io.CharArrayReader: boolean ready()> -> _SINK_
<java.io.File: java.lang.String getCanonicalPath()> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<java.net.DatagramSocket: java.net.InetAddress getLocalAddress()> -> _SINK_
<java.nio.file.Files: java.nio.file.Path setLastModifiedTime(java.nio.file.Path,java.nio.file.attribute.FileTime)> -> _SINK_
<java.io.DataInputStream: long readLong()> -> _SINK_
<java.net.URLClassLoader$URLFileHandler: java.net.URL findResource(java.lang.String)> -> _SINK_
<java.net.HttpCookie: java.lang.String getDomain()> -> _SINK_
<java.nio.FloatBuffer: java.nio.FloatBuffer wrap(float[])> -> _SINK_
<java.net.HttpCookie: void setDiscard(boolean)> -> _SINK_
<java.net.MalformedURLException: void <init>(java.lang.String)> -> _SINK_
<java.net.URI: java.lang.String getAuthority()> -> _SINK_
<java.io.InputStream: int read(byte[],int,int)> -> _SINK_
<java.io.RandomAccessFile: void readFully(byte[])> -> _SINK_
<java.net.InterfaceAddress: short getNetworkPrefixLength()> -> _SINK_
<java.io.DataOutputStream: void writeLong(long)> -> _SINK_
<java.nio.FloatBuffer: java.nio.FloatBuffer allocate(int)> -> _SINK_
<java.net.CookieManager: void put(java.net.URI,java.util.Map)> -> _SINK_
<java.io.OutputStream: void <init>()> -> _SINK_
<java.net.HttpURLConnection: boolean getInstanceFollowRedirects()> -> _SINK_
<java.net.URLConnection: void setAllowUserInteraction(boolean)> -> _SINK_
<java.io.PrintWriter: void write(char[])> -> _SINK_
<java.nio.DoubleBuffer: boolean equals(java.lang.Object)> -> _SINK_
<java.io.IOException: void <init>(java.lang.String,java.lang.Throwable)> -> _SINK_
<java.nio.SocketChannelImpl: boolean finishConnect()> -> _SINK_
<java.io.File: boolean doAccess(int)> -> _SINK_
<java.net.NetworkInterface: java.net.NetworkInterface getByNameInternal(java.lang.String,java.lang.String[])> -> _SINK_
<java.io.BufferedReader: int read()> -> _SINK_
<java.io.PipedReader: int read()> -> _SINK_
<java.net.HttpCookie: java.lang.String getValue()> -> _SINK_
<java.io.StringWriter: void flush()> -> _SINK_
<java.net.Socket: void close()> -> _SINK_
<java.io.RandomAccessFile: void write(byte[])> -> _SINK_
<java.io.PushbackInputStream: void reset()> -> _SINK_
<java.io.RandomAccessFile: int readUnsignedShort()> -> _SINK_
<java.net.Socket: void <init>(java.lang.String,int,java.net.InetAddress,int)> -> _SINK_
<java.io.File: java.lang.String getAbsolutePath()> -> _SINK_
<java.io.PushbackReader: void unread(int)> -> _SINK_
<java.net.Socket: void <init>()> -> _SINK_
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)> -> _SINK_
<java.net.SocketTimeoutException: void <init>()> -> _SINK_
<java.sql.Timestamp: void <init>(int,int,int,int,int,int,int)> -> _SINK_
<java.net.MulticastSocket: java.net.NetworkInterface getNetworkInterface()> -> _SINK_
<java.io.PipedReader: int read(char[],int,int)> -> _SINK_
<java.net.ContentHandler: void <init>()> -> _SINK_
<java.net.DatagramSocket: void connect(java.net.InetAddress,int)> -> _SINK_
<java.io.BufferedReader: boolean markSupported()> -> _SINK_
<java.nio.SelectorImpl: int select()> -> _SINK_
<java.io.RandomAccessFile: void readFully(byte[],int,int)> -> _SINK_
<java.sql.Date: void <init>(int,int,int)> -> _SINK_
<java.io.PipedInputStream: void <init>(int)> -> _SINK_
<java.io.StringReader: long skip(long)> -> _SINK_
<java.nio.channels.spi.AbstractInterruptibleChannel: void close()> -> _SINK_
<java.io.Console: java.io.Console printf(java.lang.String,java.lang.Object[])> -> _SINK_
<java.io.Closeable: void close()> -> _SINK_
<java.io.UncheckedIOException: java.io.IOException getCause()> -> _SINK_
<javax.net.DefaultServerSocketFactory: java.net.ServerSocket createServerSocket(int,int)> -> _SINK_
<java.nio.FileChannelImpl: int read(java.nio.ByteBuffer)> -> _SINK_
<java.net.Authenticator: java.net.Authenticator$RequestorType getRequestorType()> -> _SINK_
<java.io.ObjectStreamClass: java.io.ObjectStreamClass lookup(java.lang.Class)> -> _SINK_
<java.io.File: long length()> -> _SINK_
<java.net.Socket: int getPort()> -> _SINK_
<java.nio.file.Files: boolean isRegularFile(java.nio.file.Path,java.nio.file.LinkOption[])> -> _SINK_
<java.net.SocketPermission: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.io.File: boolean setExecutable(boolean,boolean)> -> _SINK_
<java.io.PrintWriter: void write(int)> -> _SINK_
<java.net.HttpCookie: java.lang.String getPortlist()> -> _SINK_
<java.io.DataOutputStream: int size()> -> _SINK_
<java.io.PushbackReader: boolean markSupported()> -> _SINK_
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress,int)> -> _SINK_
<java.io.ObjectOutputStream: void reset()> -> _SINK_
<java.io.RandomAccessFile: int readInt()> -> _SINK_
<java.io.ByteArrayInputStream: int available()> -> _SINK_
<java.nio.SelectorImpl: void <init>(java.nio.channels.spi.SelectorProvider)> -> _SINK_
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])> -> _SINK_
<java.nio.FileChannelImpl: java.nio.channels.FileLock basicLock(long,long,boolean,boolean)> -> _SINK_
<java.nio.ShortBuffer: java.nio.ShortBuffer allocate(int)> -> _SINK_
<java.net.URLConnection: long getIfModifiedSince()> -> _SINK_
<java.net.Socket: void setSoTimeout(int)> -> _SINK_
<java.net.UnknownHostException: void <init>(java.lang.String)> -> _SINK_
<java.io.ObjectInputStream: void close()> -> _SINK_
<java.io.DataInputStream: java.lang.String readUTF(java.io.DataInput)> -> _SINK_
<java.io.DataOutputStream: void write(int)> -> _SINK_
<java.net.Socket: int getSoTimeout()> -> _SINK_
<java.io.PrintStream: void print(java.lang.Object)> -> _SINK_
<java.net.HttpCookie: boolean domainMatches(java.lang.String,java.lang.String)> -> _SINK_
<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)> -> _SINK_
<java.net.URI: int compareTo(java.net.URI)> -> _SINK_
<java.io.UnsupportedEncodingException: void <init>(java.lang.String)> -> _SINK_
<java.nio.SocketChannelImpl$SocketAdapter: void connect(java.net.SocketAddress,int)> -> _SINK_
<java.io.FilterInputStream: void close()> -> _SINK_
<java.io.PipedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ObjectOutputStream: void writeLong(long)> -> _SINK_
<java.io.ObjectInputStream: long readLong()> -> _SINK_
<java.net.CookieManager: java.net.CookieStore getCookieStore()> -> _SINK_
<java.net.HttpCookie: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<java.io.BufferedInputStream: int read()> -> _SINK_
<java.net.URLConnection: java.lang.String getContentType()> -> _SINK_
<java.io.PrintWriter: void print(long)> -> _SINK_
<java.net.URLClassLoader: java.lang.Class findClass(java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<java.net.URI: int getPort()> -> _SINK_
<java.net.Inet4Address: int hashCode()> -> _SINK_
<java.net.CookieHandler: java.net.CookieHandler getDefault()> -> _SINK_
<java.net.NetworkInterface: java.lang.String getDisplayName()> -> _SINK_
<java.io.PrintWriter: void print(java.lang.String)> -> _SINK_
<java.net.Proxy$Type: void <clinit>()> -> _SINK_
<java.io.BufferedWriter: void write(int)> -> _SINK_
<java.io.StringReader: void close()> -> _SINK_
<java.nio.DoubleBuffer: java.lang.String toString()> -> _SINK_
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int)> -> _SINK_
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)> -> _SINK_
<java.io.StringWriter: void close()> -> _SINK_
<java.net.CookieHandler: void <init>()> -> _SINK_
<java.io.SequenceInputStream: int available()> -> _SINK_
<java.io.FileWriter: void <init>(java.io.File)> -> _SINK_
<java.net.HttpCookie: void setPath(java.lang.String)> -> _SINK_
<java.io.PrintWriter: java.io.PrintWriter printf(java.lang.String,java.lang.Object[])> -> _SINK_
<java.net.HttpCookie: void setDomain(java.lang.String)> -> _SINK_
<javax.net.ssl.SSLSocket: void <init>(java.net.InetAddress,int)> -> _SINK_
<java.io.RandomAccessFile: void writeFloat(float)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.net.URLConnection: boolean getUseCaches()> -> _SINK_
<java.io.FilterInputStream: void reset()> -> _SINK_
<javax.net.ssl.SSLSocket: void <init>(java.lang.String,int)> -> _SINK_
<java.nio.file.Files: java.nio.file.DirectoryStream newDirectoryStream(java.nio.file.Path)> -> _SINK_
<java.nio.ByteOrder: java.lang.String toString()> -> _SINK_
<java.io.PrintWriter: void print(int)> -> _SINK_
<java.net.URL: java.lang.String toString()> -> _SINK_
<java.nio.SocketChannelImpl: void implConfigureBlocking(boolean)> -> _SINK_
<java.io.ByteArrayInputStream: void reset()> -> _SINK_
<java.nio.ByteBuffer: int hashCode()> -> _SINK_
<java.io.Reader: boolean markSupported()> -> _SINK_
<java.net.URLConnection: void setReadTimeout(int)> -> _SINK_
<java.io.PushbackInputStream: void close()> -> _SINK_
<java.io.OutputStreamWriter: void flush()> -> _SINK_
<java.io.BufferedInputStream: void <init>(java.io.InputStream)> -> _SINK_
<java.io.RandomAccessFile: double readDouble()> -> _SINK_
<java.nio.ShortBuffer: boolean equals(java.lang.Object)> -> _SINK_
<java.net.URI: java.lang.String getRawSchemeSpecificPart()> -> _SINK_
<java.io.File: int compareTo(java.io.File)> -> _SINK_
<java.net.URLConnection: int getReadTimeout()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SINK_
<java.net.SocketTimeoutException: void <init>(java.lang.String)> -> _SINK_
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.net.Inet6Address: boolean isLoopbackAddress()> -> _SINK_
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)> -> _SINK_
<java.io.CharArrayReader: void close()> -> _SINK_
<java.io.CharArrayWriter: void <init>()> -> _SINK_
<java.nio.DatagramChannelImpl$DatagramSocketAdapter: void bind(java.net.SocketAddress)> -> _SINK_
<java.io.InputStream: void mark(int)> -> _SINK_
<java.net.URLClassLoader: java.net.URL[] getURLs()> -> _SINK_
<java.io.ObjectOutputStream: void writeDouble(double)> -> _SINK_
<java.io.PrintWriter: void <init>(java.io.File)> -> _SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<java.io.PrintWriter: void setError()> -> _SINK_
<java.net.Proxy$Type: java.net.Proxy$Type[] values()> -> _SINK_
<java.net.ServerSocket: int getLocalPort()> -> _SINK_
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)> -> _SINK_
<java.net.Authenticator$RequestorType: java.net.Authenticator$RequestorType[] $values()> -> _SINK_
<java.nio.file.attribute.FileTime: int hashCode()> -> _SINK_
<java.io.ByteArrayInputStream: int read()> -> _SINK_
<java.io.PrintWriter: void println()> -> _SINK_
<java.net.Socket: void setKeepAlive(boolean)> -> _SINK_
<java.net.InetSocketAddress: java.net.InetSocketAddress createUnresolved(java.lang.String,int)> -> _SINK_
<java.io.PrintStream: void println(double)> -> _SINK_
<java.net.URL: java.lang.String getUserInfo()> -> _SINK_
<java.io.RandomAccessFile: long getFilePointer()> -> _SINK_
<java.io.CharArrayReader: long skip(long)> -> _SINK_
<java.io.RandomAccessFile: float readFloat()> -> _SINK_
<java.io.StringReader: void reset()> -> _SINK_
<java.net.DatagramSocket: java.net.SocketAddress getLocalSocketAddress()> -> _SINK_
<javax.net.ssl.SSLServerSocket: void <init>(int,int,java.net.InetAddress)> -> _SINK_
<java.io.RandomAccessFile: int read(byte[],int,int)> -> _SINK_
<java.nio.CharBuffer: java.nio.CharBuffer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.RandomAccessFile: long readLong()> -> _SINK_
<java.io.PipedInputStream: int available()> -> _SINK_
<java.io.PrintStream: void print(float)> -> _SINK_
<java.io.ObjectOutputStream: void close()> -> _SINK_
<java.net.DatagramSocket: void setBroadcast(boolean)> -> _SINK_
<java.io.File: java.io.File getCanonicalFile()> -> _SINK_
<java.net.InetSocketAddress: boolean isUnresolved()> -> _SINK_
<java.net.ServerSocket: void bind(java.net.SocketAddress)> -> _SINK_
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)> -> _SINK_
<java.io.PrintStream: java.io.PrintStream printf(java.lang.String,java.lang.Object[])> -> _SINK_
<java.net.NetworkInterface: boolean isVirtual()> -> _SINK_
<java.io.ObjectOutputStream: void write(int)> -> _SINK_
<java.nio.DatagramChannelImpl: long read(java.nio.ByteBuffer[],int,int)> -> _SINK_
<java.io.PushbackInputStream: long skip(long)> -> _SINK_
<java.nio.DoubleBuffer: java.nio.DoubleBuffer allocate(int)> -> _SINK_
 -> _SINK_
<android.database.CursorWindow: long getLong(int,int)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void finalize()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedHelper(boolean,long)> -> _SINK_
<android.database.sqlite.SQLiteStatement: void execute()> -> _SINK_
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor,boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeRegisterLocalizedCollators(long,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLog(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void logOperationLocked(int,java.lang.String)> -> _SINK_
<android.database.AbstractCursor: void close()> -> _SINK_
<io.requery.android.database.CursorWindow: boolean setNumColumns(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void reopenReadWrite()> -> _SINK_
<android.net.UrlQuerySanitizer: void <init>()> -> _SINK_
<android.net.NetworkInfo$State: android.net.NetworkInfo$State[] values()> -> _SINK_
<android.net.http.SslError: int a()> -> _SINK_
<android.net.VpnService$Builder: void <init>(android.net.VpnService)> -> _SINK_
<android.database.AbstractCursor: boolean moveToNext()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: boolean equals(java.lang.Object)> -> _SINK_
<android.database.CursorWrapper: boolean moveToFirst()> -> _SINK_
<android.graphics.pdf.PdfDocument: void finalize()> -> _SINK_
<android.database.Observable: void <init>()> -> _SINK_
<android.net.wifi.WifiManager$MulticastLock: void release()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: io.requery.android.database.sqlite.SQLiteConnectionPool open(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)> -> _SINK_
<io.requery.android.database.CursorWindow: boolean allocRow()> -> _SINK_
<io.requery.android.database.CursorWindow: boolean putNull(int,int)> -> _SINK_
<android.database.MatrixCursor: int getCount()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void onCorruption()> -> _SINK_
<android.net.Uri$Builder: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteSession createSession()> -> _SINK_
<android.net.LocalServerSocket: android.net.LocalSocket accept()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: void cursorClosed()> -> _SINK_
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: byte[] getBlob(int)> -> _SINK_
<android.database.sqlite.SQLiteException: void <init>(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase$2: boolean accept(java.io.File)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void deactivate()> -> _SINK_
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: void entryRemoved(boolean,java.lang.String,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)> -> _SINK_
<io.requery.android.database.DefaultDatabaseErrorHandler: void onCorruption(io.requery.android.database.sqlite.SQLiteDatabase)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void getOutline(android.graphics.Outline)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void closeAvailableConnectionsAndLogExceptionsLocked()> -> _SINK_
<android.database.CursorJoiner$Result: android.database.CursorJoiner$Result[] $values()> -> _SINK_
<android.net.IpConfiguration: boolean equals(java.lang.Object)> -> _SINK_
<android.net.UrlQuerySanitizer: void <init>(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void setPageSize(long)> -> _SINK_
<android.net.TrafficStats: void tagDatagramSocket(java.net.DatagramSocket)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void <init>(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void dispose(boolean)> -> _SINK_
<android.database.ContentObserver: void onChange(boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setAutoCheckpointInterval()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void closeAvailableNonPrimaryConnectionsAndLogExceptionsLocked()> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void <init>()> -> _SINK_
<android.net.IpSecAlgorithm: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.TrafficStats: void setThreadStatsTag(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()> -> _SINK_
<android.net.http.AndroidHttpClient: void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest)> -> _SINK_
<android.net.IpSecManager$SecurityParameterIndex: java.lang.String toString()> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)> -> _SINK_
<android.database.AbstractCursor: android.database.CursorWindow getWindow()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: io.requery.android.database.sqlite.SQLiteConnection tryAcquirePrimaryConnectionLocked(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long getPageSize()> -> _SINK_
<android.graphics.Bitmap: int getAllocationByteCount()> -> _SINK_
<android.database.ContentObservable: void dispatchChange(boolean,android.net.Uri)> -> _SINK_
<android.database.CursorWindow: boolean putString(java.lang.String,int,int)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$SimCredential: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void <clinit>()> -> _SINK_
<android.database.AbstractWindowedCursor: short getShort(int)> -> _SINK_
<android.database.AbstractWindowedCursor: double getDouble(int)> -> _SINK_
<android.net.ProxyInfo: boolean equals(java.lang.Object)> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder encodedPath(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void close()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnly()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<android.graphics.BitmapFactory$Options: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void discardAcquiredConnectionsLocked()> -> _SINK_
<android.database.CursorWrapper: boolean isLast()> -> _SINK_
<android.database.CursorWindow: boolean isLong(int,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void enableLocalizedCollators()> -> _SINK_
<android.database.AbstractCursor: int getType(int)> -> _SINK_
<android.database.CursorWrapper: short getShort(int)> -> _SINK_
<android.net.wifi.WifiNetworkSpecifier: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void wakeConnectionWaitersLocked()> -> _SINK_
<android.net.VpnService$Builder: android.net.VpnService$Builder addAllowedApplication(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setWalModeFromConfiguration()> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)> -> _SINK_
<android.net.wifi.WifiNetworkSpecifier: int hashCode()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String trimSqlForDisplay(java.lang.String)> -> _SINK_
<android.net.MailTo: android.net.MailTo parse(java.lang.String)> -> _SINK_
<android.database.CursorJoiner: void remove()> -> _SINK_
<android.graphics.Bitmap: boolean hasMipMap()> -> _SINK_
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()> -> _SINK_
<android.database.CursorWindow: boolean allocRow()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void ensureFile(java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()> -> _SINK_
<android.database.AbstractCursor: void finalize()> -> _SINK_
<android.database.ContentObservable: void <init>()> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)> -> _SINK_
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void onConnectionLeaked()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()> -> _SINK_
<android.net.MacAddress: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.CursorWindow: void nativeDispose(long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int beginOperation(java.lang.String,java.lang.String,java.lang.Object[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)> -> _SINK_
<android.net.IpPrefix: boolean equals(java.lang.Object)> -> _SINK_
<android.net.NetworkRequest$Builder: android.net.NetworkRequest build()> -> _SINK_
<android.database.AbstractWindowedCursor: int getInt(int)> -> _SINK_
<android.net.wifi.WifiManager: boolean enableNetwork(int,boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<android.database.AbstractWindowedCursor: float getFloat(int)> -> _SINK_
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)> -> _SINK_
<android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)> -> _SINK_
<android.graphics.Bitmap: int getHeight()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()> -> _SINK_
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String,android.content.Context)> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)> -> _SINK_
<android.database.CursorWindow: short getShort(int,int)> -> _SINK_
<android.database.CursorWrapper: boolean moveToNext()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: java.lang.String getWALSyncMode()> -> _SINK_
<io.requery.android.database.AbstractCursor: android.os.Bundle respond(android.os.Bundle)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void <init>(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,int,boolean)> -> _SINK_
<android.graphics.Bitmap: int getWidth()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.lang.String toString()> -> _SINK_
<android.database.AbstractCursor: byte[] getBlob(int)> -> _SINK_
<android.net.Uri: int compareTo(java.lang.Object)> -> _SINK_
<android.database.SQLException: void <init>(java.lang.String)> -> _SINK_
<android.net.wifi.ScanResult: java.lang.String toString()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()> -> _SINK_
<android.net.LinkAddress: int hashCode()> -> _SINK_
<android.database.CursorWrapper: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SINK_
<android.net.http.a: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.net.wifi.ScanResult: void <clinit>()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void applyTheme(android.content.res.Resources$Theme)> -> _SINK_
<android.net.wifi.WifiNetworkSpecifier: java.lang.String toString()> -> _SINK_
<android.database.MatrixCursor: byte[] getBlob(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: void <init>(io.requery.android.database.sqlite.SQLiteConnection,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: java.lang.Object access$000(io.requery.android.database.sqlite.SQLiteConnectionPool)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultJournalMode()> -> _SINK_
<android.database.sqlite.SQLiteCursor: int getCount()> -> _SINK_
<io.requery.android.database.CursorWindow: byte[] getBlob(int,int)> -> _SINK_
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: int executeForCursorWindow(java.lang.String,java.lang.Object[],io.requery.android.database.CursorWindow,int,int,boolean,int,android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void failOperation(int,java.lang.Exception)> -> _SINK_
<android.net.VpnService$Builder: android.net.VpnService$Builder setSession(java.lang.String)> -> _SINK_
<android.net.IpSecTransform: void close()> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkInfo[] getAllNetworkInfo()> -> _SINK_
<android.database.CursorWrapper: void unregisterDataSetObserver(android.database.DataSetObserver)> -> _SINK_
<android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: boolean shouldYieldConnection(io.requery.android.database.sqlite.SQLiteConnection,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void checkIt(byte[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: int executeForChangedRowCount(java.lang.String,java.lang.Object[],int,android.support.v4.g.d)> -> _SINK_
<android.database.CursorWrapper: boolean isAfterLast()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: int cursorPickFillWindowStartPosition(int,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>()> -> _SINK_
<android.net.TrafficStats: long getMobileTxBytes()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean isInMemoryDatabase()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()> -> _SINK_
<android.net.ProxyInfo: int getPort()> -> _SINK_
<android.net.IpSecTransform: java.lang.String toString()> -> _SINK_
<android.database.MatrixCursor: boolean isNull(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void dump(android.util.Printer,boolean)> -> _SINK_
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()> -> _SINK_
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] $values()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection open(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,int,boolean)> -> _SINK_
<android.database.CursorJoiner: void <init>(android.database.Cursor,java.lang.String[],android.database.Cursor,java.lang.String[])> -> _SINK_
<android.net.Network: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void prepare(java.lang.String,io.requery.android.database.sqlite.SQLiteStatementInfo)> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()> -> _SINK_
<android.graphics.Bitmap: void recycle()> -> _SINK_
<android.database.CursorWindow: boolean putLong(long,int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: int executeForChangedRowCount(java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void throwIfClosedLocked()> -> _SINK_
<android.net.wifi.WifiManager$MulticastLock: void acquire()> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void access$200(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)> -> _SINK_
<android.net.Credentials: int getPid()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: long nativeExecuteForLastInsertedRowId(long,long)> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)> -> _SINK_
<android.database.MergeCursor: void registerDataSetObserver(android.database.DataSetObserver)> -> _SINK_
<android.graphics.Bitmap: byte[] getNinePatchChunk()> -> _SINK_
<android.database.CursorWrapper: int getCount()> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile build()> -> _SINK_
<android.net.ConnectivityManager: boolean isActiveNetworkMetered()> -> _SINK_
<android.net.MacAddress: java.lang.String toString()> -> _SINK_
<android.net.http.a: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely(long)> -> _SINK_
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)> -> _SINK_
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)> -> _SINK_
<android.database.AbstractCursor: void registerDataSetObserver(android.database.DataSetObserver)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: void onConfigure(io.requery.android.database.sqlite.SQLiteDatabase)> -> _SINK_
<android.database.sqlite.SQLiteStatement: java.lang.String toString()> -> _SINK_
<android.net.TrafficStats: long getMobileRxBytes()> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeBindDouble(long,long,int,double)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.os.ParcelFileDescriptor blobFileDescriptorForQuery(java.lang.String,java.lang.String[])> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool$1: void <init>(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long queryNumEntries(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.PasspointConfiguration: int hashCode()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void beginTransaction(int,android.database.sqlite.SQLiteTransactionListener,int,android.support.v4.g.d)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean enableWriteAheadLogging()> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int,android.graphics.BitmapFactory$Options)> -> _SINK_
<android.net.Network: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$Operation: void <init>(io.requery.android.database.sqlite.SQLiteConnection$1)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$Operation: void describe(java.lang.StringBuilder,boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: void onOpen(io.requery.android.database.sqlite.SQLiteDatabase)> -> _SINK_
<android.net.sip.SipProfile: java.lang.String getUriString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: int executeSql(java.lang.String,java.lang.Object[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: int getThreadDefaultConnectionFlags(boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCustomFunction: void <init>(java.lang.String,int,io.requery.android.database.sqlite.SQLiteDatabase$CustomFunction)> -> _SINK_
<android.database.CursorWrapper: float getFloat(int)> -> _SINK_
<android.database.MatrixCursor: float getFloat(int)> -> _SINK_
<android.database.AbstractCursor: void unregisterContentObserver(android.database.ContentObserver)> -> _SINK_
<android.database.CursorWindow: boolean putBlob(byte[],int,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)> -> _SINK_
<android.database.AbstractWindowedCursor: boolean isNull(int)> -> _SINK_
<android.net.LinkAddress: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: void <init>()> -> _SINK_
<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)> -> _SINK_
<android.database.CursorWrapper: void unregisterContentObserver(android.database.ContentObserver)> -> _SINK_
<android.net.http.a: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.net.LocalSocketAddress$Namespace: android.net.LocalSocketAddress$Namespace[] $values()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void updateParametersFrom(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: byte[] access$500()> -> _SINK_
<android.database.CursorJoiner$Result: void <clinit>()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<android.net.LocalSocket: boolean isBound()> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: boolean isHeld()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeBindLong(long,long,int,long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession$Transaction: void <init>(io.requery.android.database.sqlite.SQLiteSession$1)> -> _SINK_
<android.net.LinkProperties: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.MergeCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$UserCredential: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.CursorWindow: void freeLastRow()> -> _SINK_
<android.net.StaticIpConfiguration: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void openInner()> -> _SINK_
<android.net.NetworkInfo$DetailedState: void <init>(java.lang.String,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase$2: void <init>(java.lang.String)> -> _SINK_
<android.database.MergeCursor: long getLong(int)> -> _SINK_
<android.database.CursorWindow: boolean setNumColumns(int)> -> _SINK_
<android.database.AbstractCursor: void unregisterDataSetObserver(android.database.DataSetObserver)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: boolean recycleConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)> -> _SINK_
<io.requery.android.database.DefaultDatabaseErrorHandler: void <init>()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: long executeForLastInsertedRowId(java.lang.String,java.lang.Object[],int,android.support.v4.g.d)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int getVersion()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteSession getThreadSession()> -> _SINK_
<android.database.CursorWindow: void freeLastRow()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()> -> _SINK_
<android.database.MatrixCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> -> _SINK_
<android.database.CursorWrapper: android.os.Bundle getExtras()> -> _SINK_
<android.database.AbstractCursor: void registerContentObserver(android.database.ContentObserver)> -> _SINK_
<android.database.CursorWrapper: boolean moveToPosition(int)> -> _SINK_
<android.net.NetworkRequest$Builder: void <init>()> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()> -> _SINK_
<android.graphics.pdf.PdfDocument: void finishPage(android.graphics.pdf.PdfDocument$Page)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: io.requery.android.database.sqlite.SQLiteConnection waitForConnection(java.lang.String,int,android.support.v4.g.d)> -> _SINK_
<android.net.TrafficStats: void incrementOperationCount(int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setAutoMirrored(boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void dump(android.util.Printer,boolean)> -> _SINK_
<io.requery.android.database.CursorWindow: void onAllReferencesReleased()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void dispose(boolean)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$SimCredential: java.lang.String toString()> -> _SINK_
<android.net.IpSecAlgorithm: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void finalize()> -> _SINK_
<android.net.TrafficStats: void untagSocket(java.net.Socket)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: boolean isPrimaryConnection()> -> _SINK_
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()> -> _SINK_
<android.net.TrafficStats: long getUidRxBytes(int)> -> _SINK_
<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteClosable: void acquireReference()> -> _SINK_
<android.graphics.BitmapRegionDecoder: int getHeight()> -> _SINK_
<android.database.CursorWrapper: boolean requery()> -> _SINK_
<android.net.NetworkInfo: java.lang.String getSubtypeName()> -> _SINK_
<android.net.IpSecManager$UdpEncapsulationSocket: void close()> -> _SINK_
<android.database.Observable: void registerObserver(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteClosable: void close()> -> _SINK_
<android.net.NetworkInfo: int getSubtype()> -> _SINK_
<android.net.SSLCertificateSocketFactory: void setHostname(java.net.Socket,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDebug: void <init>()> -> _SINK_
<android.database.DefaultDatabaseErrorHandler: void <init>()> -> _SINK_
<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatement: long executeInsert()> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.util.DisplayMetrics,int,int,android.graphics.Bitmap$Config)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void createGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)> -> _SINK_
<android.net.wifi.WifiManager: java.util.List getScanResults()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void <init>(io.requery.android.database.sqlite.SQLiteConnectionPool)> -> _SINK_
<android.database.CursorWindow: double getDouble(int,int)> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void onCancel()> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)> -> _SINK_
<android.net.TrafficStats: void untagDatagramSocket(java.net.DatagramSocket)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)> -> _SINK_
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] $values()> -> _SINK_
<io.requery.android.database.CursorWindow: void setStartPosition(int)> -> _SINK_
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void close()> -> _SINK_
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int)> -> _SINK_
<android.database.sqlite.SQLiteCursor: boolean onMove(int,int)> -> _SINK_
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setSyncMode(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter obtainConnectionWaiterLocked(java.lang.Thread,long,int,boolean,java.lang.String,int)> -> _SINK_
<android.database.sqlite.SQLiteCantOpenDatabaseException: void <init>(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteDatabase,android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)> -> _SINK_
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void execute(java.lang.String,java.lang.Object[],int,android.support.v4.g.d)> -> _SINK_
<android.database.sqlite.SQLiteCursor: boolean requery()> -> _SINK_
<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder addCapability(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement acquirePreparedStatement(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void endTransactionUnchecked(android.support.v4.g.d,boolean)> -> _SINK_
<android.net.LinkAddress: boolean equals(java.lang.Object)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.io.InputStream)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerDeferred(android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void setVersion(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(java.lang.String,int)> -> _SINK_
<android.graphics.pdf.PdfDocument$PageInfo$Builder: android.graphics.pdf.PdfDocument$PageInfo create()> -> _SINK_
<android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: void setWindow(io.requery.android.database.CursorWindow)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement obtainPreparedStatement(java.lang.String,long,int,int,boolean)> -> _SINK_
<android.net.wifi.WifiManager$MulticastLock: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: boolean hasNestedTransaction()> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: void setWindow(io.requery.android.database.CursorWindow)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void bindArguments(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement,java.lang.Object[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String toString()> -> _SINK_
<android.database.AbstractCursor: java.lang.String getColumnName(int)> -> _SINK_
<android.database.CursorWindow: void <clinit>()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)> -> _SINK_
<android.graphics.pdf.PdfDocument: void writeTo(java.io.OutputStream)> -> _SINK_
<android.net.Network: long getNetworkHandle()> -> _SINK_
<android.net.NetworkInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String executeForString(java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard$DefaultReporter: void report(java.lang.String,java.lang.Throwable)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void bind(int,java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void endTransaction()> -> _SINK_
<android.graphics.Bitmap$Config: void <init>(java.lang.String,int)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String stringForQuery(io.requery.android.database.sqlite.SQLiteStatement,java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)> -> _SINK_
<android.database.MergeCursor: boolean requery()> -> _SINK_
<android.database.CursorWindow: boolean isNull(int,int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.InetAddress,int,java.net.InetAddress,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void collectDbStatsUnsafe(java.util.ArrayList)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDebug: io.requery.android.database.sqlite.SQLiteDebug$PagerStats getDatabaseInfo()> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: android.net.wifi.p2p.WifiP2pManager$Channel initialize(android.content.Context,android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)> -> _SINK_
<android.net.http.a: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)> -> _SINK_
<io.requery.android.database.AbstractCursor: void registerDataSetObserver(android.database.DataSetObserver)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void checkIt(byte[])> -> _SINK_
<io.requery.android.database.CursorWindow: void nativeFreeLastRow(long)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setFilterBitmap(boolean)> -> _SINK_
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setPort(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<android.database.CursorWrapper: void <init>(android.database.Cursor)> -> _SINK_
<android.database.MergeCursor: void unregisterDataSetObserver(android.database.DataSetObserver)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: int hashCode()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase getDatabaseLocked(boolean)> -> _SINK_
<android.net.sip.SipManager: android.net.sip.SipManager newInstance(android.content.Context)> -> _SINK_
<android.net.UrlQuerySanitizer: void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer$ValueSanitizer)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getIntrinsicHeight()> -> _SINK_
<android.database.AbstractWindowedCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SINK_
<io.requery.android.database.AbstractCursor: void unregisterContentObserver(android.database.ContentObserver)> -> _SINK_
<android.database.AbstractCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SINK_
<android.database.CursorIndexOutOfBoundsException: void <init>(int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: int getWALConnectionPoolSize()> -> _SINK_
<android.database.sqlite.SQLiteClosable: void acquireReference()> -> _SINK_
<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.http.SslError: int getPrimaryError()> -> _SINK_
<io.requery.android.database.CursorWindow: boolean nativePutDouble(long,double,int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void setMaxConnectionPoolSizeLocked()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long getPageSize()> -> _SINK_
<android.database.CursorWindow: byte[] getBlob(int,int)> -> _SINK_
<io.requery.android.database.CursorWindow: boolean putDouble(double,int,int)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$CertificateCredential: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.sqlite.SQLiteException: void <init>()> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: void checkPosition()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: void <clinit>()> -> _SINK_
<android.net.NetworkCapabilities: int hashCode()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)> -> _SINK_
<android.database.AbstractWindowedCursor: java.lang.String getString(int)> -> _SINK_
<android.net.ConnectivityManager: void registerNetworkCallback(android.net.NetworkRequest,android.net.ConnectivityManager$NetworkCallback)> -> _SINK_
<android.graphics.Bitmap: void setHasMipMap(boolean)> -> _SINK_
<android.database.AbstractWindowedCursor: byte[] getBlob(int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> -> _SINK_
<android.net.DhcpInfo: java.lang.String toString()> -> _SINK_
<android.net.wifi.WifiConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()> -> _SINK_
<android.net.wifi.WifiManager: android.net.DhcpInfo getDhcpInfo()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void closeConnectionAndLogExceptionsLocked(io.requery.android.database.sqlite.SQLiteConnection)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()> -> _SINK_
<android.graphics.Bitmap: void setHasAlpha(boolean)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindNull(int)> -> _SINK_
<android.net.LocalSocket: void setReceiveBufferSize(int)> -> _SINK_
<android.database.CursorWrapper: boolean moveToLast()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: void close()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<android.database.AbstractWindowedCursor: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: int newOperationCookieLocked(int)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: io.requery.android.database.sqlite.SQLiteDebug$DbStats getMainDbStatsUnsafe(int,long,long)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setColorFilter(android.graphics.ColorFilter)> -> _SINK_
<android.net.VpnService$Builder: android.net.VpnService$Builder addAddress(java.lang.String,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteQuery: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<android.database.CursorWrapper: double getDouble(int)> -> _SINK_
<android.database.CursorWrapper: void registerContentObserver(android.database.ContentObserver)> -> _SINK_
<android.net.NetworkCapabilities: boolean hasTransport(int)> -> _SINK_
<android.database.AbstractCursor: boolean moveToPosition(int)> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder clearQuery()> -> _SINK_
<io.requery.android.database.AbstractCursor: android.net.Uri getNotificationUri()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()> -> _SINK_
<android.net.http.AndroidHttpClient: void <init>()> -> _SINK_
<android.net.UrlQuerySanitizer: void setAllowUnregisteredParamaters(boolean)> -> _SINK_
<android.database.MatrixCursor: int getInt(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String toString()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDebug: void nativeGetPagerStats(io.requery.android.database.sqlite.SQLiteDebug$PagerStats)> -> _SINK_
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState[] $values()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String stringForQuery(java.lang.String,java.lang.String[])> -> _SINK_
<io.requery.android.database.AbstractCursor: void close()> -> _SINK_
<android.graphics.pdf.PdfDocument: android.graphics.pdf.PdfDocument$Page startPage(android.graphics.pdf.PdfDocument$PageInfo)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void <init>(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.DatabaseErrorHandler)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDevice: boolean equals(java.lang.Object)> -> _SINK_
<android.database.DatabaseUtils: void bindObjectToProgram(android.database.sqlite.SQLiteProgram,int,java.lang.Object)> -> _SINK_
<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)> -> _SINK_
<android.database.CursorWindow: boolean isString(int,int)> -> _SINK_
<android.database.sqlite.SQLiteQuery: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void onAllReferencesReleased()> -> _SINK_
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.lang.String,boolean)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()> -> _SINK_
<android.graphics.Bitmap: boolean hasAlpha()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void finalize()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void collectDbStats(java.util.ArrayList)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int releaseMemory()> -> _SINK_
<android.graphics.Bitmap: int getByteCount()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.ColorFilter getColorFilter()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean isReadOnlyLocked()> -> _SINK_
<android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionSubQuery(java.lang.String,java.lang.String[],java.util.Set,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String canonicalizeSyncMode(java.lang.String)> -> _SINK_
<android.net.IpPrefix: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.VpnService: void <init>()> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabaseConfiguration createConfiguration(java.lang.String,int)> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void throwIfNoTransaction()> -> _SINK_
<android.net.ProxyInfo: java.lang.String toString()> -> _SINK_
<android.net.VpnService$Builder: android.os.ParcelFileDescriptor establish()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void throwIfStatementForbidden(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void recyclePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void setReferenceCounted(boolean)> -> _SINK_
<android.net.StaticIpConfiguration: int hashCode()> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiManager$MulticastLock: void setReferenceCounted(boolean)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: java.lang.String toString()> -> _SINK_
<android.graphics.Bitmap: boolean isRecycled()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatementInfo: void <init>()> -> _SINK_
<android.net.wifi.WifiManager: boolean reassociate()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: int getVersion()> -> _SINK_
<android.database.AbstractCursor: boolean isBeforeFirst()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)> -> _SINK_
<android.net.NetworkRequest: int hashCode()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void recycleConnectionWaiterLocked(io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)> -> _SINK_
<android.net.MacAddress: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard$DefaultReporter: void <init>()> -> _SINK_
<android.net.VpnService$Builder: android.net.VpnService$Builder addDnsServer(java.lang.String)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setServiceName(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()> -> _SINK_
<android.net.Uri: java.lang.String encode(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)> -> _SINK_
<android.net.NetworkRequest: java.lang.String toString()> -> _SINK_
<android.database.MatrixCursor: int getType(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: boolean executeSpecial(java.lang.String,java.lang.Object[],int,android.support.v4.g.d)> -> _SINK_
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config[] values()> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: boolean isNull(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long queryNumEntries(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()> -> _SINK_
<android.net.LocalSocket: void shutdownOutput()> -> _SINK_
<android.net.LinkAddress: java.lang.String toString()> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()> -> _SINK_
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()> -> _SINK_
<android.net.wifi.WifiManager$MulticastLock: boolean isHeld()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getDefaultCipherSuites()> -> _SINK_
<android.net.wifi.hotspot2.PasspointConfiguration: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void endTransaction(android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.support.v4.g.d)> -> _SINK_
<android.net.ConnectivityManager: void unregisterNetworkCallback(android.net.ConnectivityManager$NetworkCallback)> -> _SINK_
<android.database.AbstractCursor: android.os.Bundle getExtras()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: java.lang.String toString()> -> _SINK_
<android.net.IpConfiguration: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeBindString(long,long,int,java.lang.String)> -> _SINK_
<android.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)> -> _SINK_
<io.requery.android.database.CursorWindow: long getLong(int,int)> -> _SINK_
<android.database.StaleDataException: void <init>(java.lang.String)> -> _SINK_
<android.net.Proxy: int getPort(android.content.Context)> -> _SINK_
<android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)> -> _SINK_
<android.net.SocketKeepalive: void close()> -> _SINK_
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void logConnectionPoolBusyLocked(long,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: long executeForLong(java.lang.String,java.lang.Object[],int,android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.AbstractCursor: void registerContentObserver(android.database.ContentObserver)> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)> -> _SINK_
<android.net.UrlQuerySanitizer: void parseQuery(java.lang.String)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int)> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SINK_
<io.requery.android.database.CursorWindow: boolean putString(java.lang.String,int,int)> -> _SINK_
<android.database.CursorWrapper: int getColumnIndexOrThrow(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void releasePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void inflate(android.content.res.Resources,org.xmlpull.v1.XmlPullParser,android.util.AttributeSet,android.content.res.Resources$Theme)> -> _SINK_
<android.graphics.BitmapRegionDecoder: int getWidth()> -> _SINK_
<android.net.ProxyInfo: int hashCode()> -> _SINK_
<android.graphics.pdf.PdfDocument: void <init>()> -> _SINK_
<android.graphics.Bitmap: void prepareToDraw()> -> _SINK_
<io.requery.android.database.CursorWindow: byte[] nativeGetBlob(long,int,int)> -> _SINK_
<android.graphics.Bitmap: boolean isMutable()> -> _SINK_
<io.requery.android.database.CursorWindow: boolean nativeAllocRow(long)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$SimCredential: int hashCode()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)> -> _SINK_
<android.net.NetworkInfo: boolean isConnectedOrConnecting()> -> _SINK_
<android.database.CursorWindow: int getInt(int,int)> -> _SINK_
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat[] values()> -> _SINK_
<android.database.AbstractCursor: android.net.Uri getNotificationUri()> -> _SINK_
<io.requery.android.database.CursorWindow: long nativeCreate(java.lang.String,int)> -> _SINK_
<android.database.CursorJoiner: boolean hasNext()> -> _SINK_
<android.net.wifi.WifiManager: boolean startScan()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void endTransaction()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void attachCancellationSignal(android.support.v4.g.d)> -> _SINK_
<android.net.ProxyInfo: java.lang.String getHost()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement: void <init>(io.requery.android.database.sqlite.SQLiteConnection$1)> -> _SINK_
<android.database.CursorWindow: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.CursorWindow: boolean putLong(long,int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: long nativeExecuteForCursorWindow(long,long,long,int,int,boolean)> -> _SINK_
<android.net.LinkProperties: java.lang.String toString()> -> _SINK_
<android.database.DataSetObserver: void <init>()> -> _SINK_
<android.net.TrafficStats: long getTotalTxBytes()> -> _SINK_
<android.database.sqlite.SQLiteStatement: int executeUpdateDelete()> -> _SINK_
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$MulticastLock createMulticastLock(java.lang.String)> -> _SINK_
<android.database.AbstractCursor: void deactivate()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.util.ArrayList getDbStats()> -> _SINK_
<android.database.DatabaseUtils: java.lang.String concatenateWhere(java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase$1: java.lang.Object initialValue()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatement: long simpleQueryForLong()> -> _SINK_
<android.net.TrafficStats: int getThreadStatsTag()> -> _SINK_
<android.database.CursorWrapper: boolean isBeforeFirst()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: io.requery.android.database.sqlite.SQLiteConnection acquireConnection(java.lang.String,int,android.support.v4.g.d)> -> _SINK_
<android.net.wifi.WifiManager$AddNetworkResult: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: int getPriority(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: int getColumnIndex(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void setServiceType(java.lang.String)> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean isLast()> -> _SINK_
<android.net.Network: javax.net.SocketFactory getSocketFactory()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.DatabaseErrorHandler)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int,io.requery.android.database.DatabaseErrorHandler)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long queryNumEntries(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<android.net.LocalSocketAddress: void <init>(java.lang.String,android.net.LocalSocketAddress$Namespace)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteQueryBuilder: void <clinit>()> -> _SINK_
<io.requery.android.database.CursorWindow: int getInt(int,int)> -> _SINK_
<android.net.wifi.hotspot2.PasspointConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.http.SslError: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void onCorruption()> -> _SINK_
<android.net.NetworkInfo: boolean isRoaming()> -> _SINK_
<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean isAfterLast()> -> _SINK_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulLegal()> -> _SINK_
<android.net.wifi.WifiManager: boolean disableNetwork(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$Operation: java.lang.String access$600(io.requery.android.database.sqlite.SQLiteConnection$Operation)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: java.lang.String getDefaultSyncMode()> -> _SINK_
<android.net.Uri: int hashCode()> -> _SINK_
<io.requery.android.database.AbstractCursor: void deactivate()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDebug: void <clinit>()> -> _SINK_
<android.net.Proxy: int getDefaultPort()> -> _SINK_
<android.net.Uri$Builder: android.net.Uri build()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.net.IpSecTransform: boolean equals(java.lang.Object)> -> _SINK_
<android.database.AbstractCursor: void <init>()> -> _SINK_
<android.net.Network: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.sqlite.SQLiteClosable: void releaseReferenceFromContainer()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()> -> _SINK_
<android.net.Uri: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: io.requery.android.database.sqlite.SQLiteSession getSession()> -> _SINK_
<android.net.LocalSocketAddress$Namespace: void <init>(java.lang.String,int)> -> _SINK_
<android.net.wifi.SupplicantState: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.TrafficStats: long getUidTxBytes(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)> -> _SINK_
<android.database.CursorWindow: boolean putDouble(double,int,int)> -> _SINK_
<android.net.TrafficStats: void tagSocket(java.net.Socket)> -> _SINK_
<android.net.UrlQuerySanitizer: java.lang.String getValue(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: int getConnectionFlags()> -> _SINK_
<android.database.CursorWrapper: boolean moveToPrevious()> -> _SINK_
<android.net.wifi.WifiManager: int updateNetwork(android.net.wifi.WifiConfiguration)> -> _SINK_
<android.net.wifi.p2p.WifiP2pInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void <init>(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)> -> _SINK_
<android.net.LocalSocket: boolean isConnected()> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: void closeWindow()> -> _SINK_
<android.net.MailTo: boolean isMailTo(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction()> -> _SINK_
<android.database.AbstractCursor: boolean moveToFirst()> -> _SINK_
<android.database.DataSetObserver: void onChanged()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void beginTransaction()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void close()> -> _SINK_
<android.net.nsd.NsdManager: void registerService(android.net.nsd.NsdServiceInfo,int,android.net.nsd.NsdManager$RegistrationListener)> -> _SINK_
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)> -> _SINK_
<android.net.NetworkInfo: java.lang.String toString()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()> -> _SINK_
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()> -> _SINK_
<android.net.wifi.WifiInfo: java.lang.String toString()> -> _SINK_
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)> -> _SINK_
<android.net.NetworkInfo$State: void <init>(java.lang.String,int)> -> _SINK_
<android.net.wifi.ScanResult$InformationElement: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDebug: void dump(android.util.Printer,java.lang.String[])> -> _SINK_
<android.net.wifi.SoftApConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: double getDouble(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void markAcquiredConnectionsLocked(io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long replaceOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard: void <clinit>()> -> _SINK_
<android.net.http.a: org.apache.http.conn.ClientConnectionManager getConnectionManager()> -> _SINK_
<android.net.NetworkInfo: boolean isFailover()> -> _SINK_
<android.net.wifi.WifiManager: java.util.List getConfiguredNetworks()> -> _SINK_
<android.net.http.X509TrustManagerExtensions: java.util.List checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: void onDowngrade(io.requery.android.database.sqlite.SQLiteDatabase,int,int)> -> _SINK_
<android.net.wifi.WifiInfo: java.lang.String getSSID()> -> _SINK_
<android.database.CursorWrapper: void registerDataSetObserver(android.database.DataSetObserver)> -> _SINK_
<android.database.CursorWindow: float getFloat(int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeResetCancel(long,boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: int nativeExecuteForChangedRowCount(long,long)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)> -> _SINK_
<android.net.UrlQuerySanitizer: java.util.Set getParameterSet()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: boolean hasCodec()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)> -> _SINK_
<android.graphics.BitmapFactory$Options: void requestCancelDecode()> -> _SINK_
<android.database.CursorWindow: void onAllReferencesReleased()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void prepare(java.lang.String,int,android.support.v4.g.d,io.requery.android.database.sqlite.SQLiteStatementInfo)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeExecute(long,long)> -> _SINK_
<android.database.sqlite.SQLiteStatement: long executeInsert()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.database.MergeCursor: int getInt(int)> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void release()> -> _SINK_
<android.net.wifi.WifiManager: int calculateSignalLevel(int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase$1: void <init>(io.requery.android.database.sqlite.SQLiteDatabase)> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean isBeforeFirst()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: int nativeReleaseMemory()> -> _SINK_
<android.net.NetworkInfo: java.lang.String getTypeName()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setPageSize(long)> -> _SINK_
<android.net.NetworkInfo$State: android.net.NetworkInfo$State[] $values()> -> _SINK_
<io.requery.android.database.CursorWindow: void clear()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,android.graphics.Bitmap)> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long replace(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteQuery: java.lang.String toString()> -> _SINK_
<android.database.CursorWrapper: boolean move(int)> -> _SINK_
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUrlAndSpaceLegal()> -> _SINK_
<android.net.sip.SipManager: boolean isVoipSupported(android.content.Context)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: android.os.ParcelFileDescriptor executeForBlobFileDescriptor(java.lang.String,java.lang.Object[],int,android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.AbstractCursor: int getColumnIndex(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: int compareSignalLevel(int,int)> -> _SINK_
<io.requery.android.database.AbstractCursor: void onDeactivateOrClose()> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: java.lang.String getString(int)> -> _SINK_
<android.net.LinkProperties: java.util.List getDnsServers()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean isOpen()> -> _SINK_
<android.database.CursorWindow: void clear()> -> _SINK_
<android.database.AbstractCursor: android.os.Bundle respond(android.os.Bundle)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void dumpUnsafe(android.util.Printer,boolean)> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void bindAllArgsAsStrings(java.lang.String[])> -> _SINK_
<android.graphics.BitmapRegionDecoder: void recycle()> -> _SINK_
<android.net.IpPrefix: java.lang.String toString()> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(android.net.Network)> -> _SINK_
<android.net.MailTo: java.lang.String getCc()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<android.database.CursorWrapper: android.os.Bundle respond(android.os.Bundle)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void releaseConnection()> -> _SINK_
<android.net.http.a: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)> -> _SINK_
<android.net.IpSecManager$UdpEncapsulationSocket: java.lang.String toString()> -> _SINK_
<android.database.MergeCursor: float getFloat(int)> -> _SINK_
<io.requery.android.database.CursorWindow: void nativeClear(long)> -> _SINK_
<android.net.TrafficStats: long getUidRxPackets(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: boolean isSessionBlockingImportantConnectionWaitersLocked(boolean,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void beginTransactionNonExclusive()> -> _SINK_
<android.graphics.Bitmap: boolean isPremultiplied()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestGroupInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$GroupInfoListener)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: void fillWindow(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void clearBindings()> -> _SINK_
<android.net.MailTo: java.lang.String getSubject()> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: void acquire()> -> _SINK_
<io.requery.android.database.CursorWindow: double getDouble(int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase create(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<android.database.MatrixCursor$RowBuilder: android.database.MatrixCursor$RowBuilder add(java.lang.Object)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources,java.lang.String)> -> _SINK_
<android.database.AbstractCursor: boolean requery()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: boolean endOperationDeferLogLocked(int)> -> _SINK_
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)> -> _SINK_
<android.graphics.BitmapFactory: void <init>()> -> _SINK_
<android.database.DatabaseUtils: java.lang.String dumpCursorToString(android.database.Cursor)> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean moveToPosition(int)> -> _SINK_
<android.net.NetworkInfo: java.lang.String getReason()> -> _SINK_
<android.net.wifi.WifiInfo: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.CursorWindow: float getFloat(int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: int nativeGetColumnCount(long,long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setJournalSizeLimit()> -> _SINK_
<android.net.TrafficStats: void incrementOperationCount(int,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: java.lang.Object[] getBindArgs()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: java.lang.String toString()> -> _SINK_
<android.database.CursorWindow: java.lang.String toString()> -> _SINK_
<android.database.sqlite.SQLiteCursor: void <init>(android.database.sqlite.SQLiteCursorDriver,java.lang.String,android.database.sqlite.SQLiteQuery)> -> _SINK_
<android.graphics.Bitmap: void setPremultiplied(boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: void cursorDeactivated()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable mutate()> -> _SINK_
<android.net.LocalSocket: java.io.OutputStream getOutputStream()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean inTransaction()> -> _SINK_
<io.requery.android.database.CursorWindowAllocationException: void <init>(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: int getType(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: int releaseMemory()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.net.LocalServerSocket: void <init>(java.lang.String)> -> _SINK_
<io.requery.android.database.CursorWindow: java.lang.String getName()> -> _SINK_
<android.net.wifi.WifiEnterpriseConfig: java.lang.String toString()> -> _SINK_
<android.database.DatabaseUtils: java.lang.String stringForQuery(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDebug: boolean shouldLogSlowQuery(long)> -> _SINK_
<android.net.LocalSocket: java.io.InputStream getInputStream()> -> _SINK_
<android.net.UrlQuerySanitizer: java.util.List getParameterList()> -> _SINK_
<io.requery.android.database.CursorWindow: int getNumRows()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: io.requery.android.database.sqlite.SQLiteSession$Transaction obtainTransaction(int,android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$CertificateCredential: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDebug$DbStats: void <init>(java.lang.String,long,long,int,int,int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)> -> _SINK_
<android.net.NetworkInfo: int getType()> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$UserCredential: int hashCode()> -> _SINK_
<android.database.AbstractWindowedCursor: void setWindow(android.database.CursorWindow)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void execute(java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<android.net.TrafficStats: void clearThreadStatsTag()> -> _SINK_
<android.net.MailTo: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: boolean requery()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void enableLocalizedCollators()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void addCustomFunction(java.lang.String,int,io.requery.android.database.sqlite.SQLiteDatabase$CustomFunction)> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard: void <init>()> -> _SINK_
<android.net.wifi.WifiInfo: int getIpAddress()> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: java.lang.String toString()> -> _SINK_
<android.database.AbstractCursor: void fillWindow(int,android.database.CursorWindow)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setJournalMode(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransactionDeferred()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setDither(boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: int getJournalSizeLimit()> -> _SINK_
<android.database.CursorWrapper: boolean isFirst()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void bindLong(int,long)> -> _SINK_
<android.net.wifi.p2p.WifiP2pInfo: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void finishAcquireConnectionLocked(io.requery.android.database.sqlite.SQLiteConnection,int)> -> _SINK_
<android.database.MatrixCursor: void <init>(java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatementType: int getSqlStatementType(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void requestConnectionInfo(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener)> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard: void open(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: boolean nativeIsReadOnly(long,long)> -> _SINK_
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void open()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: void cursorRequeried(android.database.Cursor)> -> _SINK_
<android.database.sqlite.SQLiteClosable: void <init>()> -> _SINK_
<android.database.AbstractWindowedCursor: long getLong(int)> -> _SINK_
<android.net.ConnectivityManager: android.net.LinkProperties getLinkProperties(android.net.Network)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor simpleQueryForBlobFileDescriptor()> -> _SINK_
<android.net.http.SslCertificate: java.lang.String toString()> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$UserCredential: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.AbstractCursor$SelfContentObserver: void onChange(boolean)> -> _SINK_
<android.database.CursorWrapper: int getColumnCount()> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.io.File,android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<android.net.nsd.NsdServiceInfo: java.lang.String toString()> -> _SINK_
<android.graphics.Bitmap: int getDensity()> -> _SINK_
<io.requery.android.database.CursorWindow: void <clinit>()> -> _SINK_
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()> -> _SINK_
<android.database.CursorWrapper: int getPosition()> -> _SINK_
<android.database.MergeCursor: boolean isNull(int)> -> _SINK_
<android.net.Network: boolean equals(java.lang.Object)> -> _SINK_
<android.net.wifi.WifiManager$InterfaceCreationImpact: boolean equals(java.lang.Object)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTileModeXY(android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: int getCount()> -> _SINK_
<android.database.DatabaseUtils: void dumpCursor(android.database.Cursor,java.lang.StringBuilder)> -> _SINK_
<android.net.ProxyInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean move(int)> -> _SINK_
<android.net.VpnService$Builder: android.net.VpnService$Builder addRoute(java.lang.String,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.net.wifi.SupplicantState: android.net.wifi.SupplicantState[] values()> -> _SINK_
<android.database.CursorWindow: void copyStringToBuffer(int,int,android.database.CharArrayBuffer)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: int getWALAutoCheckpoint()> -> _SINK_
<android.net.MailTo: java.lang.String getBody()> -> _SINK_
<android.net.http.a: void finalize()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void dumpAll(android.util.Printer,boolean)> -> _SINK_
<android.net.NetworkInfo: boolean isConnected()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String toString()> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean moveToPrevious()> -> _SINK_
<io.requery.android.database.AbstractCursor: byte[] getBlob(int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getIntrinsicWidth()> -> _SINK_
<android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)> -> _SINK_
<io.requery.android.database.CursorWindow: boolean putBlob(byte[],int,int)> -> _SINK_
<android.database.MergeCursor: short getShort(int)> -> _SINK_
<android.net.LocalSocket: void close()> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceInfo: int hashCode()> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)> -> _SINK_
<android.net.wifi.WifiInfo: int getFrequency()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.Object[],java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void disableWriteAheadLogging()> -> _SINK_
<android.net.SSLSessionCache: void <init>(android.content.Context)> -> _SINK_
<android.net.LocalSocket: void setSoTimeout(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager: void removeGroup(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ActionListener)> -> _SINK_
<android.database.CursorWrapper: long getLong(int)> -> _SINK_
<android.database.MatrixCursor: double getDouble(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: boolean needUpgrade(int)> -> _SINK_
<android.database.MergeCursor: void unregisterContentObserver(android.database.ContentObserver)> -> _SINK_
<io.requery.android.database.AbstractCursor: android.os.Bundle getExtras()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$Operation: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pDeviceList: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: void onDeactivateOrClose()> -> _SINK_
<android.net.TrafficStats: long getTotalRxBytes()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: void <clinit>()> -> _SINK_
<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)> -> _SINK_
<android.net.nsd.NsdServiceInfo: void <init>()> -> _SINK_
<android.database.Observable: void unregisterAll()> -> _SINK_
<android.net.SSLSessionCache: void <init>(java.io.File)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: java.lang.String stripPathForLogs(java.lang.String)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTileModeY(android.graphics.Shader$TileMode)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.Object[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean isWriteAheadLoggingEnabled()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: int releaseMemory()> -> _SINK_
<android.database.CursorWrapper: int getInt(int)> -> _SINK_
<android.database.DataSetObservable: void <init>()> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setPageSize()> -> _SINK_
<android.net.wifi.SoftApConfiguration: int hashCode()> -> _SINK_
<android.database.CursorJoiner: java.util.Iterator iterator()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: void setBindArguments(java.lang.String[])> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void <init>(java.io.InputStream)> -> _SINK_
<android.database.CursorWindow: void finalize()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatement: int executeUpdateDelete()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabaseConfiguration: boolean isInMemoryDb()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: java.lang.String executeForString(java.lang.String,java.lang.Object[],int,android.support.v4.g.d)> -> _SINK_
<android.database.Observable: void unregisterObserver(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteQueryBuilder: void appendClause(java.lang.StringBuilder,java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: io.requery.android.database.sqlite.SQLiteDatabase getReadableDatabase()> -> _SINK_
<android.net.sip.SipManager: void close(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: long nativeExecuteForLong(long,long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String access$300(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase create(android.database.sqlite.SQLiteDatabase$CursorFactory)> -> _SINK_
<android.database.MatrixCursor: java.lang.String getString(int)> -> _SINK_
<android.net.wifi.WifiManager: int getWifiState()> -> _SINK_
<android.net.wifi.p2p.WifiP2pConfig: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$CertificateCredential: int hashCode()> -> _SINK_
<io.requery.android.database.AbstractCursor: void unregisterDataSetObserver(android.database.DataSetObserver)> -> _SINK_
<android.net.wifi.WifiConfiguration: java.lang.String toString()> -> _SINK_
<io.requery.android.database.AbstractCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<android.graphics.pdf.PdfDocument$PageInfo: android.graphics.Rect getContentRect()> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void setWindow(android.database.CursorWindow)> -> _SINK_
<android.net.wifi.SoftApConfiguration: java.lang.String toString()> -> _SINK_
<android.net.TrafficStats: long getUidTxPackets(int)> -> _SINK_
<android.net.VpnService: android.content.Intent prepare(android.content.Context)> -> _SINK_
<io.requery.android.database.CursorWindow: short getShort(int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void enableLocalizedCollators()> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: android.database.Cursor query(android.database.sqlite.SQLiteDatabase,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.graphics.Bitmap: void reconfigure(int,int,android.graphics.Bitmap$Config)> -> _SINK_
<android.net.MacAddress: int hashCode()> -> _SINK_
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: void dump(android.util.Printer)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void throwIfTransactionMarkedSuccessful()> -> _SINK_
<io.requery.android.database.CursorWindow: int nativeGetNumRows(long)> -> _SINK_
<android.net.wifi.WifiManager$LocalOnlyHotspotReservation: void close()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void finalizePreparedStatement(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)> -> _SINK_
<android.graphics.Bitmap: int getRowBytes()> -> _SINK_
<android.graphics.BitmapRegionDecoder: boolean isRecycled()> -> _SINK_
<android.net.wifi.SupplicantState: void <init>(java.lang.String,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase$1: io.requery.android.database.sqlite.SQLiteSession initialValue()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: android.database.Cursor query(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.Object[])> -> _SINK_
<io.requery.android.database.CursorWindow: double nativeGetDouble(long,int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: boolean hasConnection()> -> _SINK_
<io.requery.android.database.AbstractCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void bindDouble(int,double)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.Object[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.net.http.a: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean isDatabaseIntegrityOk()> -> _SINK_
<android.net.Proxy: java.lang.String getDefaultHost()> -> _SINK_
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config valueOf(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteCursor: void close()> -> _SINK_
<android.database.AbstractCursor: int getColumnIndex(java.lang.String)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential: int hashCode()> -> _SINK_
<android.net.Credentials: int getUid()> -> _SINK_
<android.net.Uri: android.net.Uri parse(java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void detachCancellationSignal(android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransactionWithListener(android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<android.net.Uri: android.net.Uri fromFile(java.io.File)> -> _SINK_
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()> -> _SINK_
<android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void dump(android.util.Printer,boolean)> -> _SINK_
<android.graphics.Bitmap$CompressFormat: void <clinit>()> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: int getInt(int)> -> _SINK_
<android.graphics.Bitmap: int getScaledWidth(int)> -> _SINK_
<io.requery.android.database.AbstractCursor$SelfContentObserver: void <init>(io.requery.android.database.AbstractCursor)> -> _SINK_
<android.database.CursorWrapper: java.lang.String getColumnName(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void dispose(boolean)> -> _SINK_
<android.net.Uri: java.lang.String decode(java.lang.String)> -> _SINK_
<android.net.wifi.WifiManager: int addNetwork(android.net.wifi.WifiConfiguration)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.util.List getAttachedDbs()> -> _SINK_
<android.graphics.pdf.PdfDocument: void close()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void logOperation(int,java.lang.String)> -> _SINK_
<android.net.NetworkInfo$State: void <clinit>()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertWithOnConflict(java.lang.String,java.lang.String,android.content.ContentValues,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: long nativePrepareStatement(long,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: void <init>(io.requery.android.database.sqlite.SQLiteCursorDriver,java.lang.String,io.requery.android.database.sqlite.SQLiteQuery)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void <init>(io.requery.android.database.sqlite.SQLiteConnection$1)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeFinalizeStatement(long,long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean hasCodec()> -> _SINK_
<android.database.CursorWindow: boolean putNull(int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatement: void execute()> -> _SINK_
<android.net.sip.SipProfile: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.CursorWindow: boolean nativePutNull(long,int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteGlobal: int getDefaultPageSize()> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean moveToFirst()> -> _SINK_
<android.net.wifi.WifiInfo: int getRssi()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: void close()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long longForQuery(io.requery.android.database.sqlite.SQLiteStatement,java.lang.String[])> -> _SINK_
<android.net.sip.SipManager: boolean isApiSupported(android.content.Context)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$Operation: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setForeignKeyModeFromConfiguration()> -> _SINK_
<android.graphics.pdf.PdfDocument$Page: android.graphics.pdf.PdfDocument$PageInfo getInfo()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setOnlyAllowReadOnlyOperations(boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void collectDbStats(java.util.ArrayList)> -> _SINK_
<android.net.NetworkRequest: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: int nativeExecuteForBlobFileDescriptor(long,long)> -> _SINK_
<android.database.MatrixCursor: long getLong(int)> -> _SINK_
<android.net.http.a: android.net.http.a a()> -> _SINK_
<android.net.wifi.WpsInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiManager$WifiLock: java.lang.String toString()> -> _SINK_
<io.requery.android.database.CursorWindow: boolean nativePutString(long,java.lang.String,int,int)> -> _SINK_
<android.database.sqlite.SQLiteProgram: void clearBindings()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$Operation: java.lang.String getFormattedStartTime()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeBindBlob(long,long,int,byte[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void beginTransactionUnchecked(int,android.database.sqlite.SQLiteTransactionListener,int,android.support.v4.g.d)> -> _SINK_
<android.net.DhcpInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.CursorJoiner: android.database.CursorJoiner$Result next()> -> _SINK_
<android.net.StaticIpConfiguration: java.lang.String toString()> -> _SINK_
<android.database.DataSetObservable: void notifyChanged()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)> -> _SINK_
<android.net.wifi.ScanResult$InformationElement: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.IpConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setAlpha(int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()> -> _SINK_
<android.net.sip.SipProfile$Builder: void <init>(java.lang.String,java.lang.String)> -> _SINK_
<android.net.wifi.WifiInfo: int getLinkSpeed()> -> _SINK_
<io.requery.android.database.AbstractCursor: java.lang.String getColumnName(int)> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: void <init>()> -> _SINK_
<android.database.CursorWrapper: java.lang.String getString(int)> -> _SINK_
<android.net.http.SslError: java.lang.String getUrl()> -> _SINK_
<android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)> -> _SINK_
<android.database.MergeCursor: java.lang.String getString(int)> -> _SINK_
<android.graphics.Bitmap: int getScaledHeight(int)> -> _SINK_
<android.database.sqlite.SQLiteClosable: void close()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void onConfigure(android.database.sqlite.SQLiteDatabase)> -> _SINK_
<android.net.LocalSocketAddress: void <init>(java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: int getRestrictBackgroundStatus()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigureAllConnectionsLocked()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void open()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$CertificateCredential: java.lang.String toString()> -> _SINK_
<io.requery.android.database.AbstractCursor: void checkPosition()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void beginTransactionWithListenerNonExclusive(android.database.sqlite.SQLiteTransactionListener)> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean requery()> -> _SINK_
<android.database.DatabaseUtils: void cursorIntToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.graphics.Bitmap: void eraseColor(int)> -> _SINK_
<android.net.IpSecManager$SecurityParameterIndex: void close()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession$Transaction: void <init>()> -> _SINK_
<android.net.wifi.WifiManager: boolean disconnect()> -> _SINK_
<android.net.RouteInfo: boolean equals(java.lang.Object)> -> _SINK_
<android.net.http.a: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: io.requery.android.database.sqlite.SQLiteConnection openConnectionLocked(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,boolean)> -> _SINK_
<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void bindObject(int,java.lang.Object)> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereEscapeString(java.lang.String)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void <init>(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean deleteDatabase(java.io.File)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeRegisterCustomFunction(long,io.requery.android.database.sqlite.SQLiteCustomFunction)> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: short getShort(int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus[] values()> -> _SINK_
<android.database.SQLException: void <init>()> -> _SINK_
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildUnionQuery(java.lang.String[],java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void recycleTransaction(io.requery.android.database.sqlite.SQLiteSession$Transaction)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String describeCurrentOperationUnsafe()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setGravity(int)> -> _SINK_
<android.database.AbstractCursor: void setExtras(android.os.Bundle)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int)> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void <init>()> -> _SINK_
<android.database.MergeCursor: int getType(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pManager$Channel: void close()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: boolean isCacheable(int)> -> _SINK_
<android.database.CursorJoiner$Result: android.database.CursorJoiner$Result[] values()> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap)> -> _SINK_
<android.net.wifi.WifiManager: boolean isScanAlwaysAvailable()> -> _SINK_
<android.net.wifi.WifiSsid: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long getMaximumSize()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void onAllReferencesReleased()> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean moveToNext()> -> _SINK_
<android.net.NetworkCapabilities: boolean hasCapability(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.String[],java.lang.String,android.os.CancellationSignal)> -> _SINK_
<android.net.NetworkInfo: java.lang.String getExtraInfo()> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)> -> _SINK_
<android.net.LinkProperties: boolean equals(java.lang.Object)> -> _SINK_
<android.net.sip.SipManager: void open(android.net.sip.SipProfile)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)> -> _SINK_
<android.graphics.pdf.PdfDocument$PageInfo$Builder: void <init>(int,int,int)> -> _SINK_
<android.net.nsd.NsdServiceInfo: java.lang.String getServiceName()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void dump(android.util.Printer,boolean)> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void setLocaleFromConfiguration()> -> _SINK_
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: float getFloat(int)> -> _SINK_
<io.requery.android.database.CursorWindow: boolean nativePutBlob(long,byte[],int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: java.lang.String describeCurrentOperation()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: void <init>(io.requery.android.database.sqlite.SQLiteConnectionPool$1)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,int,io.requery.android.database.DatabaseErrorHandler)> -> _SINK_
<android.net.http.X509TrustManagerExtensions: void <init>(javax.net.ssl.X509TrustManager)> -> _SINK_
<io.requery.android.database.CursorWindow: boolean nativePutLong(long,long,int,int)> -> _SINK_
<android.net.LocalServerSocket: void close()> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: long getLong(int)> -> _SINK_
<android.net.VpnService$Builder: android.net.VpnService$Builder setMtu(int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion: int hashCode()> -> _SINK_
<io.requery.android.database.CursorWindow: int nativeGetType(long,int,int)> -> _SINK_
<io.requery.android.database.CursorWindow: int getType(int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: int nativeGetDbLookaside(long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String findEditTable(java.lang.String)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getOpacity()> -> _SINK_
<android.net.wifi.WifiManager: boolean saveConfiguration()> -> _SINK_
<io.requery.android.database.AbstractCursor: int getColumnIndexOrThrow(java.lang.String)> -> _SINK_
<io.requery.android.database.AbstractWindowedCursor: void clearOrCreateWindow(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: boolean nativeHasCodec()> -> _SINK_
<android.net.LocalSocket: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard: io.requery.android.database.sqlite.CloseGuard get()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)> -> _SINK_
<android.net.NetworkCapabilities: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String nativeGetColumnName(long,long,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.lang.String getLabel()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTargetDensity(int)> -> _SINK_
<android.net.ConnectivityManager: android.net.Network getActiveNetwork()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteQuery: int fillWindow(io.requery.android.database.CursorWindow,int,int,boolean)> -> _SINK_
<android.net.http.AndroidHttpClient: java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity)> -> _SINK_
<android.database.MatrixCursor: short getShort(int)> -> _SINK_
<android.database.AbstractCursor: boolean moveToPrevious()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: int getAlpha()> -> _SINK_
<android.database.AbstractCursor: boolean move(int)> -> _SINK_
<android.database.CursorWindow: boolean isFloat(int,int)> -> _SINK_
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void finalize()> -> _SINK_
<android.net.NetworkCapabilities: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.lang.String[] getSupportedCipherSuites()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool$1: void onCancel()> -> _SINK_
<io.requery.android.database.CursorWindow: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void onBoundsChange(android.graphics.Rect)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatement: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.Object[])> -> _SINK_
<android.database.MergeCursor: void registerContentObserver(android.database.ContentObserver)> -> _SINK_
<android.database.CursorWindow: java.lang.String getString(int,int)> -> _SINK_
<android.database.MergeCursor: void close()> -> _SINK_
<android.net.Network: int hashCode()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean isClosed()> -> _SINK_
<android.database.sqlite.SQLiteOpenHelper: void setWriteAheadLoggingEnabled(boolean)> -> _SINK_
<android.net.RouteInfo: int hashCode()> -> _SINK_
<android.net.wifi.WifiManager: boolean removeNetwork(int)> -> _SINK_
<io.requery.android.database.CursorWindow: boolean nativeSetNumColumns(long,int)> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard: void close()> -> _SINK_
<android.database.CursorWrapper: void close()> -> _SINK_
<io.requery.android.database.CursorWindow: java.lang.String nativeGetString(long,int,int)> -> _SINK_
<android.database.AbstractCursor: boolean onMove(int,int)> -> _SINK_
<android.database.sqlite.SQLiteCursor: int getColumnIndex(java.lang.String)> -> _SINK_
<android.database.CursorWrapper: byte[] getBlob(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setVersion(int)> -> _SINK_
<io.requery.android.database.CursorWindow: long nativeGetLong(long,int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeClose(long)> -> _SINK_
<io.requery.android.database.AbstractCursor: void <init>()> -> _SINK_
<android.database.MergeCursor: void <init>(android.database.Cursor[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: java.lang.String getSql()> -> _SINK_
<android.net.Proxy: java.lang.String getHost(android.content.Context)> -> _SINK_
<android.net.wifi.WifiManager: boolean isWifiEnabled()> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: int hashCode()> -> _SINK_
<android.net.IpConfiguration: int hashCode()> -> _SINK_
<android.net.nsd.NsdManager: void unregisterService(android.net.nsd.NsdManager$RegistrationListener)> -> _SINK_
<android.net.wifi.WifiSsid: java.lang.String toString()> -> _SINK_
<android.net.wifi.WpsInfo: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteClosable: void <init>()> -> _SINK_
<android.net.SSLCertificateSocketFactory: java.net.Socket createSocket(java.lang.String,int,java.net.InetAddress,int)> -> _SINK_
<android.database.ContentObservable: void dispatchChange(boolean)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteQueryBuilder: java.lang.String buildQueryString(boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean isOpen()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void closeExcessConnectionsAndLogExceptionsLocked()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()> -> _SINK_
<android.database.CursorWrapper: boolean isNull(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void acquireConnection(java.lang.String,int,android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.CursorWindow: java.lang.String getString(int,int)> -> _SINK_
<android.database.AbstractCursor: boolean isAfterLast()> -> _SINK_
<android.net.http.a: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)> -> _SINK_
<android.net.wifi.WifiInfo: int getNetworkId()> -> _SINK_
<io.requery.android.database.CursorWindow: int getStartPosition()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)> -> _SINK_
<android.net.ConnectivityManager: android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: io.requery.android.database.sqlite.SQLiteDatabase openDatabase(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration,io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,io.requery.android.database.DatabaseErrorHandler)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: java.lang.String nativeExecuteForString(long,long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void setTransactionSuccessful()> -> _SINK_
<android.net.wifi.WifiConfiguration: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: void endOperation(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: io.requery.android.database.sqlite.SQLiteDatabase getDatabase()> -> _SINK_
<android.database.DatabaseUtils: void cursorStringToContentValuesIfPresent(android.database.Cursor,android.content.ContentValues,java.lang.String)> -> _SINK_
<android.database.MergeCursor: byte[] getBlob(int)> -> _SINK_
<android.database.DatabaseUtils: void cursorRowToContentValues(android.database.Cursor,android.content.ContentValues)> -> _SINK_
<android.database.ContentObserver: boolean deliverSelfNotifications()> -> _SINK_
<android.net.NetworkRequest$Builder: android.net.NetworkRequest$Builder removeCapability(int)> -> _SINK_
<io.requery.android.database.DefaultDatabaseErrorHandler: void deleteDatabaseFile(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void reconfigure(io.requery.android.database.sqlite.SQLiteDatabaseConfiguration)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: boolean yieldTransactionUnchecked(long,android.support.v4.g.d)> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long longForQuery(java.lang.String,java.lang.String[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: boolean yieldTransaction(long,boolean,android.support.v4.g.d)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: boolean isStateful()> -> _SINK_
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeBindNull(long,long,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: boolean isPreparedStatementInCache(java.lang.String)> -> _SINK_
<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: java.lang.String[] getColumnNames()> -> _SINK_
<android.net.wifi.WifiNetworkSuggestion: java.lang.String toString()> -> _SINK_
<android.net.LocalSocket: void shutdownInput()> -> _SINK_
<android.net.wifi.SoftApConfiguration: boolean equals(java.lang.Object)> -> _SINK_
<android.database.CursorWindow: int getStartPosition()> -> _SINK_
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState[] values()> -> _SINK_
<android.graphics.Bitmap: int getPixel(int,int)> -> _SINK_
<android.net.wifi.WifiManager$InterfaceCreationImpact: int hashCode()> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: java.util.ArrayList getActiveDatabases()> -> _SINK_
<android.net.wifi.SupplicantState: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.AbstractCursor: boolean isFirst()> -> _SINK_
<android.net.wifi.WifiSsid: boolean equals(java.lang.Object)> -> _SINK_
<android.net.wifi.p2p.nsd.WifiP2pServiceRequest: int hashCode()> -> _SINK_
<android.net.LocalSocketAddress$Namespace: void <clinit>()> -> _SINK_
<android.net.wifi.ScanResult$InformationElement: int hashCode()> -> _SINK_
<android.database.AbstractCursor: boolean isClosed()> -> _SINK_
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)> -> _SINK_
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String toString()> -> _SINK_
<io.requery.android.database.CursorWindow: void <init>(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeCancel(long)> -> _SINK_
<android.net.ConnectivityManager$NetworkCallback: void <init>()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void setForeignKeyConstraintsEnabled(boolean)> -> _SINK_
<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)> -> _SINK_
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache getInstalled()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean isMainThread()> -> _SINK_
<android.net.ConnectivityManager: android.net.Network[] getAllNetworks()> -> _SINK_
<android.database.MergeCursor: double getDouble(int)> -> _SINK_
<io.requery.android.database.CursorWindow: void copyStringToBuffer(int,int,android.database.CharArrayBuffer)> -> _SINK_
<android.net.wifi.WifiInfo: int hashCode()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: int getTypeOfObject(java.lang.Object)> -> _SINK_
<android.net.MailTo: java.lang.String getTo()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$OperationLog: io.requery.android.database.sqlite.SQLiteConnection$Operation getOperationLocked(int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[],android.os.CancellationSignal)> -> _SINK_
<android.net.RouteInfo: java.lang.String toString()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void applyBlockGuardPolicy(io.requery.android.database.sqlite.SQLiteConnection$PreparedStatement)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: boolean isAutoMirrored()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: long executeForLong(java.lang.String,java.lang.Object[],android.support.v4.g.d)> -> _SINK_
<android.graphics.Bitmap$CompressFormat: android.graphics.Bitmap$CompressFormat valueOf(java.lang.String)> -> _SINK_
<android.net.ProxyInfo: java.lang.String[] getExclusionList()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: int nativeGetParameterCount(long,long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$PreparedStatementCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)> -> _SINK_
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()> -> _SINK_
<android.database.CursorWindow: void setStartPosition(int)> -> _SINK_
<android.graphics.Bitmap: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: boolean hasTransaction()> -> _SINK_
<android.graphics.Bitmap: void setDensity(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeCheckIt(long,byte[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDirectCursorDriver: void <init>(io.requery.android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,android.support.v4.g.d)> -> _SINK_
<android.net.StaticIpConfiguration: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.net.Uri$Builder: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: boolean yieldIfContendedSafely()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void <clinit>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQueryWithFactory(io.requery.android.database.sqlite.SQLiteDatabase$CursorFactory,java.lang.String,java.lang.Object[],java.lang.String,android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void throwIfNotOpenLocked()> -> _SINK_
<android.net.Uri$Builder: android.net.Uri$Builder encodedFragment(java.lang.String)> -> _SINK_
<android.database.CursorWrapper: void deactivate()> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)> -> _SINK_
<android.graphics.Bitmap$Config: void <clinit>()> -> _SINK_
<android.database.AbstractCursor: int getColumnCount()> -> _SINK_
<android.net.IpPrefix: int hashCode()> -> _SINK_
<android.net.wifi.SupplicantState: android.net.wifi.SupplicantState[] $values()> -> _SINK_
<android.database.CursorWrapper: boolean isClosed()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor queryWithFactory(android.database.sqlite.SQLiteDatabase$CursorFactory,boolean,java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.CancellationSignal)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void access$100(io.requery.android.database.sqlite.SQLiteConnectionPool,io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)> -> _SINK_
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: long getMaximumSize()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void collectDbStats(java.util.ArrayList)> -> _SINK_
<android.database.CursorJoiner$Result: void <init>(java.lang.String,int)> -> _SINK_
<android.database.MatrixCursor: void addRow(java.lang.Object[])> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void throwIfNestedTransaction()> -> _SINK_
<android.net.wifi.WifiNetworkSpecifier: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTileModeX(android.graphics.Shader$TileMode)> -> _SINK_
<android.net.LocalSocket: void setSendBufferSize(int)> -> _SINK_
<io.requery.android.database.CursorWindow: void finalize()> -> _SINK_
<android.graphics.Bitmap: void setPixel(int,int,int)> -> _SINK_
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: void deactivate()> -> _SINK_
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache install(java.io.File,long)> -> _SINK_
<android.database.CursorWrapper: void setNotificationUri(android.content.ContentResolver,android.net.Uri)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: void <init>(java.lang.String,int)> -> _SINK_
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteSession: void checkIt(byte[],int,android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: io.requery.android.database.sqlite.SQLiteConnection tryAcquireNonPrimaryConnectionLocked(java.lang.String,int)> -> _SINK_
<android.net.wifi.p2p.WifiP2pWfdInfo: java.lang.String toString()> -> _SINK_
<io.requery.android.database.AbstractCursor: void onChange(boolean)> -> _SINK_
<android.database.sqlite.SQLiteClosable: void releaseReference()> -> _SINK_
<android.database.CursorWindow: void <init>(boolean)> -> _SINK_
<android.database.CursorWrapper: int getType(int)> -> _SINK_
<android.net.NetworkRequest: boolean equals(java.lang.Object)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void releaseConnection(io.requery.android.database.sqlite.SQLiteConnection)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection$Operation: java.lang.String getStatus()> -> _SINK_
<android.database.ContentObserver: void <init>(android.os.Handler)> -> _SINK_
<android.net.Uri: boolean equals(java.lang.Object)> -> _SINK_
<android.database.ContentObserver: void onChange(boolean,android.net.Uri)> -> _SINK_
<android.database.MatrixCursor: void <init>(java.lang.String[],int)> -> _SINK_
<android.database.CursorWrapper: java.lang.String[] getColumnNames()> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void setTintList(android.content.res.ColorStateList)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: android.os.ParcelFileDescriptor blobFileDescriptorForQuery(io.requery.android.database.sqlite.SQLiteStatement,java.lang.String[])> -> _SINK_
<android.database.DatabaseUtils: java.lang.String sqlEscapeString(java.lang.String)> -> _SINK_
<android.database.DataSetObservable: void notifyInvalidated()> -> _SINK_
<android.database.DataSetObserver: void onInvalidated()> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean moveToLast()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: boolean onMove(int,int)> -> _SINK_
<android.database.AbstractCursor: boolean isLast()> -> _SINK_
<android.net.wifi.hotspot2.pps.HomeSp: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Picture)> -> _SINK_
<io.requery.android.database.AbstractCursor: int getPosition()> -> _SINK_
<android.database.sqlite.SQLiteStatement: java.lang.String simpleQueryForString()> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard: void warnIfOpen()> -> _SINK_
<android.database.CursorWindow: int getNumRows()> -> _SINK_
<android.net.http.HttpResponseCache: void close()> -> _SINK_
<android.net.NetworkCapabilities: java.lang.String toString()> -> _SINK_
<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void beginTransaction(android.database.sqlite.SQLiteTransactionListener,int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void <clinit>()> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$UserCredential: java.lang.String toString()> -> _SINK_
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)> -> _SINK_
<android.graphics.drawable.BitmapDrawable: void <init>(android.graphics.Bitmap)> -> _SINK_
<android.graphics.pdf.PdfDocument$Page: android.graphics.Canvas getCanvas()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteClosable: void releaseReference()> -> _SINK_
<android.net.wifi.hotspot2.pps.Credential$SimCredential: void writeToParcel(android.os.Parcel,int)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<android.database.AbstractCursor: boolean moveToLast()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: int updateWithOnConflict(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[],int)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDatabase: void open()> -> _SINK_
<android.net.LinkProperties: int hashCode()> -> _SINK_
<android.database.AbstractCursor: int getPosition()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeLoadExtension(long,java.lang.String,java.lang.String)> -> _SINK_
<android.net.UrlQuerySanitizer: void parseUrl(java.lang.String)> -> _SINK_
<android.net.NetworkInfo: boolean isAvailable()> -> _SINK_
<android.net.wifi.hotspot2.PasspointConfiguration: java.lang.String toString()> -> _SINK_
<android.net.wifi.WifiInfo: java.lang.String getBSSID()> -> _SINK_
<android.net.wifi.WifiSsid: int hashCode()> -> _SINK_
<io.requery.android.database.CursorWindow: void dispose()> -> _SINK_
<android.database.CursorWrapper: int getColumnIndex(java.lang.String)> -> _SINK_
<android.database.AbstractWindowedCursor: int getType(int)> -> _SINK_
<io.requery.android.database.AbstractCursor: boolean isFirst()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: int executeForCursorWindow(java.lang.String,java.lang.Object[],io.requery.android.database.CursorWindow,int,int,boolean,android.support.v4.g.d)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: void setSelectionArguments(java.lang.String[])> -> _SINK_
<android.graphics.drawable.BitmapDrawable: boolean canApplyTheme()> -> _SINK_
<android.net.http.a: org.apache.http.params.HttpParams getParams()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus: io.requery.android.database.sqlite.SQLiteConnectionPool$AcquiredConnectionStatus valueOf(java.lang.String)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: long nativeOpen(java.lang.String,int,java.lang.String,boolean,boolean)> -> _SINK_
<android.net.http.HttpResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteDebug$PagerStats: void <init>()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnection: void nativeResetStatementAndClearBindings(long,long)> -> _SINK_
<io.requery.android.database.sqlite.CloseGuard$DefaultReporter: void <init>(io.requery.android.database.sqlite.CloseGuard$1)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteCursor: void finalize()> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long setMaximumSize(long)> -> _SINK_
<io.requery.android.database.sqlite.SQLiteProgram: void bindNull(int)> -> _SINK_
<android.net.LocalSocket: java.lang.String toString()> -> _SINK_
<android.database.MergeCursor: int getCount()> -> _SINK_
<android.database.CursorWindow: boolean isBlob(int,int)> -> _SINK_
<io.requery.android.database.AbstractCursor: void finalize()> -> _SINK_
<android.net.http.SslCertificate$DName: java.lang.String getOName()> -> _SINK_
<io.requery.android.database.sqlite.SQLiteConnectionPool: void cancelConnectionWaiterLocked(io.requery.android.database.sqlite.SQLiteConnectionPool$ConnectionWaiter)> -> _SINK_
<io.requery.android.database.AbstractCursor: void setExtras(android.os.Bundle)> -> _SINK_
<io.requery.android.database.AbstractCursor: int getColumnCount()> -> _SINK_
<android.net.NetworkInfo$DetailedState: void <clinit>()> -> _SINK_
