Duration => 394
UI Thread => 187
Worker Thread => 294

----------------StartUI----------------
<java.lang.String: boolean equals(java.lang.Object)>: 18
<java.io.File: boolean exists()>: 11
<java.io.File: void <init>(java.lang.String)>: 10
<java.lang.Object: boolean equals(java.lang.Object)>: 7
<java.io.File: void <init>(java.io.File,java.lang.String)>: 6
<java.io.IOException: void <init>(java.lang.String)>: 6
<java.io.File: boolean renameTo(java.io.File)>: 5
<java.io.File: boolean mkdir()>: 5
<java.io.File: boolean delete()>: 5
<java.io.File: boolean mkdirs()>: 5
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>: 4
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 4
<java.io.File: boolean isDirectory()>: 4
<java.io.File: java.io.File[] listFiles()>: 4
<java.io.File: java.io.File getAbsoluteFile()>: 3
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>: 3
<com.nielsen.app.sdk.k: void close()>: 3
<com.nielsen.app.sdk.AppSdk: void close()>: 3
<java.io.File: java.lang.String getPath()>: 3
<java.io.File: boolean isFile()>: 3
<android.database.sqlite.SQLiteOpenHelper: void close()>: 3
<com.nielsen.app.sdk.AppLocationManager: void close()>: 3
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase openDatabase(java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 3
<com.nielsen.app.sdk.AppRequestManager: void close()>: 3
<com.nielsen.app.sdk.g: void close()>: 3
<java.io.File: java.lang.String getAbsolutePath()>: 3
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>: 3
<android.net.wifi.WifiManager: android.net.wifi.WifiManager$WifiLock createWifiLock(int,java.lang.String)>: 3
<android.database.sqlite.SQLiteClosable: void close()>: 3
<com.nielsen.app.sdk.f: void close()>: 3
<java.io.IOException: void <init>()>: 2
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>: 2
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>: 2
<java.io.Writer: void write(java.lang.String)>: 2
<java.io.Writer: void close()>: 2
<java.io.BufferedWriter: void <init>(java.io.Writer)>: 2
<android.net.wifi.WifiManager$WifiLock: void release()>: 2
<android.net.wifi.WifiManager$WifiLock: boolean isHeld()>: 2
<android.graphics.BitmapFactory$Options: void <init>()>: 1
<android.net.Uri: android.net.Uri parse(java.lang.String)>: 1
<java.io.FileInputStream: void <init>(java.io.File)>: 1
<android.net.Uri$Builder: android.net.Uri build()>: 1
<java.io.File: long length()>: 1
<android.database.ContentObserver: void <init>(android.os.Handler)>: 1
<java.io.ByteArrayOutputStream: java.lang.String toString()>: 1
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>: 1
<com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache: void close()>: 1
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>: 1
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>: 1
<java.nio.charset.Charset: boolean equals(java.lang.Object)>: 1
<java.io.ByteArrayOutputStream: void <init>(int)>: 1
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>: 1
<android.net.wifi.WifiManager$WifiLock: void acquire()>: 1
<java.io.InputStream: int read(byte[],int,int)>: 1
<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>: 1
<java.io.File: boolean createNewFile()>: 1
<java.io.FileOutputStream: void <init>(java.io.File)>: 1
<java.lang.String: int hashCode()>: 1
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>: 1
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>: 1
<android.net.Uri$Builder: void <init>()>: 1
<android.graphics.Bitmap: boolean isRecycled()>: 1
<java.io.Writer: void flush()>: 1
<java.io.ByteArrayOutputStream: void write(byte[],int,int)>: 1
<java.io.EOFException: void <init>()>: 1
<java.io.PrintStream: void println(java.lang.String)>: 1
<android.database.Cursor: void close()>: 1
----------------StartWorker----------------
<java.nio.charset.Charset: java.nio.charset.Charset defaultCharset()>: 24
<java.io.File: boolean exists()>: 16
<java.io.File: void <init>(java.lang.String)>: 12
<java.io.File: boolean delete()>: 10
<java.io.File: long lastModified()>: 9
<android.database.sqlite.SQLiteClosable: void close()>: 9
<java.lang.String: boolean equals(java.lang.Object)>: 8
<java.io.File: java.lang.String getAbsolutePath()>: 7
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>: 6
<java.io.File: long length()>: 6
<java.io.File: java.lang.String getPath()>: 6
<java.io.Writer: void write(java.lang.String)>: 5
<java.io.ByteArrayInputStream: void <init>(byte[])>: 5
<java.io.FileInputStream: void <init>(java.io.File)>: 4
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>: 4
<java.io.File: void <init>(java.io.File,java.lang.String)>: 4
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>: 4
<android.graphics.BitmapFactory$Options: void <init>()>: 3
<java.io.File: boolean renameTo(java.io.File)>: 3
<android.graphics.Bitmap: void recycle()>: 3
<java.io.Closeable: void close()>: 3
<java.io.OutputStreamWriter: void close()>: 3
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>: 3
<java.io.InputStream: void close()>: 3
<com.nielsen.app.sdk.AppConfig: void close()>: 3
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>: 3
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>: 3
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>: 3
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>: 3
<java.lang.Character: boolean equals(java.lang.Object)>: 3
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>: 3
<com.nielsen.app.sdk.b: void close()>: 3
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>: 3
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.nio.charset.Charset)>: 3
<java.io.FileInputStream: void close()>: 3
<com.nielsen.app.sdk.j: void close()>: 3
<java.io.BufferedReader: java.lang.String readLine()>: 3
<android.graphics.Bitmap: int getHeight()>: 3
<java.io.InputStream: int read(byte[],int,int)>: 3
<java.io.File: boolean createNewFile()>: 3
<java.io.FileOutputStream: void <init>(java.io.File)>: 3
<javax.security.auth.x500.X500Principal: boolean equals(java.lang.Object)>: 3
<java.io.BufferedReader: void close()>: 3
<com.nielsen.app.sdk.AppConfig$AppRule: void close()>: 3
<android.net.NetworkInfo: boolean isConnected()>: 3
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>: 3
<java.io.FileOutputStream: void close()>: 3
<android.database.Cursor: void close()>: 3
<java.io.BufferedReader: void <init>(java.io.Reader)>: 3
<android.net.Uri: java.lang.String encode(java.lang.String)>: 3
<java.io.ByteArrayOutputStream: byte[] toByteArray()>: 2
<java.io.InputStream: void reset()>: 2
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>: 2
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>: 2
<com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache$2: void <init>()>: 2
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>: 2
<java.io.OutputStream: void <init>()>: 2
<java.net.HttpURLConnection: int getResponseCode()>: 2
<java.lang.String: int hashCode()>: 2
<android.graphics.Bitmap: int getWidth()>: 2
<java.io.ByteArrayOutputStream: void <init>()>: 2
<java.io.IOException: void <init>(java.lang.String)>: 2
<java.io.InputStream: boolean markSupported()>: 2
<java.io.Writer: void flush()>: 2
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>: 2
<java.io.File: boolean mkdirs()>: 2
<android.net.Uri: android.net.Uri parse(java.lang.String)>: 1
<java.io.IOException: void <init>()>: 1
<java.net.URL: void <init>(java.lang.String)>: 1
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>: 1
<java.net.URLConnection: void setReadTimeout(int)>: 1
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>: 1
<java.io.OutputStream: void write(byte[],int,int)>: 1
<com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache$Snapshot: void close()>: 1
<java.net.URL: java.net.URLConnection openConnection()>: 1
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>: 1
<java.io.InputStream: void <init>()>: 1
<java.io.OutputStream: void flush()>: 1
<java.net.URLConnection: java.io.InputStream getInputStream()>: 1
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>: 1
<com.nostra13.universalimageloader.core.assist.FlushedInputStream: void <init>(java.io.InputStream)>: 1
<java.net.URLConnection: void setConnectTimeout(int)>: 1
<java.io.FileInputStream: void <init>(java.lang.String)>: 1
<android.graphics.Bitmap: boolean isRecycled()>: 1
<android.graphics.Bitmap: int getRowBytes()>: 1
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>: 1
<java.lang.Object: int hashCode()>: 1
<java.io.FilterInputStream: void <init>(java.io.InputStream)>: 1
<java.net.URLConnection: int getContentLength()>: 1
<java.io.InputStream: int available()>: 1
