Duration => 625
UI Thread => 368
Worker Thread => 922

----------------StartUI----------------
<java.lang.String: boolean equals(java.lang.Object)>: 105
<java.io.PrintStream: void println(java.lang.String)>: 33
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>: 20
<java.io.File: void <init>(java.lang.String)>: 16
<java.io.InputStream: void close()>: 11
<java.io.InputStreamReader: void <init>(java.io.InputStream)>: 11
<java.io.PrintStream: void <init>(java.io.File)>: 11
<java.io.BufferedReader: java.lang.String readLine()>: 11
<java.io.BufferedReader: void <init>(java.io.Reader)>: 11
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>: 10
<java.io.File: boolean exists()>: 9
<java.io.File: void <init>(java.io.File,java.lang.String)>: 8
<java.io.File: java.lang.String getAbsolutePath()>: 8
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>: 7
<android.database.Cursor: void close()>: 7
<java.lang.Object: boolean equals(java.lang.Object)>: 5
<java.io.File: boolean mkdirs()>: 4
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 3
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>: 3
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)>: 3
<java.io.File: boolean delete()>: 3
<io.realm.internal.OsSharedRealm: void close()>: 3
<com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 3
<android.database.sqlite.SQLiteClosable: void close()>: 3
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>: 2
<java.io.FileOutputStream: java.io.FileDescriptor getFD()>: 2
<java.io.FileInputStream: void <init>(java.io.File)>: 2
<java.io.Closeable: void close()>: 2
<java.io.File: boolean isDirectory()>: 2
<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>: 2
<java.io.InputStream: int read(byte[])>: 2
<java.io.File: long length()>: 2
<java.io.File: boolean setExecutable(boolean,boolean)>: 2
<java.util.zip.ZipFile: void close()>: 2
<java.io.OutputStream: void write(byte[],int,int)>: 2
<java.io.File: java.lang.String getName()>: 2
<java.io.FileInputStream: java.nio.channels.FileChannel getChannel()>: 2
<java.io.OutputStream: void flush()>: 2
<java.io.File: java.lang.String getCanonicalPath()>: 2
<java.io.File: boolean setWritable(boolean)>: 2
<java.io.File: boolean setReadable(boolean,boolean)>: 2
<java.io.File: boolean createNewFile()>: 2
<java.io.FileOutputStream: void <init>(java.io.File)>: 2
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>: 2
<java.io.FileDescriptor: void sync()>: 2
<java.io.EOFException: void <init>()>: 2
<java.io.File: java.io.File[] listFiles(java.io.FilenameFilter)>: 2
<android.database.sqlite.SQLiteStatement: void execute()>: 1
<java.net.URI: void <init>(java.lang.String)>: 1
<io.realm.internal.RealmProxyMediator: boolean equals(java.lang.Object)>: 1
<java.io.File: boolean equals(java.lang.Object)>: 1
<io.realm.RealmConfiguration: boolean equals(java.lang.Object)>: 1
<java.lang.Integer: boolean equals(java.lang.Object)>: 1
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>: 1
<io.realm.internal.RealmNotifier: void close()>: 1
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>: 1
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>: 1
<android.database.sqlite.SQLiteStatement: long executeInsert()>: 1
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>: 1
<android.database.sqlite.SQLiteProgram: void bindNull(int)>: 1
<java.lang.Boolean: boolean equals(java.lang.Object)>: 1
----------------StartWorker----------------
<java.lang.String: boolean equals(java.lang.Object)>: 113
<java.io.IOException: void <init>(java.lang.String)>: 78
<java.io.DataInput: int readUnsignedByte()>: 52
<java.io.DataInput: java.lang.String readUTF()>: 39
<java.io.InputStream: void close()>: 29
<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>: 26
<java.io.DataInputStream: void <init>(java.io.InputStream)>: 26
<java.io.DataInput: boolean readBoolean()>: 26
<java.lang.Object: int hashCode()>: 17
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>: 15
<java.io.FileInputStream: void <init>(java.io.File)>: 13
<java.io.File: boolean isDirectory()>: 13
<java.io.DataInputStream: int readUnsignedShort()>: 13
<java.io.DataInput: int readInt()>: 13
<java.io.File: boolean exists()>: 13
<java.io.FilterInputStream: void close()>: 13
<java.io.DataInput: long readLong()>: 13
<java.io.DataInput: byte readByte()>: 13
<java.io.File: void <init>(java.lang.String)>: 13
<java.io.DataInput: int readUnsignedShort()>: 13
<java.io.File: void <init>(java.io.File,java.lang.String)>: 13
<java.io.DataInputStream: java.lang.String readUTF()>: 13
<java.lang.Object: boolean equals(java.lang.Object)>: 12
<org.apache.http.HttpConnection: void close()>: 10
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 8
<com.j256.ormlite.android.apptools.OrmLiteSqliteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 8
<java.net.URI: void <init>(java.lang.String)>: 6
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String,java.lang.String[])>: 6
<java.net.URI: boolean isAbsolute()>: 6
<java.io.PrintStream: void println(java.lang.String)>: 6
<android.database.Cursor: void close()>: 6
<android.database.sqlite.SQLiteStatement: long simpleQueryForLong()>: 5
<android.database.sqlite.SQLiteStatement: void execute()>: 5
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>: 5
<java.io.OutputStream: void write(byte[],int,int)>: 5
<java.net.URI: java.net.URI create(java.lang.String)>: 5
<java.io.InterruptedIOException: void <init>()>: 5
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>: 5
<android.database.sqlite.SQLiteProgram: void bindBlob(int,byte[])>: 5
<android.database.sqlite.SQLiteProgram: void bindNull(int)>: 5
<java.io.OutputStream: void close()>: 5
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>: 5
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>: 5
<android.database.sqlite.SQLiteClosable: void close()>: 5
<java.net.URL: java.net.URLConnection openConnection()>: 4
<java.io.InputStream: void <init>()>: 4
<java.io.OutputStream: void flush()>: 4
<java.io.ByteArrayInputStream: void <init>(byte[])>: 4
<java.io.InterruptedIOException: void <init>(java.lang.String)>: 4
<java.net.URLConnection: java.io.InputStream getInputStream()>: 4
<org.apache.http.HttpHost: boolean equals(java.lang.Object)>: 4
<org.apache.http.MalformedChunkCodingException: void <init>(java.lang.String)>: 4
<java.net.Socket: void close()>: 4
<org.apache.http.conn.routing.HttpRoute: boolean equals(java.lang.Object)>: 4
<java.io.ByteArrayOutputStream: byte[] toByteArray()>: 3
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>: 3
<java.io.PrintStream: void print(java.lang.String)>: 3
<java.io.InputStreamReader: void <init>(java.io.InputStream)>: 3
<java.net.Socket: void setSoTimeout(int)>: 3
<java.io.BufferedReader: java.lang.String readLine()>: 3
<java.io.FileOutputStream: void <init>(java.lang.String,boolean)>: 3
<java.io.PrintStream: void flush()>: 3
<java.net.URI: java.lang.String getScheme()>: 3
<java.io.PrintStream: void <init>(java.io.OutputStream)>: 3
<java.io.InputStream: int read(byte[])>: 3
<java.io.OutputStream: void write(byte[])>: 3
<java.net.URI: java.lang.String toASCIIString()>: 3
<java.io.InputStream: int read(byte[],int,int)>: 3
<java.io.BufferedReader: void close()>: 3
<java.io.OutputStream: void <init>()>: 3
<java.net.URI: boolean isOpaque()>: 3
<java.net.URI: java.lang.String getPath()>: 3
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>: 3
<java.io.BufferedReader: void <init>(java.io.Reader)>: 3
<java.net.URLConnection: void setUseCaches(boolean)>: 3
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[],int,int)>: 2
<java.net.URI: java.lang.String getRawFragment()>: 2
<java.nio.ByteBuffer: java.nio.ByteBuffer allocate(int)>: 2
<java.nio.charset.Charset: boolean equals(java.lang.Object)>: 2
<java.net.URI: java.lang.String getHost()>: 2
<java.io.ByteArrayOutputStream: void <init>(int)>: 2
<java.net.URISyntaxException: java.lang.String getMessage()>: 2
<java.net.URLConnection: void addRequestProperty(java.lang.String,java.lang.String)>: 2
<java.net.InetSocketAddress: void <init>(java.net.InetAddress,int)>: 2
<java.net.URI: java.lang.String getRawQuery()>: 2
<java.net.URLConnection: java.io.OutputStream getOutputStream()>: 2
<java.nio.charset.CoderResult: boolean isError()>: 2
<java.nio.CharBuffer: java.nio.CharBuffer wrap(java.lang.CharSequence)>: 2
<java.net.URI: java.lang.String getUserInfo()>: 2
<java.net.URI: int getPort()>: 2
<java.nio.charset.CoderResult: void throwException()>: 2
<java.net.URI: java.lang.String toString()>: 2
<java.net.URI: java.lang.String getAuthority()>: 2
<java.net.HttpURLConnection: void setFixedLengthStreamingMode(int)>: 2
<org.apache.http.NoHttpResponseException: void <init>(java.lang.String)>: 2
<java.net.URI: java.lang.String getFragment()>: 2
<org.springframework.http.ContentCodingType: boolean equals(java.lang.Object)>: 2
<java.io.IOException: void <init>()>: 1
<java.net.InetAddress: java.lang.String getHostName()>: 1
<java.net.Socket: void shutdownOutput()>: 1
<java.net.URLConnection: void setDoOutput(boolean)>: 1
<java.nio.CharBuffer: java.lang.String toString()>: 1
<java.net.Socket: int getSendBufferSize()>: 1
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>: 1
<java.io.InputStream: int read()>: 1
<java.net.URI: java.lang.String getRawAuthority()>: 1
<java.net.URI: java.net.URI resolve(java.net.URI)>: 1
<java.net.HttpURLConnection: void setChunkedStreamingMode(int)>: 1
<org.apache.http.conn.ConnectionPoolTimeoutException: void <init>(java.lang.String)>: 1
<org.apache.http.client.ClientProtocolException: void <init>(java.lang.String)>: 1
<java.net.Socket: void setSoLinger(boolean,int)>: 1
<java.util.zip.GZIPOutputStream: void <init>(java.io.OutputStream)>: 1
<java.net.HttpURLConnection: java.lang.String getHeaderFieldKey(int)>: 1
<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[])>: 1
<java.net.Socket: int getSoTimeout()>: 1
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)>: 1
<java.net.HttpURLConnection: int getResponseCode()>: 1
<java.io.ByteArrayOutputStream: void write(int)>: 1
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[])>: 1
<java.net.Socket: java.io.InputStream getInputStream()>: 1
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)>: 1
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>: 1
<java.net.URLConnection: boolean getDoOutput()>: 1
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>: 1
<java.net.HttpURLConnection: java.lang.String getHeaderField(int)>: 1
<org.apache.http.conn.EofSensorInputStream: int read(byte[],int,int)>: 1
<org.apache.http.impl.SocketHttpClientConnection: void close()>: 1
<java.net.URI: java.net.URL toURL()>: 1
<java.net.URI: java.net.URI normalize()>: 1
<org.apache.http.conn.ConnectTimeoutException: void <init>(java.lang.String)>: 1
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>: 1
<java.net.Socket: void shutdownInput()>: 1
<org.apache.http.MessageConstraintException: void <init>(java.lang.String)>: 1
<org.apache.http.impl.io.ContentLengthInputStream: int read(byte[],int,int)>: 1
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[],int,int)>: 1
<org.apache.http.impl.io.ChunkedInputStream: int read(byte[],int,int)>: 1
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>: 1
<java.net.Socket: void setTcpNoDelay(boolean)>: 1
<java.net.URLConnection: void setReadTimeout(int)>: 1
<java.net.URI: java.lang.String getRawSchemeSpecificPart()>: 1
<org.apache.http.ConnectionClosedException: void <init>(java.lang.String)>: 1
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>: 1
<java.nio.CharBuffer: java.nio.CharBuffer allocate(int)>: 1
<java.net.URI: java.lang.String getRawUserInfo()>: 1
<org.apache.http.TruncatedChunkException: void <init>(java.lang.String)>: 1
<java.nio.CharBuffer: java.nio.CharBuffer wrap(char[],int,int)>: 1
<org.apache.http.conn.UnsupportedSchemeException: void <init>(java.lang.String)>: 1
<java.net.URI: void <init>(java.lang.String,java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String)>: 1
<java.net.URLConnection: void setConnectTimeout(int)>: 1
<java.io.ByteArrayOutputStream: void <init>()>: 1
<java.net.Socket: java.io.OutputStream getOutputStream()>: 1
<java.net.URLConnection: void setDoInput(boolean)>: 1
<java.nio.charset.UnsupportedCharsetException: void <init>(java.lang.String)>: 1
<java.net.InetAddress: boolean equals(java.lang.Object)>: 1
<org.apache.http.client.ClientProtocolException: void <init>(java.lang.Throwable)>: 1
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>: 1
<java.net.URI: java.lang.String getRawPath()>: 1
<java.net.InetAddress: java.net.InetAddress[] getAllByName(java.lang.String)>: 1
<java.net.URI: java.lang.String getQuery()>: 1
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>: 1
<org.springframework.http.client.SimpleStreamingClientHttpRequest$NonClosingOutputStream: void <init>(java.io.OutputStream)>: 1
<java.net.Socket: int getReceiveBufferSize()>: 1
