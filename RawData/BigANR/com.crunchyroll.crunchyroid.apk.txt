Duration => 1189
UI Thread => 659
Worker Thread => 782

----------------StartUI----------------
<java.lang.String: boolean equals(java.lang.Object)>: 194
<java.lang.Object: java.lang.String toString()>: 51
<java.lang.String: int hashCode()>: 49
<com.fasterxml.jackson.databind.JavaType: boolean equals(java.lang.Object)>: 24
<com.fasterxml.jackson.databind.JavaType: int hashCode()>: 22
<java.io.IOException: void <init>(java.lang.String)>: 19
<java.lang.Object: boolean equals(java.lang.Object)>: 15
<java.lang.Object: int hashCode()>: 12
<java.net.URI: java.net.URI create(java.lang.String)>: 9
<java.io.File: boolean exists()>: 9
<java.lang.Enum: boolean equals(java.lang.Object)>: 9
<com.fasterxml.jackson.core.JsonParser: void close()>: 9
<java.net.URL: void <init>(java.lang.String)>: 7
<android.graphics.Bitmap: boolean isRecycled()>: 7
<java.io.Closeable: void close()>: 6
<com.fasterxml.jackson.core.a.b: void close()>: 6
<java.io.OutputStream: void write(byte[],int,int)>: 6
<java.io.Reader: void close()>: 6
<java.net.InetAddress: java.lang.String toString()>: 6
<com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>: 6
<java.util.Locale: boolean equals(java.lang.Object)>: 6
<com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>()>: 6
<java.io.File: void <init>(java.io.File,java.lang.String)>: 6
<java.io.OutputStream: void <init>()>: 6
<java.io.StringReader: void <init>(java.lang.String)>: 6
<java.io.File: void <init>(java.lang.String)>: 5
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>: 5
<java.io.File: boolean delete()>: 5
<java.io.File: java.io.File[] listFiles()>: 5
<java.io.File: java.lang.String getName()>: 4
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>: 4
<java.math.BigInteger: int hashCode()>: 3
<java.io.InputStream: void <init>()>: 3
<android.util.JsonWriter: void close()>: 3
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>: 3
<java.net.InetSocketAddress: int getPort()>: 3
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>: 3
<java.io.StringWriter: void <init>()>: 3
<com.fasterxml.jackson.databind.util.TokenBuffer: void close()>: 3
<com.fasterxml.jackson.core.JsonProcessingException: void <init>(java.lang.String,java.lang.Throwable)>: 3
<android.graphics.BitmapFactory$Options: void <init>()>: 3
<java.io.OutputStream: void close()>: 3
<android.net.Uri: android.net.Uri parse(java.lang.String)>: 3
<java.net.InetSocketAddress: java.lang.String getHostName()>: 3
<com.fasterxml.jackson.databind.type.SimpleType: boolean equals(java.lang.Object)>: 3
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>: 3
<java.io.InputStream: void close()>: 3
<java.io.StringWriter: java.lang.String toString()>: 3
<java.io.OutputStream: void write(byte[])>: 3
<com.fasterxml.jackson.databind.util.TypeKey: int hashCode()>: 3
<com.fasterxml.jackson.core.JsonProcessingException: void <init>(java.lang.String)>: 3
<com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>: 3
<java.net.InetSocketAddress: java.net.InetAddress getAddress()>: 3
<java.lang.Double: int hashCode()>: 3
<java.io.File: boolean mkdirs()>: 3
<java.io.Reader: int read(char[],int,int)>: 3
<java.io.IOException: void <init>()>: 2
<java.io.File: boolean isDirectory()>: 2
<java.io.FileOutputStream: void <init>(java.io.File,boolean)>: 2
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.nio.charset.Charset)>: 2
<java.io.File: boolean mkdir()>: 2
<java.lang.Long: boolean equals(java.lang.Object)>: 2
<com.google.common.base.Optional: boolean equals(java.lang.Object)>: 2
<com.crunchyroll.manga.api.model.Book: boolean equals(java.lang.Object)>: 2
<java.io.File: boolean renameTo(java.io.File)>: 2
<android.net.NetworkInfo: int getType()>: 2
<java.io.Writer: void write(java.lang.String)>: 2
<java.io.Writer: void close()>: 2
<java.io.BufferedWriter: void <init>(java.io.Writer)>: 2
<android.graphics.Bitmap: void recycle()>: 1
<java.io.FileInputStream: void <init>(java.io.File)>: 1
<java.net.URL: java.lang.String getHost()>: 1
<java.io.File: long length()>: 1
<java.io.ByteArrayOutputStream: java.lang.String toString()>: 1
<android.net.ConnectivityManager: android.net.NetworkInfo getNetworkInfo(int)>: 1
<java.nio.charset.Charset: boolean equals(java.lang.Object)>: 1
<java.io.ByteArrayOutputStream: void <init>(int)>: 1
<java.io.FileInputStream: void close()>: 1
<android.graphics.drawable.BitmapDrawable: void <init>()>: 1
<java.io.File: boolean createNewFile()>: 1
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)>: 1
<java.io.File: boolean canWrite()>: 1
<java.io.Writer: void flush()>: 1
<java.io.File: boolean canRead()>: 1
<java.net.URL: java.lang.String getQuery()>: 1
<java.io.PrintStream: void println(java.lang.String)>: 1
<com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache: void close()>: 1
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>: 1
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>: 1
<java.io.InputStream: int read(byte[],int,int)>: 1
<java.io.FileOutputStream: void <init>(java.io.File)>: 1
<android.net.NetworkInfo: boolean isConnected()>: 1
<android.os.ParcelFileDescriptor: void close()>: 1
<java.io.File: java.lang.String getAbsolutePath()>: 1
<com.crunchyroll.manga.api.model.Book: int hashCode()>: 1
<java.io.ByteArrayOutputStream: void write(byte[],int,int)>: 1
<java.io.EOFException: void <init>()>: 1
----------------StartWorker----------------
<java.lang.String: boolean equals(java.lang.Object)>: 56
<java.io.File: boolean exists()>: 35
<java.lang.Object: java.lang.String toString()>: 30
<java.io.BufferedOutputStream: void <init>(java.io.OutputStream,int)>: 20
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>: 20
<java.io.IOException: void <init>(java.lang.String)>: 20
<java.io.File: boolean delete()>: 20
<java.io.File: java.lang.String getAbsolutePath()>: 20
<java.io.ByteArrayOutputStream: byte[] toByteArray()>: 17
<java.net.HttpURLConnection: int getResponseCode()>: 17
<java.io.ByteArrayOutputStream: void <init>()>: 17
<java.io.File: void <init>(java.io.File,java.lang.String)>: 16
<java.io.File: void <init>(java.lang.String)>: 16
<java.io.File: boolean renameTo(java.io.File)>: 15
<android.graphics.Bitmap: void recycle()>: 15
<java.io.File: long length()>: 15
<android.graphics.Bitmap: int getHeight()>: 15
<java.io.InputStream: int read(byte[],int,int)>: 15
<java.io.FileOutputStream: void <init>(java.io.File)>: 15
<android.graphics.BitmapFactory$Options: void <init>()>: 13
<java.net.URL: void <init>(java.lang.String)>: 13
<java.net.URL: java.net.URLConnection openConnection()>: 13
<java.net.URLConnection: java.lang.String getHeaderField(java.lang.String)>: 12
<java.net.URLConnection: void setConnectTimeout(int)>: 12
<java.io.Closeable: void close()>: 11
<java.io.InputStream: void close()>: 11
<java.io.InputStream: void reset()>: 10
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)>: 10
<java.io.Writer: void write(java.lang.String)>: 10
<java.io.ByteArrayInputStream: void <init>(byte[])>: 10
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>: 10
<android.graphics.Bitmap: int getWidth()>: 10
<java.io.Writer: void flush()>: 10
<java.io.BufferedInputStream: void <init>(java.io.InputStream,int)>: 10
<java.io.File: boolean mkdirs()>: 10
<java.lang.Object: int hashCode()>: 9
<java.io.InputStream: int read(byte[])>: 7
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>: 7
<java.io.Reader: int read()>: 7
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>: 7
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>: 7
<java.io.ByteArrayOutputStream: void write(byte[],int,int)>: 7
<java.net.HttpURLConnection: void setInstanceFollowRedirects(boolean)>: 7
<java.io.StringReader: void <init>(java.lang.String)>: 7
<java.net.URLConnection: void setUseCaches(boolean)>: 7
<java.io.Reader: int read(char[],int,int)>: 7
<java.io.FileInputStream: void <init>(java.io.File)>: 6
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>: 6
<com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache$2: void <init>()>: 6
<java.net.URLConnection: java.io.InputStream getInputStream()>: 6
<java.io.OutputStream: void <init>()>: 6
<android.net.Uri: android.net.Uri parse(java.lang.String)>: 5
<java.io.IOException: void <init>()>: 5
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>: 5
<java.io.FilterOutputStream: void <init>(java.io.OutputStream)>: 5
<java.io.OutputStream: void write(byte[],int,int)>: 5
<java.net.URLConnection: void setReadTimeout(int)>: 5
<com.nostra13.universalimageloader.cache.disc.impl.ext.DiskLruCache$Snapshot: void close()>: 5
<java.io.InputStream: void <init>()>: 5
<java.io.OutputStream: void flush()>: 5
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>: 5
<com.nostra13.universalimageloader.core.assist.FlushedInputStream: void <init>(java.io.InputStream)>: 5
<java.lang.String: int hashCode()>: 5
<java.io.FileInputStream: void <init>(java.lang.String)>: 5
<android.graphics.Bitmap: boolean isRecycled()>: 5
<android.graphics.Bitmap: int getRowBytes()>: 5
<java.net.HttpURLConnection: java.io.InputStream getErrorStream()>: 5
<java.io.FilterInputStream: void <init>(java.io.InputStream)>: 5
<java.net.URLConnection: int getContentLength()>: 5
<java.io.InputStream: int available()>: 5
<java.io.FileInputStream: int read(byte[],int,int)>: 1
<java.io.BufferedInputStream: void <init>(java.io.InputStream)>: 1
<java.lang.Enum: boolean equals(java.lang.Object)>: 1
<java.io.BufferedInputStream: void close()>: 1
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>: 1
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>: 1
<java.io.RandomAccessFile: long length()>: 1
<java.io.RandomAccessFile: void close()>: 1
<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>: 1
