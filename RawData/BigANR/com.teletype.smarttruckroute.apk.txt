Duration => 1914
UI Thread => 1362
Worker Thread => 971

----------------StartUI----------------
<android.database.Cursor: void close()>: 132
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>: 122
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>: 116
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>: 93
<android.database.MatrixCursor: void <init>(java.lang.String[])>: 86
<android.database.MatrixCursor: void addRow(java.lang.Object[])>: 86
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>: 72
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>: 72
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>: 72
<android.database.sqlite.SQLiteDatabase: void endTransaction()>: 72
<android.database.sqlite.SQLiteOpenHelper: void close()>: 70
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 64
<java.lang.String: boolean equals(java.lang.Object)>: 36
<android.database.Cursor: boolean isNull(int)>: 19
<android.database.Cursor: java.lang.String getString(int)>: 19
<android.database.Cursor: long getLong(int)>: 19
<android.database.Cursor: int getInt(int)>: 19
<android.database.Cursor: double getDouble(int)>: 18
<android.database.Cursor: boolean moveToNext()>: 13
<android.graphics.Bitmap: void recycle()>: 12
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>: 12
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>: 12
<android.database.Cursor: float getFloat(int)>: 12
<java.lang.Boolean: boolean equals(java.lang.Object)>: 12
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>: 11
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)>: 10
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)>: 7
<android.database.Cursor: boolean moveToFirst()>: 7
<android.net.Uri: android.net.Uri parse(java.lang.String)>: 6
<android.net.ConnectivityManager: android.net.NetworkInfo getActiveNetworkInfo()>: 6
<com.google.android.gms.maps.model.LatLng: boolean equals(java.lang.Object)>: 6
<android.net.NetworkInfo: boolean isConnected()>: 6
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>: 6
<java.lang.String: int hashCode()>: 4
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>: 3
<com.teletype.smarttruckroute.nd: int hashCode()>: 3
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>: 3
<java.io.OutputStream: void close()>: 2
<android.net.Uri$Builder: android.net.Uri build()>: 2
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>: 2
<java.net.Socket: void close()>: 2
<com.teletype.a.b.a.d: void close()>: 2
<com.teletype.smarttruckroute.or: int hashCode()>: 1
<android.net.wifi.WifiManager: android.net.wifi.WifiInfo getConnectionInfo()>: 1
<com.teletype.smarttruckroute.nt: boolean equals(java.lang.Object)>: 1
<java.lang.Integer: boolean equals(java.lang.Object)>: 1
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>: 1
<com.teletype.smarttruckroute.nd: boolean equals(java.lang.Object)>: 1
<android.graphics.Bitmap: boolean isMutable()>: 1
<com.teletype.smarttruckroute.ol: int hashCode()>: 1
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>: 1
<java.util.Formatter: void close()>: 1
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>: 1
<android.graphics.Bitmap: boolean isRecycled()>: 1
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>: 1
<com.google.android.gms.maps.model.Marker: boolean equals(java.lang.Object)>: 1
----------------StartWorker----------------
<java.lang.String: boolean equals(java.lang.Object)>: 44
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>: 35
<android.database.sqlite.SQLiteOpenHelper: void close()>: 30
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 29
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>: 23
<android.database.sqlite.SQLiteDatabase: void beginTransaction()>: 23
<android.database.sqlite.SQLiteDatabase: void endTransaction()>: 23
<android.database.Cursor: void close()>: 19
<android.graphics.Bitmap: void recycle()>: 18
<java.io.File: java.lang.String getPath()>: 18
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteStatement compileStatement(java.lang.String)>: 17
<android.database.sqlite.SQLiteProgram: void clearBindings()>: 17
<android.database.sqlite.SQLiteStatement: long executeInsert()>: 17
<java.io.File: boolean isDirectory()>: 12
<java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>: 12
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getReadableDatabase()>: 12
<java.io.FileOutputStream: void <init>(java.lang.String)>: 12
<java.io.OutputStream: void flush()>: 12
<android.database.sqlite.SQLiteProgram: void bindDouble(int,double)>: 12
<android.graphics.Bitmap: int getHeight()>: 12
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String)>: 12
<android.graphics.Bitmap: int getWidth()>: 12
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>: 12
<android.database.sqlite.SQLiteProgram: void bindLong(int,long)>: 12
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])>: 12
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResource(android.content.res.Resources,int)>: 12
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>: 12
<java.io.File: void <init>(java.lang.String)>: 12
<java.io.File: boolean mkdirs()>: 12
<java.io.BufferedReader: void <init>(java.io.Reader,int)>: 11
<java.io.OutputStream: void close()>: 11
<java.io.FileOutputStream: void write(byte[],int,int)>: 11
<android.net.Uri$Builder: android.net.Uri build()>: 11
<java.io.InputStream: void close()>: 11
<java.net.URL: void <init>(java.lang.String)>: 11
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream,java.lang.String)>: 11
<java.util.zip.GZIPInputStream: void <init>(java.io.InputStream)>: 11
<java.net.URL: java.lang.String toString()>: 11
<java.net.URLConnection: void setDoOutput(boolean)>: 11
<java.net.URLConnection: void setReadTimeout(int)>: 11
<java.io.BufferedWriter: void close()>: 11
<java.net.URL: java.net.URLConnection openConnection()>: 11
<java.net.HttpURLConnection: java.lang.String getResponseMessage()>: 11
<java.io.InputStreamReader: void <init>(java.io.InputStream)>: 11
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>: 11
<android.graphics.Bitmap: boolean isMutable()>: 11
<java.net.URLConnection: java.io.InputStream getInputStream()>: 11
<java.io.Writer: void write(java.lang.String)>: 11
<java.io.BufferedWriter: void <init>(java.io.Writer)>: 11
<java.io.BufferedReader: java.lang.String readLine()>: 11
<java.net.URLConnection: java.io.OutputStream getOutputStream()>: 11
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>: 11
<java.io.BufferedReader: void close()>: 11
<java.net.URLConnection: void setConnectTimeout(int)>: 11
<java.net.HttpURLConnection: int getResponseCode()>: 11
<java.net.URLConnection: void setDoInput(boolean)>: 11
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>: 11
<android.database.sqlite.SQLiteProgram: void bindString(int,java.lang.String)>: 11
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>: 11
<java.util.zip.GZIPInputStream: int read(byte[],int,int)>: 11
<java.io.FileOutputStream: void close()>: 11
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>: 11
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(android.graphics.Bitmap,int,int,int,int,android.graphics.Matrix,boolean)>: 6
<android.net.Uri$Builder: android.net.Uri$Builder path(java.lang.String)>: 6
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>: 6
<com.google.android.gms.maps.model.LatLng: boolean equals(java.lang.Object)>: 6
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>: 6
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>: 6
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>: 6
<android.net.Uri$Builder: void <init>()>: 6
<java.io.File: java.io.File[] listFiles()>: 6
<java.io.File: boolean delete()>: 6
<android.net.Uri: android.net.Uri parse(java.lang.String)>: 5
<com.teletype.smarttruckroute.nt: boolean equals(java.lang.Object)>: 5
<android.net.Uri$Builder: android.net.Uri$Builder encodedQuery(java.lang.String)>: 5
<android.database.DatabaseUtils: long queryNumEntries(android.database.sqlite.SQLiteDatabase,java.lang.String)>: 5
<android.graphics.Bitmap: boolean isRecycled()>: 5
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>: 5
<android.database.AbstractCursor: void close()>: 1
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String,java.lang.String,java.lang.String,java.lang.String)>: 1
<android.database.Cursor: java.lang.String getString(int)>: 1
<java.io.OutputStream: void write(byte[])>: 1
<android.database.MatrixCursor: void <init>(java.lang.String[])>: 1
<java.net.Socket: void setSoTimeout(int)>: 1
<android.database.Cursor: boolean moveToNext()>: 1
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>: 1
<java.net.Socket: java.io.OutputStream getOutputStream()>: 1
<java.net.Socket: void connect(java.net.SocketAddress)>: 1
<java.net.Socket: void <init>()>: 1
<android.database.MatrixCursor: void addRow(java.lang.Object[])>: 1
<android.database.Cursor: float getFloat(int)>: 1
