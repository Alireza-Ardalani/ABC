Duration => 3004
UI Thread => 451
Worker Thread => 0

----------------StartUI----------------
<java.lang.String: boolean equals(java.lang.Object)>: 105
<java.lang.Object: java.lang.String toString()>: 78
<java.io.IOException: void <init>(java.lang.String)>: 32
<java.lang.Object: boolean equals(java.lang.Object)>: 31
<de.greenrobot.dao.DaoException: void <init>(java.lang.String)>: 19
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.lang.String)>: 13
<java.lang.String: int hashCode()>: 12
<java.lang.Long: boolean equals(java.lang.Object)>: 10
<com.fasterxml.jackson.databind.JsonMappingException: void <init>(java.lang.String,java.lang.Throwable)>: 6
<java.io.InputStream: void close()>: 5
<com.fasterxml.jackson.databind.JavaType: boolean equals(java.lang.Object)>: 5
<android.net.Uri: android.net.Uri parse(java.lang.String)>: 4
<com.fasterxml.jackson.databind.JavaType: int hashCode()>: 4
<org.joda.time.DateTimeZone: boolean equals(java.lang.Object)>: 4
<java.io.DataInput: int readUnsignedByte()>: 4
<android.net.Uri$Builder: android.net.Uri build()>: 3
<java.io.OutputStream: void write(byte[],int,int)>: 3
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>: 3
<com.fasterxml.jackson.core.JsonGenerationException: void <init>(java.lang.String)>: 3
<java.io.InputStream: int read(byte[],int,int)>: 3
<java.io.CharConversionException: void <init>(java.lang.String)>: 3
<android.database.SQLException: void <init>(java.lang.String)>: 3
<java.lang.Object: int hashCode()>: 3
<java.io.DataInput: java.lang.String readUTF()>: 3
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>: 2
<com.fasterxml.jackson.core.util.ByteArrayBuilder: void <init>()>: 2
<org.joda.time.LocalDate: boolean equals(java.lang.Object)>: 2
<java.net.URL: void <init>(java.lang.String)>: 2
<android.graphics.Typeface: boolean equals(java.lang.Object)>: 2
<java.lang.Integer: boolean equals(java.lang.Object)>: 2
<java.io.OutputStream: void write(byte[])>: 2
<java.io.InputStream: void <init>()>: 2
<java.net.URI: java.net.URI create(java.lang.String)>: 2
<java.net.InetAddress: java.lang.String toString()>: 2
<java.io.OutputStream: void <init>()>: 2
<java.io.DataInput: boolean readBoolean()>: 2
<com.fasterxml.jackson.databind.introspect.MemberKey: boolean equals(java.lang.Object)>: 2
<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: int hashCode()>: 2
<java.util.Locale: boolean equals(java.lang.Object)>: 2
<android.database.Cursor: void close()>: 2
<java.io.DataInputStream: void <init>(java.io.InputStream)>: 2
<com.fasterxml.jackson.core.sym.Name: int hashCode()>: 2
<java.io.File: void <init>(java.lang.String)>: 2
<com.fasterxml.jackson.core.base.ParserBase: void close()>: 2
<android.database.sqlite.SQLiteOpenHelper: android.database.sqlite.SQLiteDatabase getWritableDatabase()>: 1
<java.io.OutputStream: void close()>: 1
<java.net.InetSocketAddress: java.lang.String getHostName()>: 1
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)>: 1
<java.io.Closeable: void close()>: 1
<java.io.OutputStreamWriter: void close()>: 1
<java.io.InputStream: int read(byte[])>: 1
<java.math.BigInteger: int hashCode()>: 1
<java.io.ByteArrayInputStream: void <init>(byte[],int,int)>: 1
<java.net.URLConnection: void setDoOutput(boolean)>: 1
<java.io.Reader: void <init>()>: 1
<java.io.File: java.lang.String getName()>: 1
<java.net.URL: java.net.URLConnection openConnection()>: 1
<java.io.Reader: void close()>: 1
<java.nio.charset.Charset: java.nio.charset.Charset forName(java.lang.String)>: 1
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)>: 1
<java.lang.Enum: boolean equals(java.lang.Object)>: 1
<java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>: 1
<java.io.DataInput: int readUnsignedShort()>: 1
<java.io.DataInputStream: int readUnsignedShort()>: 1
<org.joda.time.tz.DateTimeZoneBuilder$DSTZone: boolean equals(java.lang.Object)>: 1
<java.io.Writer: void write(java.lang.String)>: 1
<java.net.InetSocketAddress: int getPort()>: 1
<java.io.DataInput: int readInt()>: 1
<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>: 1
<java.io.FilterInputStream: void close()>: 1
<java.io.DataInput: long readLong()>: 1
<java.net.URLConnection: java.io.OutputStream getOutputStream()>: 1
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>: 1
<org.joda.time.base.AbstractPartial: boolean equals(java.lang.Object)>: 1
<java.net.InetSocketAddress: void <init>(java.lang.String,int)>: 1
<java.net.URLConnection: void setConnectTimeout(int)>: 1
<java.net.HttpURLConnection: int getResponseCode()>: 1
<com.fasterxml.jackson.core.JsonProcessingException: void <init>(java.lang.String)>: 1
<java.io.DataInput: byte readByte()>: 1
<com.fasterxml.jackson.databind.PropertyName: boolean equals(java.lang.Object)>: 1
<com.fasterxml.jackson.databind.deser.UnresolvedForwardReference: void <init>(java.lang.String)>: 1
<com.fasterxml.jackson.databind.util.TokenBuffer: void close()>: 1
<java.io.DataInputStream: java.lang.String readUTF()>: 1
<java.net.URLConnection: void setRequestProperty(java.lang.String,java.lang.String)>: 1
<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>: 1
<org.joda.time.tz.DateTimeZoneBuilder$OfYear: boolean equals(java.lang.Object)>: 1
<java.net.InetSocketAddress: java.net.InetAddress getAddress()>: 1
<java.io.File: java.io.File getParentFile()>: 1
<java.io.PrintStream: void println(java.lang.String)>: 1
<java.lang.Double: int hashCode()>: 1
<com.fasterxml.jackson.core.JsonProcessingException: void <init>(java.lang.String,java.lang.Throwable)>: 1
<com.fasterxml.jackson.databind.ser.SerializerCache$TypeKey: boolean equals(java.lang.Object)>: 1
<com.fasterxml.jackson.core.JsonParser: void close()>: 1
<org.joda.time.tz.DateTimeZoneBuilder$Recurrence: boolean equals(java.lang.Object)>: 1
<java.io.Reader: int read(char[],int,int)>: 1
<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>: 1
----------------StartWorker----------------
