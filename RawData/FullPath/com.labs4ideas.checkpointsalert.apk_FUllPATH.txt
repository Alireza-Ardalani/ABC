<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> $b0 = $d0 cmpl 0.0
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> if $b0 == 0 goto $r4 = r0.<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsView mapsView>
<com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService: void addBlitz(com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService$AddBlitzCallback,com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> r0 := @this: com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService
<retrofit2.Retrofit: java.lang.Object create(java.lang.Class)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.Retrofit: void eagerlyValidateMethods(java.lang.Class)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.Retrofit: retrofit2.ServiceMethod loadServiceMethod(java.lang.reflect.Method)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.ServiceMethod$Builder: retrofit2.ServiceMethod build()> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: void parseMethodAnnotation(java.lang.'annotation'.Annotation)> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])> --> $r5 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)
--------------------------------------------------------

<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> $d1 = virtualinvoke $r3.<android.location.Location: double getLongitude()>()
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> $b0 = $d1 cmpl 0.0
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> if $b0 == 0 goto $r4 = r0.<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsView mapsView>
<com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService: void getLitzBlitz(com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService$MapsCallback,android.location.Location,java.lang.String,double)> --> r0 := @this: com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService
<com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitConsumer: void <init>()> --> r0 := @this: com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitConsumer
<com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitFactory: retrofit2.Retrofit create(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)> --> r0 := @this: retrofit2.Retrofit$Builder
<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)> --> $r2 := @parameter0: java.lang.String
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)> --> r0 := @this: okhttp3.HttpUrl$Builder
<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)> --> $r0 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.lang.String canonicalizeHost(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> --> $r1 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> --> $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r2)
--------------------------------------------------------

<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> $b0 = $d0 cmpl 0.0
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> if $b0 == 0 goto $r4 = r0.<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsView mapsView>
<com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService: void addBlitz(com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService$AddBlitzCallback,com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> r0 := @this: com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService
<com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitConsumer: void <init>()> --> r0 := @this: com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitConsumer
<com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitFactory: retrofit2.Retrofit create(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)> --> r0 := @this: retrofit2.Retrofit$Builder
<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)> --> $r2 := @parameter0: java.lang.String
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)> --> r0 := @this: okhttp3.HttpUrl$Builder
<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)> --> $r0 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.lang.String canonicalizeHost(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> --> $r1 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> --> $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r2)
--------------------------------------------------------

<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> $d1 = virtualinvoke $r3.<android.location.Location: double getLatitude()>()
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> $b0 = $d1 cmpl 0.0
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> if $b0 == 0 goto $r4 = r0.<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsView mapsView>
<com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService: void getLitzBlitz(com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService$MapsCallback,android.location.Location,java.lang.String,double)> --> r0 := @this: com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService
<com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitConsumer: void <init>()> --> r0 := @this: com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitConsumer
<com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitFactory: retrofit2.Retrofit create(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)> --> r0 := @this: retrofit2.Retrofit$Builder
<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)> --> $r2 := @parameter0: java.lang.String
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)> --> r0 := @this: okhttp3.HttpUrl$Builder
<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)> --> $r0 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.lang.String canonicalizeHost(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> --> $r1 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> --> $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r2)
--------------------------------------------------------

<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> $d1 = virtualinvoke $r3.<android.location.Location: double getLatitude()>()
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> $b0 = $d1 cmpl 0.0
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> if $b0 == 0 goto $r4 = r0.<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsView mapsView>
<com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService: void getLitzBlitz(com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService$MapsCallback,android.location.Location,java.lang.String,double)> --> r0 := @this: com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService
<retrofit2.Retrofit: java.lang.Object create(java.lang.Class)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.Retrofit: void eagerlyValidateMethods(java.lang.Class)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.Retrofit: retrofit2.ServiceMethod loadServiceMethod(java.lang.reflect.Method)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.ServiceMethod$Builder: retrofit2.ServiceMethod build()> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: void parseMethodAnnotation(java.lang.'annotation'.Annotation)> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])> --> $r5 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)
--------------------------------------------------------

<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> $d1 = virtualinvoke $r3.<android.location.Location: double getLongitude()>()
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> $b0 = $d1 cmpl 0.0
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void getBlitzAll(android.location.Location,java.lang.String,double)> --> if $b0 == 0 goto $r4 = r0.<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsView mapsView>
<com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService: void getLitzBlitz(com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService$MapsCallback,android.location.Location,java.lang.String,double)> --> r0 := @this: com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService
<retrofit2.Retrofit: java.lang.Object create(java.lang.Class)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.Retrofit: void eagerlyValidateMethods(java.lang.Class)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.Retrofit: retrofit2.ServiceMethod loadServiceMethod(java.lang.reflect.Method)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.ServiceMethod$Builder: retrofit2.ServiceMethod build()> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: void parseMethodAnnotation(java.lang.'annotation'.Annotation)> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])> --> $r5 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)
--------------------------------------------------------

<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> $b0 = $d0 cmpl 0.0
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> if $b0 == 0 goto $r4 = r0.<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsView mapsView>
<com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService: void addBlitz(com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService$AddBlitzCallback,com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> r0 := @this: com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService
<retrofit2.Retrofit: java.lang.Object create(java.lang.Class)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.Retrofit: void eagerlyValidateMethods(java.lang.Class)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.Retrofit: retrofit2.ServiceMethod loadServiceMethod(java.lang.reflect.Method)> --> r0 := @this: retrofit2.Retrofit
<retrofit2.ServiceMethod$Builder: retrofit2.ServiceMethod build()> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: void parseMethodAnnotation(java.lang.'annotation'.Annotation)> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])> --> r0 := @this: retrofit2.ServiceMethod$Builder
<retrofit2.ServiceMethod$Builder: okhttp3.Headers parseHeaders(java.lang.String[])> --> $r5 = staticinvoke <okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)>($r2)
--------------------------------------------------------

<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> $b0 = $d0 cmpl 0.0
<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: void addNewBlitz(com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> if $b0 == 0 goto $r4 = r0.<com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsPresenter: com.labs4ideas.checkpointsalert.features.mapsBlitz.MapsView mapsView>
<com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService: void addBlitz(com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService$AddBlitzCallback,com.google.android.gms.maps.model.LatLng,android.location.Location,java.lang.String)> --> r0 := @this: com.labs4ideas.checkpointsalert.features.mapsBlitz.request.MapsBlitzService
<com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitConsumer: void <init>()> --> r0 := @this: com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitConsumer
<com.labs4ideas.checkpointsalert.commons.retrofit.RetrofitFactory: retrofit2.Retrofit create(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<retrofit2.Retrofit$Builder: retrofit2.Retrofit$Builder baseUrl(java.lang.String)> --> r0 := @this: retrofit2.Retrofit$Builder
<okhttp3.HttpUrl: okhttp3.HttpUrl parse(java.lang.String)> --> $r2 := @parameter0: java.lang.String
<okhttp3.HttpUrl$Builder: okhttp3.HttpUrl$Builder$ParseResult parse(okhttp3.HttpUrl,java.lang.String)> --> r0 := @this: okhttp3.HttpUrl$Builder
<okhttp3.HttpUrl$Builder: java.lang.String canonicalizeHost(java.lang.String,int,int)> --> $r0 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.lang.String canonicalizeHost(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> --> $r1 := @parameter0: java.lang.String
<okhttp3.internal.Util: java.net.InetAddress decodeIpv6(java.lang.String,int,int)> --> $r3 = staticinvoke <java.net.InetAddress: java.net.InetAddress getByAddress(byte[])>($r2)
--------------------------------------------------------

