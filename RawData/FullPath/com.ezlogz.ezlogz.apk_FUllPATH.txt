<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection$1
<com.github.faucamp.simplertmp.io.RtmpConnection: void access$000(com.github.faucamp.simplertmp.io.RtmpConnection)> --> $r0 := @parameter0: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxPacketLoop()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxInvoke(com.github.faucamp.simplertmp.packets.Command)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handshake(java.io.InputStream,java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.Handshake: void writeC0(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Handshake
<com.github.faucamp.simplertmp.packets.Handshake: void writeC0(java.io.OutputStream)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Handshake", "writeC0")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void dt(java.lang.String,java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.log: void dt(java.lang.String,java.lang.String,java.lang.Object[])> --> $r3 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>($r1, $r2)
<com.ezlogz.ezlogz.common.log: void dt(java.lang.String,java.lang.String,java.lang.Object[])> --> $r4 := @caughtexception
<com.ezlogz.ezlogz.common.log: void wt(java.lang.String,java.lang.Throwable)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.log: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)> --> $i0 := @parameter0: int
<com.ezlogz.ezlogz.common.log: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)> --> staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($i0, $r0, $r2)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1: void run()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1
<com.twitter.sdk.android.core.DefaultLogger: void d(java.lang.String,java.lang.String)> --> r0 := @this: com.twitter.sdk.android.core.DefaultLogger
<com.twitter.sdk.android.core.DefaultLogger: void d(java.lang.String,java.lang.String,java.lang.Throwable)> --> r0 := @this: com.twitter.sdk.android.core.DefaultLogger
<com.twitter.sdk.android.core.DefaultLogger: void d(java.lang.String,java.lang.String,java.lang.Throwable)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("Twitter", $r2, $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "closeStream(): setting current stream ID to 0")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.Connection$Method: void <clinit>()> --> nop
<org.jsoup.Connection$Method: void <clinit>()> --> <org.jsoup.Connection$Method: org.jsoup.Connection$Method HEAD> = $r0
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r18 = <org.jsoup.Connection$Method: org.jsoup.Connection$Method HEAD>
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r22 := @caughtexception
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1: void run()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: com.twitter.sdk.android.core.internal.AdvertisingInfo access$000(com.twitter.sdk.android.core.internal.AdvertisingInfoProvider)> --> $r1 := @parameter0: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: com.twitter.sdk.android.core.internal.AdvertisingInfo getAdvertisingInfoFromStrategies()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: com.twitter.sdk.android.core.internal.AdvertisingInfo getAdvertisingInfoFromStrategies()> --> $r1 = specialinvoke r0.<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: com.twitter.sdk.android.core.internal.AdvertisingInfoStrategy getServiceStrategy()>()
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: com.twitter.sdk.android.core.internal.AdvertisingInfo getAdvertisingInfo()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: boolean isGooglePlayServiceAvailable(android.content.Context)> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: com.twitter.sdk.android.core.internal.AdvertisingInfo getAdvertisingInfo()> --> $z0 = virtualinvoke r0.<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: boolean isGooglePlayServiceAvailable(android.content.Context)>($r1)
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: java.lang.String getAdvertisingId()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: java.lang.Object getInfo()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: java.lang.Object getInfo()> --> $r6 = r0.<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: android.content.Context context>
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: java.lang.Object getInfo()> --> $r2 := @caughtexception
<com.twitter.sdk.android.core.DefaultLogger: void w(java.lang.String,java.lang.String)> --> r0 := @this: com.twitter.sdk.android.core.DefaultLogger
<com.twitter.sdk.android.core.DefaultLogger: void w(java.lang.String,java.lang.String,java.lang.Throwable)> --> r0 := @this: com.twitter.sdk.android.core.DefaultLogger
<com.twitter.sdk.android.core.DefaultLogger: void w(java.lang.String,java.lang.String,java.lang.Throwable)> --> staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Twitter", $r2, $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r19 = virtualinvoke $r7.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Data: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Data
<com.github.faucamp.simplertmp.packets.VariableBodyRtmpPacket: void writeVariableData(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.VariableBodyRtmpPacket
<com.github.faucamp.simplertmp.amf.AmfNull: void writeNullTo(java.io.OutputStream)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfNull: void writeNullTo(java.io.OutputStream)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: java.lang.String encodeUrl(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: java.net.URL encodeUrl(java.net.URL)> --> $r0 := @parameter0: java.net.URL
<org.jsoup.helper.HttpConnection: java.net.URL encodeUrl(java.net.URL)> --> specialinvoke $r9.<java.net.URL: void <init>(java.lang.String)>($r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.pedro.encoder.video.VideoEncoder$2: void run()> --> r0 := @this: com.pedro.encoder.video.VideoEncoder$2
<com.pedro.rtplibrary.base.Camera1Base: void getH264Data(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)> --> r0 := @this: com.pedro.rtplibrary.base.Camera1Base
<com.pedro.rtplibrary.rtmp.RtmpCamera1: void getH264DataRtp(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)> --> r0 := @this: com.pedro.rtplibrary.rtmp.RtmpCamera1
<net.ossrs.rtmp.SrsFlvMuxer: void sendVideo(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer$SrsFlv: void writeVideoSample(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$SrsFlv
<net.ossrs.rtmp.SrsFlvMuxer$SrsRawH264Stream: net.ossrs.rtmp.SrsFlvMuxer$SrsFlvFrameBytes demuxAnnexb(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo,boolean)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$SrsRawH264Stream
<net.ossrs.rtmp.SrsFlvMuxer$SrsRawH264Stream: net.ossrs.rtmp.SrsFlvMuxer$SrsFlvFrameBytes demuxAnnexb(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo,boolean)> --> staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SrsFlvMuxer", "annexb not match.")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r3 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r3, "UTF-8")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: void setLastGlobalDownLogDate(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastGlobalDownLogDate(java.util.Date)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("GLOBAL_LOG_DOWN_DATE", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> $r10 = virtualinvoke $r6.<java.net.Socket: java.io.OutputStream getOutputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<com.ezlogz.ezlogz.ui.community.streams.PedroActivity: void onConnectionFailedRtmp()> --> r0 := @this: com.ezlogz.ezlogz.ui.community.streams.PedroActivity
<com.ezlogz.ezlogz.ui.community.streams.PedroActivity$4: void run()> --> r0 := @this: com.ezlogz.ezlogz.ui.community.streams.PedroActivity$4
<com.pedro.rtplibrary.base.Camera1Base: void stopStream()> --> r0 := @this: com.pedro.rtplibrary.base.Camera1Base
<com.pedro.encoder.audio.AudioEncoder: void stop()> --> r0 := @this: com.pedro.encoder.audio.AudioEncoder
<com.pedro.encoder.audio.AudioEncoder: void stop()> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, "AudioEncoder stopped")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "connect(): socket connection established, doing handhake...")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r0, "Time to write DOWN Log")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void shutdown(boolean)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void shutdown(boolean)> --> virtualinvoke $r2.<java.net.Socket: void close()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void onLocationChanged(android.location.Location)> --> $r9 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setLastLocation(android.location.Location)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastLocation(android.location.Location)> --> $r5 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("KEY_LAST_LOCATION", $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.UserControl: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.UserControl
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt16(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt16(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.utils.U: void checkNewInFleetLogic()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setInFleet(com.ezlogz.ezlogz.entity.enums.EInFleetType)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setInFleet(com.ezlogz.ezlogz.entity.enums.EInFleetType)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("key_account_infleet_new", $i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection$1
<com.github.faucamp.simplertmp.io.RtmpConnection: void access$000(com.github.faucamp.simplertmp.io.RtmpConnection)> --> $r0 := @parameter0: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxPacketLoop()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxInvoke(com.github.faucamp.simplertmp.packets.Command)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handshake(java.io.InputStream,java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.Handshake: void writeC1(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Handshake
<com.github.faucamp.simplertmp.packets.Handshake: void writeC1(java.io.OutputStream)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Handshake", "writeC1")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.pedro.encoder.video.VideoEncoder$1: void run()> --> r0 := @this: com.pedro.encoder.video.VideoEncoder$1
<com.pedro.encoder.video.VideoEncoder$1: void run()> --> staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, "Unsupported imageFormat")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.RtmpHeader: void writeTo(java.io.OutputStream,com.github.faucamp.simplertmp.packets.RtmpHeader$ChunkType,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpHeader
<com.github.faucamp.simplertmp.packets.RtmpHeader: void writeTo(java.io.OutputStream,com.github.faucamp.simplertmp.packets.RtmpHeader$ChunkType,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setDeltaWithUptime(long)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setDeltaWithUptime(long)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("key_d_pt_ut", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r8 = virtualinvoke $r7.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.WindowAckSize: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.WindowAckSize
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.MainActivity: void checkAppPermission()> --> $r1 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: boolean getFirstOpenAfterLogin()> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: boolean getFirstOpenAfterLogin()> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("key_first_open_after_login", 0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<com.ezlogz.ezlogz.ui.community.streams.PedroActivity: void onConnectionFailedRtmp()> --> r0 := @this: com.ezlogz.ezlogz.ui.community.streams.PedroActivity
<com.ezlogz.ezlogz.ui.community.streams.PedroActivity$4: void run()> --> r0 := @this: com.ezlogz.ezlogz.ui.community.streams.PedroActivity$4
<com.pedro.rtplibrary.base.Camera1Base: void stopStream()> --> r0 := @this: com.pedro.rtplibrary.base.Camera1Base
<com.pedro.encoder.input.audio.MicrophoneManager: void stop()> --> r0 := @this: com.pedro.encoder.input.audio.MicrophoneManager
<com.pedro.encoder.input.audio.MicrophoneManager: void stop()> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MicrophoneManager", "Microphone stopped")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>($r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.services.fcm.FcmService: void setToken(java.lang.String)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setFcmToken(java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setFcmToken(java.lang.String)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("key_app_gcm", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", $r6)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r8 = virtualinvoke $r7.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r3 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r3, "UTF-8")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Data: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Data
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r2)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void shutdown(boolean)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void shutdown(boolean)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "socket closed")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void clear(com.ezlogz.ezlogz.entity.dao.DbLogDao)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.DbLogDao
<com.ezlogz.ezlogz.common.Settings: void setLastClearGlobalLogsDateTime(long)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastClearGlobalLogsDateTime(long)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("LAST_CLEAR_LOGS_TIME", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void connect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<io.reactivex.internal.observers.ConsumerSingleObserver: void onSuccess(java.lang.Object)> --> r0 := @this: io.reactivex.internal.observers.ConsumerSingleObserver
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$1: void accept(java.lang.Object)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$1
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: void lambda$checkAppVersion$2$CheckAppVersionRequest(com.ezlogz.ezlogz.application.activities.BaseActivity,java.lang.Boolean)> --> $r1 := @parameter0: com.ezlogz.ezlogz.application.activities.BaseActivity
<com.ezlogz.ezlogz.application.dialogs.SimpleDialog: com.ezlogz.ezlogz.application.dialogs.SimpleDialog newInstance(java.lang.String,java.lang.String,com.ezlogz.ezlogz.application.dialogs.ButtonDialog[])> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.application.dialogs.SimpleDialog: com.ezlogz.ezlogz.application.dialogs.SimpleDialog newInstance(java.lang.String,java.lang.String,com.ezlogz.ezlogz.application.dialogs.ButtonDialog[])> --> virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("B_MESSAGE_DIALOG_TITLE", $r0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: java.lang.String encodeUrl(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: java.lang.String encodeUrl(java.lang.String)> --> specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>($r0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setDeltaWithTrueTime(long)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setDeltaWithTrueTime(long)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("key_d_pt_tt", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)> --> specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r4)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.WindowAckSize: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.WindowAckSize
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> $r5 = virtualinvoke $r6.<java.net.Socket: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<io.reactivex.internal.observers.ConsumerSingleObserver: void onSuccess(java.lang.Object)> --> r0 := @this: io.reactivex.internal.observers.ConsumerSingleObserver
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$1: void accept(java.lang.Object)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$1
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: void lambda$onReceive$1$TimeMinuteTickReceiver(java.lang.Boolean)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver
<com.ezlogz.ezlogz.notify.Events: void post(java.lang.Object)> --> $r0 := @parameter0: java.lang.Object
<com.ezlogz.ezlogz.notify.ThreadSafeBus: void post(java.lang.Object)> --> r0 := @this: com.ezlogz.ezlogz.notify.ThreadSafeBus
<android.os.Handler: boolean post(java.lang.Runnable)> --> this := @this: android.os.Handler
<com.facebook.AccessTokenManager$1: void run()> --> r0 := @this: com.facebook.AccessTokenManager$1
<com.facebook.AccessTokenManager: void access$000(com.facebook.AccessTokenManager,com.facebook.AccessToken$AccessTokenRefreshCallback)> --> $r0 := @parameter0: com.facebook.AccessTokenManager
<com.facebook.AccessTokenManager: void refreshCurrentAccessTokenImpl(com.facebook.AccessToken$AccessTokenRefreshCallback)> --> r0 := @this: com.facebook.AccessTokenManager
<com.facebook.AccessTokenManager: com.facebook.GraphRequest createExtendAccessTokenRequest(com.facebook.AccessToken,com.facebook.GraphRequest$Callback)> --> $r0 := @parameter0: com.facebook.AccessToken
<com.facebook.AccessTokenManager: com.facebook.GraphRequest createExtendAccessTokenRequest(com.facebook.AccessToken,com.facebook.GraphRequest$Callback)> --> virtualinvoke $r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("grant_type", "fb_extend_sso_token")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r8 = virtualinvoke $r7.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "createStream(): Sending FCPublish command...")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Data: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Data
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1: void run()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void access$100(com.twitter.sdk.android.core.internal.AdvertisingInfoProvider,com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> $r0 := @parameter0: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void storeInfoToPreferences(com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void storeInfoToPreferences(com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> $r5 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("limit_ad_tracking_enabled", $z0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Command: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Command
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt16(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt16(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<io.reactivex.internal.observers.ConsumerSingleObserver: void onSuccess(java.lang.Object)> --> r0 := @this: io.reactivex.internal.observers.ConsumerSingleObserver
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$1: void accept(java.lang.Object)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$1
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: void lambda$checkAppVersion$2$CheckAppVersionRequest(com.ezlogz.ezlogz.application.activities.BaseActivity,java.lang.Boolean)> --> $r1 := @parameter0: com.ezlogz.ezlogz.application.activities.BaseActivity
<com.ezlogz.ezlogz.application.dialogs.SimpleDialog: com.ezlogz.ezlogz.application.dialogs.SimpleDialog newInstance(java.lang.String,java.lang.String,com.ezlogz.ezlogz.application.dialogs.ButtonDialog[])> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.application.dialogs.SimpleDialog: com.ezlogz.ezlogz.application.dialogs.SimpleDialog newInstance(java.lang.String,java.lang.String,com.ezlogz.ezlogz.application.dialogs.ButtonDialog[])> --> virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("B_MESSAGE_DIALOG", $r4)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)> --> $r5 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("KEY_LAST_LOCATION_WS", $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r5, $i2, $i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r5, $i2, $i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $i0 = virtualinvoke $r7.<java.net.HttpURLConnection: int getResponseCode()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Command: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Command
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r2)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SrsFlvMuxer", $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1: void run()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void access$100(com.twitter.sdk.android.core.internal.AdvertisingInfoProvider,com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> $r0 := @parameter0: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void storeInfoToPreferences(com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void storeInfoToPreferences(com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> $r5 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("advertising_id", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void connect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Command: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Command
<com.github.faucamp.simplertmp.amf.AmfNumber: void writeNumberTo(java.io.OutputStream,double)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfNumber: void writeNumberTo(java.io.OutputStream,double)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r3 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r3, "UTF-8")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void clear(com.ezlogz.ezlogz.entity.dao.DbLogDao)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.DbLogDao
<com.ezlogz.ezlogz.common.Settings: void setLastClearGlobalLogsDateTime(long)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastClearGlobalLogsDateTime(long)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("LAST_CLEAR_LOGS_TIME", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> if $r5 != null goto (branch)
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> if $r4 == null goto virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)>($r2)
<com.ezlogz.ezlogz.common.Settings: java.lang.String getShowingPlacesIn3MilesIdsJson()> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r7 = virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: java.lang.String getShowingPlacesIn3MilesIdsJson()>()
<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)>($r2)
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn3MilesIdsJson(java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn3MilesIdsJson(java.lang.String)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("KEY_PLACES_SHOWING_3_MILES", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: java.lang.String encodeUrl(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: java.net.URL encodeUrl(java.net.URL)> --> $r0 := @parameter0: java.net.URL
<org.jsoup.helper.HttpConnection: java.net.URL encodeUrl(java.net.URL)> --> specialinvoke $r9.<java.net.URL: void <init>(java.lang.String)>($r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r8 = virtualinvoke $r7.<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<com.ezlogz.ezlogz.ui.community.streams.PedroActivity: void onConnectionFailedRtmp()> --> r0 := @this: com.ezlogz.ezlogz.ui.community.streams.PedroActivity
<com.ezlogz.ezlogz.ui.community.streams.PedroActivity$4: void run()> --> r0 := @this: com.ezlogz.ezlogz.ui.community.streams.PedroActivity$4
<com.pedro.rtplibrary.base.Camera1Base: void stopStream()> --> r0 := @this: com.pedro.rtplibrary.base.Camera1Base
<com.pedro.encoder.audio.AudioEncoder: void stop()> --> r0 := @this: com.pedro.encoder.audio.AudioEncoder
<com.pedro.encoder.audio.AudioEncoder: void stop()> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, "AudioEncoder stopped")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.BaseActivity: void onCreate(android.os.Bundle)> --> $r4 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setTEST_RV(boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setTEST_RV(boolean)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("KEY_SESSION_IS_TEST_RV", 1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.MainActivity: void checkAppPermission()> --> $r1 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: boolean getFirstOpenAfterLogin()> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: boolean getFirstOpenAfterLogin()> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("key_first_open_after_login", 0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SrsFlvMuxer", "worker: disconnect ok.")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: void setLastGlobalDataLogDate(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastGlobalDataLogDate(java.util.Date)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("GLOBAL_LOG_DATA_DATE", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.ShiftData: java.util.List getViolationList(int,com.ezlogz.ezlogz.entity.enums.EDrivingType)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setShowViolationNotify(com.ezlogz.ezlogz.entity.enums.EViolationType,boolean,boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setShowViolationNotify(com.ezlogz.ezlogz.entity.enums.EViolationType,boolean,boolean)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>($r4, 1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "createStream(): Sending releaseStream command...")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection$1
<com.github.faucamp.simplertmp.io.RtmpConnection: void access$000(com.github.faucamp.simplertmp.io.RtmpConnection)> --> $r0 := @parameter0: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxPacketLoop()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxInvoke(com.github.faucamp.simplertmp.packets.Command)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handshake(java.io.InputStream,java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.Handshake: void writeC0(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Handshake
<com.github.faucamp.simplertmp.packets.Handshake: void writeC0(java.io.OutputStream)> --> virtualinvoke $r1.<java.io.OutputStream: void write(int)>(3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1: void run()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: com.twitter.sdk.android.core.internal.AdvertisingInfo access$000(com.twitter.sdk.android.core.internal.AdvertisingInfoProvider)> --> $r1 := @parameter0: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: com.twitter.sdk.android.core.internal.AdvertisingInfo getAdvertisingInfoFromStrategies()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: com.twitter.sdk.android.core.internal.AdvertisingInfo getAdvertisingInfo()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: java.lang.String getAdvertisingId()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: java.lang.String getAdvertisingId()> --> $r3 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("com.google.android.gms.ads.identifier.AdvertisingIdClient$Info")
<com.twitter.sdk.android.core.internal.AdvertisingInfoReflectionStrategy: java.lang.String getAdvertisingId()> --> $r2 := @caughtexception
<com.twitter.sdk.android.core.DefaultLogger: void w(java.lang.String,java.lang.String)> --> r0 := @this: com.twitter.sdk.android.core.DefaultLogger
<com.twitter.sdk.android.core.DefaultLogger: void w(java.lang.String,java.lang.String,java.lang.Throwable)> --> r0 := @this: com.twitter.sdk.android.core.DefaultLogger
<com.twitter.sdk.android.core.DefaultLogger: void w(java.lang.String,java.lang.String,java.lang.Throwable)> --> staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>("Twitter", $r2, $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.LoginActivity: void onCreate(android.os.Bundle)> --> $r2 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setMainAPI(boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setMainAPI(boolean)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("key_userinfo_access_session_is_main_api", 1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection$1
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "starting main rx handler loop")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.BaseActivity: void onResume()> --> $r1 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setShowPush(boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setShowPush(boolean)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("key_push_update", 0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.Connection$Method: void <clinit>()> --> nop
<org.jsoup.Connection$Method: void <clinit>()> --> <org.jsoup.Connection$Method: org.jsoup.Connection$Method HEAD> = $r0
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r18 = <org.jsoup.Connection$Method: org.jsoup.Connection$Method HEAD>
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r22 := @caughtexception
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection$1
<com.github.faucamp.simplertmp.io.RtmpConnection: void access$000(com.github.faucamp.simplertmp.io.RtmpConnection)> --> $r0 := @parameter0: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxPacketLoop()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxInvoke(com.github.faucamp.simplertmp.packets.Command)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handshake(java.io.InputStream,java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.Handshake: void writeC0(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Handshake
<com.github.faucamp.simplertmp.packets.Handshake: void writeC0(java.io.OutputStream)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Handshake", "writeC0")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r19 = virtualinvoke $r7.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.entity.dao.StatusDao: void checkTimeZoneChanged()> --> $r1 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setLastRealTimeZone(int)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastRealTimeZone(int)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("KEY_REAL_TIMEZONE_ON_DEVICE", $i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> if $r5 != null goto (branch)
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> if $r4 == null goto virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)>($r2)
<com.ezlogz.ezlogz.common.Settings: java.lang.String getShowingPlacesIn3MilesIdsJson()> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r7 = virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: java.lang.String getShowingPlacesIn3MilesIdsJson()>()
<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)>($r2)
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn1MilesIdsJson(java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn1MilesIdsJson(java.lang.String)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("KEY_PLACES_SHOWING_1_MILES", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.WindowAckSize: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.WindowAckSize
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r6)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "createStream(): Sending createStream command...")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Command: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Command
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r2)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r0, "Time to write DATA Log")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.WindowAckSize: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.WindowAckSize
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.LoginActivity: void onCreate(android.os.Bundle)> --> $r2 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setRealDevice(boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setRealDevice(boolean)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("key_userinfo_access_session_is_real_device", 1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Data: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Data
<com.github.faucamp.simplertmp.packets.VariableBodyRtmpPacket: void writeVariableData(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.VariableBodyRtmpPacket
<com.github.faucamp.simplertmp.amf.AmfNull: void writeNullTo(java.io.OutputStream)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfNull: void writeNullTo(java.io.OutputStream)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<com.ezlogz.ezlogz.ui.community.streams.PedroActivity: void onConnectionFailedRtmp()> --> r0 := @this: com.ezlogz.ezlogz.ui.community.streams.PedroActivity
<com.ezlogz.ezlogz.ui.community.streams.PedroActivity$4: void run()> --> r0 := @this: com.ezlogz.ezlogz.ui.community.streams.PedroActivity$4
<com.pedro.rtplibrary.base.Camera1Base: void stopStream()> --> r0 := @this: com.pedro.rtplibrary.base.Camera1Base
<com.pedro.encoder.input.audio.MicrophoneManager: void stop()> --> r0 := @this: com.pedro.encoder.input.audio.MicrophoneManager
<com.pedro.encoder.input.audio.MicrophoneManager: void stop()> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("MicrophoneManager", "Microphone stopped")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> specialinvoke $r1.<java.net.URL: void <init>(java.lang.String)>($r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> $r10 = virtualinvoke $r6.<java.net.Socket: java.io.OutputStream getOutputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "connect(): socket connection established, doing handhake...")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setDeltaWithUptime(long)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setDeltaWithUptime(long)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("key_d_pt_ut", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Data: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Data
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> virtualinvoke $r0.<java.io.OutputStream: void write(byte[])>($r2)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.WindowAckSize: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.WindowAckSize
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> $r5 = virtualinvoke $r6.<java.net.Socket: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "createStream(): Sending FCPublish command...")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "createStream(): Sending releaseStream command...")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $z0 = virtualinvoke $r7.<java.net.HttpURLConnection: boolean getDoOutput()>()
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r22 := @caughtexception
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.pedro.encoder.video.VideoEncoder$2: void run()> --> r0 := @this: com.pedro.encoder.video.VideoEncoder$2
<com.pedro.rtplibrary.base.Camera1Base: void getH264Data(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)> --> r0 := @this: com.pedro.rtplibrary.base.Camera1Base
<com.pedro.rtplibrary.rtmp.RtmpCamera1: void getH264DataRtp(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)> --> r0 := @this: com.pedro.rtplibrary.rtmp.RtmpCamera1
<net.ossrs.rtmp.SrsFlvMuxer: void sendVideo(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer$SrsFlv: void writeVideoSample(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$SrsFlv
<net.ossrs.rtmp.SrsFlvMuxer$SrsRawH264Stream: net.ossrs.rtmp.SrsFlvMuxer$SrsFlvFrameBytes demuxAnnexb(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo,boolean)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$SrsRawH264Stream
<net.ossrs.rtmp.SrsFlvMuxer$SrsRawH264Stream: net.ossrs.rtmp.SrsFlvMuxer$SrsFlvFrameBytes demuxAnnexb(java.nio.ByteBuffer,android.media.MediaCodec$BufferInfo,boolean)> --> staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>("SrsFlvMuxer", "annexb not match.")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: void setLastGlobalDataLogDate(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastGlobalDataLogDate(java.util.Date)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("GLOBAL_LOG_DATA_DATE", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "closeStream(): setting current stream ID to 0")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void saveDeltaWithTrueTime()> --> $r1 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setDeltaWithTrueTime(long)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setDeltaWithTrueTime(long)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("key_d_pt_tt", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.RtmpHeader: void writeTo(java.io.OutputStream,com.github.faucamp.simplertmp.packets.RtmpHeader$ChunkType,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpHeader
<com.github.faucamp.simplertmp.packets.RtmpHeader: void writeTo(java.io.OutputStream,com.github.faucamp.simplertmp.packets.RtmpHeader$ChunkType,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> virtualinvoke $r1.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: java.lang.String encodeUrl(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: java.lang.String encodeUrl(java.lang.String)> --> specialinvoke $r2.<java.net.URL: void <init>(java.lang.String)>($r0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.UserControl: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.UserControl
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt16(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt16(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1: void run()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1
<com.twitter.sdk.android.core.DefaultLogger: void d(java.lang.String,java.lang.String)> --> r0 := @this: com.twitter.sdk.android.core.DefaultLogger
<com.twitter.sdk.android.core.DefaultLogger: void d(java.lang.String,java.lang.String,java.lang.Throwable)> --> r0 := @this: com.twitter.sdk.android.core.DefaultLogger
<com.twitter.sdk.android.core.DefaultLogger: void d(java.lang.String,java.lang.String,java.lang.Throwable)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>("Twitter", $r2, $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r0, "Time to write DOWN Log")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<io.reactivex.internal.observers.ConsumerSingleObserver: void onSuccess(java.lang.Object)> --> r0 := @this: io.reactivex.internal.observers.ConsumerSingleObserver
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$1: void accept(java.lang.Object)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$1
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: void lambda$onReceive$1$TimeMinuteTickReceiver(java.lang.Boolean)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver
<com.ezlogz.ezlogz.notify.Events: void post(java.lang.Object)> --> $r0 := @parameter0: java.lang.Object
<com.ezlogz.ezlogz.notify.ThreadSafeBus: void post(java.lang.Object)> --> r0 := @this: com.ezlogz.ezlogz.notify.ThreadSafeBus
<android.os.Handler: boolean post(java.lang.Runnable)> --> this := @this: android.os.Handler
<com.facebook.AccessTokenManager$1: void run()> --> r0 := @this: com.facebook.AccessTokenManager$1
<com.facebook.AccessTokenManager: void access$000(com.facebook.AccessTokenManager,com.facebook.AccessToken$AccessTokenRefreshCallback)> --> $r0 := @parameter0: com.facebook.AccessTokenManager
<com.facebook.AccessTokenManager: void refreshCurrentAccessTokenImpl(com.facebook.AccessToken$AccessTokenRefreshCallback)> --> r0 := @this: com.facebook.AccessTokenManager
<com.facebook.AccessTokenManager: com.facebook.GraphRequest createExtendAccessTokenRequest(com.facebook.AccessToken,com.facebook.GraphRequest$Callback)> --> $r0 := @parameter0: com.facebook.AccessToken
<com.facebook.AccessTokenManager: com.facebook.GraphRequest createExtendAccessTokenRequest(com.facebook.AccessToken,com.facebook.GraphRequest$Callback)> --> virtualinvoke $r2.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("grant_type", "fb_extend_sso_token")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: void serialiseRequestUrl(org.jsoup.Connection$Request)> --> $r3 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r3, "UTF-8")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", $r6)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void shutdown(boolean)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void shutdown(boolean)> --> virtualinvoke $r2.<java.net.Socket: void close()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void connect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Command: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Command
<com.github.faucamp.simplertmp.amf.AmfNumber: void writeNumberTo(java.io.OutputStream,double)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfNumber: void writeNumberTo(java.io.OutputStream,double)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.Jsoup: org.jsoup.Connection connect(java.lang.String)> --> $r1 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection connect(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection url(java.lang.String)> --> specialinvoke $r3.<java.net.URL: void <init>(java.lang.String)>($r4)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void dt(java.lang.String,java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.log: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)> --> $i0 := @parameter0: int
<com.ezlogz.ezlogz.common.log: void log(int,java.lang.String,java.lang.String,java.lang.Throwable)> --> staticinvoke <android.util.Log: int println(int,java.lang.String,java.lang.String)>($i0, $r0, $r2)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<io.reactivex.internal.observers.ConsumerSingleObserver: void onSuccess(java.lang.Object)> --> r0 := @this: io.reactivex.internal.observers.ConsumerSingleObserver
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$1: void accept(java.lang.Object)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$1
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: void lambda$checkAppVersion$2$CheckAppVersionRequest(com.ezlogz.ezlogz.application.activities.BaseActivity,java.lang.Boolean)> --> $r1 := @parameter0: com.ezlogz.ezlogz.application.activities.BaseActivity
<com.ezlogz.ezlogz.application.dialogs.SimpleDialog: com.ezlogz.ezlogz.application.dialogs.SimpleDialog newInstance(java.lang.String,java.lang.String,com.ezlogz.ezlogz.application.dialogs.ButtonDialog[])> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.application.dialogs.SimpleDialog: com.ezlogz.ezlogz.application.dialogs.SimpleDialog newInstance(java.lang.String,java.lang.String,com.ezlogz.ezlogz.application.dialogs.ButtonDialog[])> --> virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("B_MESSAGE_DIALOG_TITLE", $r0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r3 = virtualinvoke $r2.<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)>($r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.WindowAckSize: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.WindowAckSize
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: void setLastGlobalDownLogDate(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastGlobalDownLogDate(java.util.Date)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>("GLOBAL_LOG_DOWN_DATE", $l0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.Command: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Command
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.amf.AmfString: void writeStringTo(java.io.OutputStream,java.lang.String,boolean)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.services.fcm.FcmService: void setToken(java.lang.String)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setFcmToken(java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setFcmToken(java.lang.String)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("key_app_gcm", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void connect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.LoginActivity: void onCreate(android.os.Bundle)> --> $r2 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setMainAPI(boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setMainAPI(boolean)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("key_userinfo_access_session_is_main_api", 1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection$1
<com.github.faucamp.simplertmp.io.RtmpConnection: void access$000(com.github.faucamp.simplertmp.io.RtmpConnection)> --> $r0 := @parameter0: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxPacketLoop()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxInvoke(com.github.faucamp.simplertmp.packets.Command)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handshake(java.io.InputStream,java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.Handshake: void writeC1(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Handshake
<com.github.faucamp.simplertmp.packets.Handshake: void writeC1(java.io.OutputStream)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("Handshake", "writeC1")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection$1
<com.github.faucamp.simplertmp.io.RtmpConnection: void access$000(com.github.faucamp.simplertmp.io.RtmpConnection)> --> $r0 := @parameter0: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxPacketLoop()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handleRxInvoke(com.github.faucamp.simplertmp.packets.Command)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void handshake(java.io.InputStream,java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.Handshake: void writeC0(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.Handshake
<com.github.faucamp.simplertmp.packets.Handshake: void writeC0(java.io.OutputStream)> --> virtualinvoke $r1.<java.io.OutputStream: void write(int)>(3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void onLocationChanged(android.location.Location)> --> $r9 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setLastLocation(android.location.Location)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastLocation(android.location.Location)> --> $r5 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("KEY_LAST_LOCATION", $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $z0 = virtualinvoke $r7.<java.net.HttpURLConnection: boolean getDoOutput()>()
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r22 := @caughtexception
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r19 = virtualinvoke $r7.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.utils.U: void checkNewInFleetLogic()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setInFleet(com.ezlogz.ezlogz.entity.enums.EInFleetType)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setInFleet(com.ezlogz.ezlogz.entity.enums.EInFleetType)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("key_account_infleet_new", $i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "createStream(): Sending createStream command...")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void shutdown(boolean)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void shutdown(boolean)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "socket closed")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: java.lang.String getShowingPlacesIn3MilesIdsJson()> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r7 = virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: java.lang.String getShowingPlacesIn3MilesIdsJson()>()
<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)>($r2)
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn1MilesIdsJson(java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn1MilesIdsJson(java.lang.String)>($r7)
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn3MilesIdsJson(java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn3MilesIdsJson(java.lang.String)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("KEY_PLACES_SHOWING_3_MILES", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> staticinvoke <android.util.Log: int w(java.lang.String,java.lang.String)>($r0, "Time to write DATA Log")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.pedro.encoder.video.VideoEncoder$1: void run()> --> r0 := @this: com.pedro.encoder.video.VideoEncoder$1
<com.pedro.encoder.video.VideoEncoder$1: void run()> --> staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r7, "Unsupported imageFormat")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.UserControl: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.UserControl
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt16(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt16(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.BaseActivity: void onCreate(android.os.Bundle)> --> $r4 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setTEST_RV(boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setTEST_RV(boolean)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("KEY_SESSION_IS_TEST_RV", 1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> virtualinvoke $r4.<java.net.HttpURLConnection: void setRequestMethod(java.lang.String)>($r6)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r19 = virtualinvoke $r7.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: java.lang.String getShowingPlacesIn3MilesIdsJson()> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r7 = virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: java.lang.String getShowingPlacesIn3MilesIdsJson()>()
<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> virtualinvoke $r3.<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)>($r2)
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn1MilesIdsJson(java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setShowingPlacesIn1MilesIdsJson(java.lang.String)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("KEY_PLACES_SHOWING_1_MILES", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1: void run()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void access$100(com.twitter.sdk.android.core.internal.AdvertisingInfoProvider,com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> $r0 := @parameter0: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void storeInfoToPreferences(com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void storeInfoToPreferences(com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> $r5 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("limit_ad_tracking_enabled", $z0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean connect(java.lang.String)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", $r1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r5, $i2, $i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $i0 = virtualinvoke $r7.<java.net.HttpURLConnection: int getResponseCode()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $b0 = $d0 cmpl -1.0
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $b0 == 0 goto (branch)
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> virtualinvoke $r7.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.LocationUpdatesBroadcastReceiver: void processCheckWSPlaceLogic(com.ezlogz.ezlogz.entity.dao.PlaceDao,android.location.Location)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastLocationWS(android.location.Location)> --> $r5 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("KEY_LAST_LOCATION_WS", $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> virtualinvoke $r1.<java.io.OutputStream: void write(byte[],int,int)>($r5, $i2, $i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SrsFlvMuxer", "worker: disconnect ok.")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<io.reactivex.internal.observers.ConsumerSingleObserver: void onSuccess(java.lang.Object)> --> r0 := @this: io.reactivex.internal.observers.ConsumerSingleObserver
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$1: void accept(java.lang.Object)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$1
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: void lambda$checkAppVersion$2$CheckAppVersionRequest(com.ezlogz.ezlogz.application.activities.BaseActivity,java.lang.Boolean)> --> $r1 := @parameter0: com.ezlogz.ezlogz.application.activities.BaseActivity
<com.ezlogz.ezlogz.application.dialogs.SimpleDialog: com.ezlogz.ezlogz.application.dialogs.SimpleDialog newInstance(java.lang.String,java.lang.String,com.ezlogz.ezlogz.application.dialogs.ButtonDialog[])> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.application.dialogs.SimpleDialog: com.ezlogz.ezlogz.application.dialogs.SimpleDialog newInstance(java.lang.String,java.lang.String,com.ezlogz.ezlogz.application.dialogs.ButtonDialog[])> --> virtualinvoke $r3.<android.os.Bundle: void putString(java.lang.String,java.lang.String)>("B_MESSAGE_DIALOG", $r4)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.ShiftData: java.util.List getViolationList(int,com.ezlogz.ezlogz.entity.enums.EDrivingType)> --> $r3 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setShowViolationNotify(com.ezlogz.ezlogz.entity.enums.EViolationType,boolean,boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setShowViolationNotify(com.ezlogz.ezlogz.entity.enums.EViolationType,boolean,boolean)> --> $r3 = interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>($r4, 1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean publish(java.lang.String)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: boolean createStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.WindowAckSize: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.WindowAckSize
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.requests.CheckAppVersionRequest$$Lambda$0
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: java.lang.Boolean lambda$checkAppVersion$0$CheckAppVersionRequest(io.realm.Realm)> --> $r0 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.requests.CheckAppVersionRequest: boolean isNeedToUpdateApp()> --> $r0 = new java.lang.StringBuilder
<org.jsoup.helper.HttpConnection: org.jsoup.nodes.Document get()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection: org.jsoup.Connection$Response execute()> --> r0 := @this: org.jsoup.helper.HttpConnection
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request)> --> $r1 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: org.jsoup.helper.HttpConnection$Response execute(org.jsoup.Connection$Request,org.jsoup.helper.HttpConnection$Response)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> $r0 := @parameter0: org.jsoup.Connection$Request
<org.jsoup.helper.HttpConnection$Response: java.net.HttpURLConnection createConnection(org.jsoup.Connection$Request)> --> virtualinvoke $r4.<java.net.HttpURLConnection: void setDoOutput(boolean)>(1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.LoginActivity: void onCreate(android.os.Bundle)> --> $r2 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setRealDevice(boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setRealDevice(boolean)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("key_userinfo_access_session_is_real_device", 1)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.activities.BaseActivity: void onResume()> --> $r1 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setShowPush(boolean)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setShowPush(boolean)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>("key_push_update", 0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.common.GlobalLogs$$Lambda$0
<com.ezlogz.ezlogz.common.GlobalLogs: java.lang.Integer lambda$put$0$GlobalLogs(java.lang.String,io.realm.Realm)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: boolean isNeedSkip(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = new com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance> = $r1
<com.ezlogz.ezlogz.common.date.TrueTimeAdapter: void updateDeltasAfterTimeChange()> --> $r0 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()> --> $r1 = <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings sInstance>
<com.ezlogz.ezlogz.application.receivers.TimeZoneChangeReceiver: void onReceive(android.content.Context,android.content.Intent)> --> $r6 = staticinvoke <com.ezlogz.ezlogz.common.Settings: com.ezlogz.ezlogz.common.Settings get()>()
<com.ezlogz.ezlogz.common.Settings: void setLastRealTimeZone(int)> --> r0 := @this: com.ezlogz.ezlogz.common.Settings
<com.ezlogz.ezlogz.common.Settings: void setLastRealTimeZone(int)> --> $r2 = interfaceinvoke $r2.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>("KEY_REAL_TIMEZONE_ON_DEVICE", $i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection$1
<com.github.faucamp.simplertmp.io.RtmpConnection$1: void run()> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>("RtmpConnection", "starting main rx handler loop")
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$2: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$2
<net.ossrs.rtmp.SrsFlvMuxer: void access$700(net.ossrs.rtmp.SrsFlvMuxer,net.ossrs.rtmp.ConnectCheckerRtmp)> --> $r0 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: void disconnect(net.ossrs.rtmp.ConnectCheckerRtmp)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<com.github.faucamp.simplertmp.DefaultRtmpPublisher: void close()> --> r0 := @this: com.github.faucamp.simplertmp.DefaultRtmpPublisher
<com.github.faucamp.simplertmp.io.RtmpConnection: void close()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void closeStream()> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.io.RtmpConnection: void sendRtmpPacket(com.github.faucamp.simplertmp.packets.RtmpPacket)> --> r0 := @this: com.github.faucamp.simplertmp.io.RtmpConnection
<com.github.faucamp.simplertmp.packets.RtmpPacket: void writeTo(java.io.OutputStream,int,com.github.faucamp.simplertmp.io.ChunkStreamInfo)> --> r0 := @this: com.github.faucamp.simplertmp.packets.RtmpPacket
<com.github.faucamp.simplertmp.packets.WindowAckSize: void writeBody(java.io.OutputStream)> --> r0 := @this: com.github.faucamp.simplertmp.packets.WindowAckSize
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> $r0 := @parameter0: java.io.OutputStream
<com.github.faucamp.simplertmp.Util: void writeUnsignedInt32(java.io.OutputStream,int)> --> virtualinvoke $r0.<java.io.OutputStream: void write(int)>($i0)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<net.ossrs.rtmp.SrsFlvMuxer$1: void run()> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer$1
<net.ossrs.rtmp.SrsFlvMuxer: boolean access$000(net.ossrs.rtmp.SrsFlvMuxer,java.lang.String)> --> $r1 := @parameter0: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> r0 := @this: net.ossrs.rtmp.SrsFlvMuxer
<net.ossrs.rtmp.SrsFlvMuxer: boolean connect(java.lang.String)> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>("SrsFlvMuxer", $r3)
--------------------------------------------------------

<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: boolean locationCheck(android.location.Location)> --> if $r1 == null goto specialinvoke r0.<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)>("DISTANCES: ", "Location is null")
<com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao: void log(java.lang.String,java.lang.String)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.DailyRouteLocationDao
<com.ezlogz.ezlogz.common.log: void global(java.lang.String,java.lang.String)> --> $r2 := @parameter0: java.lang.String
<com.ezlogz.ezlogz.common.GlobalLogs: void put(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe()> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: io.reactivex.disposables.Disposable subscribe(io.reactivex.functions.Consumer,io.reactivex.functions.Consumer)> --> r0 := @this: io.reactivex.Single
<io.reactivex.Single: void subscribe(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.Single
<io.reactivex.internal.operators.single.SingleFromCallable: void subscribeActual(io.reactivex.SingleObserver)> --> r0 := @this: io.reactivex.internal.operators.single.SingleFromCallable
<com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2: java.lang.Object call()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao$$Lambda$2
<com.ezlogz.ezlogz.entity.dao.BaseDao: java.lang.Object lambda$asyncRx$2$BaseDao(com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx)> --> $r0 := @parameter0: com.ezlogz.ezlogz.entity.dao.BaseDao$DaoFunctionRx
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0: java.lang.Object make(io.realm.Realm)> --> r0 := @this: com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver$$Lambda$0
<com.ezlogz.ezlogz.application.receivers.TimeMinuteTickReceiver: java.lang.Boolean lambda$onReceive$0$TimeMinuteTickReceiver(io.realm.Realm)> --> $r1 := @parameter0: io.realm.Realm
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void update(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.StatusTimelineDao: void updateGreaterThanOrEqualTo(java.util.Date)> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.StatusTimelineDao
<com.ezlogz.ezlogz.entity.dao.BaseDao: io.realm.RealmQuery query()> --> r0 := @this: com.ezlogz.ezlogz.entity.dao.BaseDao
<io.realm.Realm: io.realm.RealmQuery where(java.lang.Class)> --> r0 := @this: io.realm.Realm
<io.realm.RealmQuery: io.realm.RealmQuery createQuery(io.realm.Realm,java.lang.Class)> --> $r0 := @parameter0: io.realm.Realm
<io.realm.RealmQuery: void <init>(io.realm.Realm,java.lang.Class)> --> r0 := @this: io.realm.RealmQuery
<io.realm.internal.Table: io.realm.internal.TableQuery where()> --> r0 := @this: io.realm.internal.Table
<io.realm.internal.TableQuery: void <init>(io.realm.internal.NativeContext,io.realm.internal.Table,long)> --> r0 := @this: io.realm.internal.TableQuery
<io.realm.internal.NativeContext: void addReference(io.realm.internal.NativeObject)> --> r0 := @this: io.realm.internal.NativeContext
<io.realm.internal.NativeContext: void <clinit>()> --> nop
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1: void run()> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider$1
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void access$100(com.twitter.sdk.android.core.internal.AdvertisingInfoProvider,com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> $r0 := @parameter0: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void storeInfoToPreferences(com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> r0 := @this: com.twitter.sdk.android.core.internal.AdvertisingInfoProvider
<com.twitter.sdk.android.core.internal.AdvertisingInfoProvider: void storeInfoToPreferences(com.twitter.sdk.android.core.internal.AdvertisingInfo)> --> $r5 = interfaceinvoke $r5.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>("advertising_id", $r1)
--------------------------------------------------------

