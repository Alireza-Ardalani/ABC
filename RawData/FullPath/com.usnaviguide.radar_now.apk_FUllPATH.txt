<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.mightypocket.lib.MightyLogger$5: void internalRun()> --> r0 := @this: com.mightypocket.lib.MightyLogger$5
<com.mightypocket.lib.MightyLogger$2: void onPrint(java.lang.String)> --> r0 := @this: com.mightypocket.lib.MightyLogger$2
<com.mightypocket.lib.MightyLogger$2: void onPrint(java.lang.String)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r1)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.mightypocket.lib.MightyLogger$5: void internalRun()> --> r0 := @this: com.mightypocket.lib.MightyLogger$5
<com.mightypocket.lib.MightyLogger$3: void onPrint(java.lang.String)> --> r0 := @this: com.mightypocket.lib.MightyLogger$3
<com.mightypocket.lib.MightyLogger$3: void onPrint(java.lang.String)> --> staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r2, $r1)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r5 = virtualinvoke $r4.<java.net.URL: java.net.URLConnection openConnection()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.core.app.RadarNowApp$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.core.app.RadarNowApp$5
<com.usnaviguide.radarnow.core.db.RadarNowDatabase$1: void run()> --> r0 := @this: com.usnaviguide.radarnow.core.db.RadarNowDatabase$1
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.Long)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.Long)> --> interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>($r0, $l0)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.radarmap.RadarMapReoccurringRunnables$3: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapReoccurringRunnables$3
<com.orm.SugarRecord: void deleteAll(android.content.Context,java.lang.Class)> --> $r0 := @parameter0: android.content.Context
<com.orm.SugarRecord: void deleteAll(android.content.Context,java.lang.Class)> --> virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r4, null, null)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.api.networking.DiskCacheQueue$2: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.DiskCacheQueue$2
<com.usnaviguide.radarnow.api.networking.DiskCacheQueue: void loadCache(com.android.volley.Request)> --> r0 := @this: com.usnaviguide.radarnow.api.networking.DiskCacheQueue
<com.mightypocket.lib.StreamUtils: byte[] readBytesFromFileIfExists(java.io.File)> --> $r0 := @parameter0: java.io.File
<com.mightypocket.lib.StreamUtils: byte[] readBytesFromFile(java.io.File)> --> $r0 := @parameter0: java.io.File
<com.mightypocket.lib.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream)> --> $r0 := @parameter0: java.io.InputStream
<com.mightypocket.lib.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,boolean)> --> $r0 := @parameter0: java.io.InputStream
<com.mightypocket.lib.StreamUtils$StreamCopier: void copy()> --> r0 := @this: com.mightypocket.lib.StreamUtils$StreamCopier
<com.mightypocket.lib.StreamUtils$StreamCopier: void copy()> --> virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r1, 0, $i0)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> r2 = new java.io.BufferedInputStream
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r9 := @caughtexception
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> virtualinvoke r6.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.mightypocket.lib.MightyLogger$5: void internalRun()> --> r0 := @this: com.mightypocket.lib.MightyLogger$5
<com.mightypocket.lib.MightyLogger$1: void onPrint(java.lang.String)> --> r0 := @this: com.mightypocket.lib.MightyLogger$1
<com.mightypocket.lib.MightyLogger$1: void onPrint(java.lang.String)> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, $r1)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> specialinvoke $r10.<java.net.URL: void <init>(java.lang.String)>($r3)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r7 = virtualinvoke r6.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.usnaviguide.radarnow.api.networking.UrlFormatter: java.lang.String format()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.UrlFormatter
<com.usnaviguide.radarnow.api.networking.UrlFormatter: java.lang.String formatUrl(java.lang.String,java.util.Map,java.util.Map)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.GenericUtils: java.lang.String urlEncode(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.GenericUtils: java.lang.String urlEncode(java.lang.String)> --> $r2 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "UTF-8")
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> virtualinvoke r6.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> r2 = new java.io.BufferedInputStream
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r9 := @caughtexception
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> virtualinvoke r6.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.mightypocket.lib.MightyLogger$5: void internalRun()> --> r0 := @this: com.mightypocket.lib.MightyLogger$5
<com.mightypocket.lib.MightyLogger$1: void onPrint(java.lang.String)> --> r0 := @this: com.mightypocket.lib.MightyLogger$1
<com.mightypocket.lib.MightyLogger$1: void onPrint(java.lang.String)> --> staticinvoke <android.util.Log: int i(java.lang.String,java.lang.String)>($r2, $r1)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> virtualinvoke r5.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r4 = virtualinvoke $r10.<java.net.URL: java.net.URLConnection openConnection()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> specialinvoke $r10.<java.net.URL: void <init>(java.lang.String)>($r3)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.core.app.RadarNowApp$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.core.app.RadarNowApp$5
<com.usnaviguide.radarnow.core.db.RadarNowDatabase$1: void run()> --> r0 := @this: com.usnaviguide.radarnow.core.db.RadarNowDatabase$1
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.Long)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.Long)> --> interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)>($r0, $l0)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> virtualinvoke r6.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.core.app.RadarNowApp$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.core.app.RadarNowApp$5
<com.usnaviguide.radarnow.core.db.RadarNowDatabase$1: void run()> --> r0 := @this: com.usnaviguide.radarnow.core.db.RadarNowDatabase$1
<com.usnaviguide.radarnow.core.db.RadarNowDatabase$1: void run()> --> virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("VACUUM")
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.core.app.RadarNowApp$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.core.app.RadarNowApp$5
<com.usnaviguide.radarnow.alerts.WarningRefreshRunnable$1: void run()> --> r0 := @this: com.usnaviguide.radarnow.alerts.WarningRefreshRunnable$1
<com.usnaviguide.radarnow.alerts.WarningBroadcaster: void updatedWarnings()> --> r0 := @this: com.usnaviguide.radarnow.alerts.WarningBroadcaster
<android.os.Handler: boolean post(java.lang.Runnable)> --> this := @this: android.os.Handler
<com.android.iab.IabHelper$2$1: void run()> --> r0 := @this: com.android.iab.IabHelper$2$1
<com.usnaviguide.radarnow.iab.BillingPartial$2: void onQueryInventoryFinished(com.android.iab.IabResult,com.android.iab.Inventory)> --> r0 := @this: com.usnaviguide.radarnow.iab.BillingPartial$2
<com.usnaviguide.radarnow.iab.BillingPartial: void setIsPremium(boolean)> --> $z0 := @parameter0: boolean
<com.usnaviguide.radarnow.core.settings.SettingsWrapperRadarNow: void setCachedPremium(boolean)> --> $z0 := @parameter0: boolean
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.Boolean)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.Boolean)> --> interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>($r0, $z0)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.mightypocket.lib.MightyLogger$5: void internalRun()> --> r0 := @this: com.mightypocket.lib.MightyLogger$5
<com.mightypocket.lib.MightyLogger$3: void onPrint(java.lang.String)> --> r0 := @this: com.mightypocket.lib.MightyLogger$3
<com.mightypocket.lib.MightyLogger$3: void onPrint(java.lang.String)> --> staticinvoke <android.util.Log: int e(java.lang.String,java.lang.String)>($r2, $r1)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.usnaviguide.radarnow.api.networking.UrlFormatter: java.lang.String format()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.UrlFormatter
<com.usnaviguide.radarnow.api.networking.UrlFormatter: java.lang.String formatUrl(java.lang.String,java.util.Map,java.util.Map)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.GenericUtils: java.lang.String urlEncode(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.GenericUtils: java.lang.String urlEncode(java.lang.String)> --> $r2 = staticinvoke <java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)>($r0, "UTF-8")
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.mightypocket.lib.Promise: com.mightypocket.lib.Promise finish()> --> r0 := @this: com.mightypocket.lib.Promise
<android.os.Handler: boolean post(java.lang.Runnable)> --> this := @this: android.os.Handler
<com.usnaviguide.radarnow.api.networking.RegistrationManager$RegistrationThread$1: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.RegistrationManager$RegistrationThread$1
<com.usnaviguide.radarnow.ui.RegistrationUI: void onDispatchResult(com.usnaviguide.radarnow.api.networking.RegistrationManager$RegistrationResult)> --> r0 := @this: com.usnaviguide.radarnow.ui.RegistrationUI
<com.usnaviguide.radarnow.ui.RegistrationUI$ForceRegistrationUI: void onSuccess(com.usnaviguide.radarnow.api.networking.RegistrationManager$RegistrationResult)> --> r0 := @this: com.usnaviguide.radarnow.ui.RegistrationUI$ForceRegistrationUI
<com.usnaviguide.radarnow.gcm.GCMRegistration: com.mightypocket.lib.Promise resetGCMRegId()> --> r0 := @this: com.usnaviguide.radarnow.gcm.GCMRegistration
<com.mightypocket.lib.Promise: com.mightypocket.lib.Promise then(com.mightypocket.lib.Promise$PromisedRunnable)> --> r0 := @this: com.mightypocket.lib.Promise
<com.mightypocket.lib.Promise: com.mightypocket.lib.Promise then(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.Promise
<com.usnaviguide.radarnow.gcm.GCMRegistration$3: void run()> --> r0 := @this: com.usnaviguide.radarnow.gcm.GCMRegistration$3
<com.usnaviguide.radarnow.gcm.GCMRegistration: void setGCMRegId(java.lang.String)> --> r0 := @this: com.usnaviguide.radarnow.gcm.GCMRegistration
<com.usnaviguide.radarnow.core.settings.SettingsWrapperRadarNow: void setGCMRegId(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.String)> --> interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>($r0, $r1)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> r2 = new java.io.BufferedInputStream
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r9 := @caughtexception
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> virtualinvoke r6.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> virtualinvoke r6.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.core.app.RadarNowApp$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.core.app.RadarNowApp$5
<com.usnaviguide.radarnow.core.db.RadarNowDatabase$1: void run()> --> r0 := @this: com.usnaviguide.radarnow.core.db.RadarNowDatabase$1
<com.usnaviguide.radarnow.core.db.RadarNowDatabase$1: void run()> --> virtualinvoke $r4.<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)>("VACUUM")
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r5 = virtualinvoke $r4.<java.net.URL: java.net.URLConnection openConnection()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> r2 = new java.io.BufferedInputStream
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r9 := @caughtexception
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> virtualinvoke r6.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r11 = new java.io.BufferedInputStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r7 := @caughtexception
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> virtualinvoke r5.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>($r0)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.properties.Property: java.util.concurrent.CountDownLatch postSet(java.lang.Object)> --> r0 := @this: com.mightypocket.lib.properties.Property
<android.os.Handler: boolean post(java.lang.Runnable)> --> this := @this: android.os.Handler
<com.usnaviguide.radarnow.radarmap.StartupManager$9: void run()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.StartupManager$9
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)> --> this := @this: android.os.Handler
<com.usnaviguide.radarnow.radarmap.RadarMapReoccurringRunnables$AbsReoccuringRunnable: void run()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapReoccurringRunnables$AbsReoccuringRunnable
<com.usnaviguide.radarnow.radarmap.RadarMapReoccurringRunnables$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapReoccurringRunnables$5
<com.mightypocket.lib.Promise: com.mightypocket.lib.Promise then(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.Promise
<com.usnaviguide.radarnow.gcm.GCMRegistration$3: void run()> --> r0 := @this: com.usnaviguide.radarnow.gcm.GCMRegistration$3
<com.usnaviguide.radarnow.gcm.GCMRegistration: void setGCMRegId(java.lang.String)> --> r0 := @this: com.usnaviguide.radarnow.gcm.GCMRegistration
<com.usnaviguide.radarnow.core.settings.SettingsWrapperRadarNow: void setGCMRegId(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.String)> --> interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>($r0, $r1)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.mightypocket.lib.Promise: com.mightypocket.lib.Promise finish()> --> r0 := @this: com.mightypocket.lib.Promise
<android.os.Handler: boolean post(java.lang.Runnable)> --> this := @this: android.os.Handler
<com.android.iab.IabHelper$2$1: void run()> --> r0 := @this: com.android.iab.IabHelper$2$1
<com.usnaviguide.radarnow.iab.BillingPartial$2: void onQueryInventoryFinished(com.android.iab.IabResult,com.android.iab.Inventory)> --> r0 := @this: com.usnaviguide.radarnow.iab.BillingPartial$2
<com.usnaviguide.radarnow.iab.BillingPartial: void setIsPremium(boolean)> --> $z0 := @parameter0: boolean
<com.usnaviguide.radarnow.core.settings.SettingsWrapperRadarNow: void setCachedPremium(boolean)> --> $z0 := @parameter0: boolean
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.Boolean)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.AbsSettingsWrapper: void saveSetting(java.lang.String,java.lang.Boolean)> --> interfaceinvoke $r3.<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>($r0, $z0)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r6 = virtualinvoke r5.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r6 = virtualinvoke r5.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> virtualinvoke r5.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> virtualinvoke r6.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> specialinvoke $r4.<java.net.URL: void <init>(java.lang.String)>($r0)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> virtualinvoke r5.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.mightypocket.lib.MightyLogger$5: void internalRun()> --> r0 := @this: com.mightypocket.lib.MightyLogger$5
<com.mightypocket.lib.MightyLogger$2: void onPrint(java.lang.String)> --> r0 := @this: com.mightypocket.lib.MightyLogger$2
<com.mightypocket.lib.MightyLogger$2: void onPrint(java.lang.String)> --> staticinvoke <android.util.Log: int d(java.lang.String,java.lang.String)>($r2, $r1)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r7 = virtualinvoke r6.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r6 = virtualinvoke r5.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r4 = virtualinvoke $r10.<java.net.URL: java.net.URLConnection openConnection()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> virtualinvoke r5.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r7 = virtualinvoke r6.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r11 = new java.io.BufferedInputStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r7 := @caughtexception
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> virtualinvoke r5.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$6: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$6
<com.usnaviguide.radarnow.alerts.AlertAPIAgent: boolean readAlertsFromAPI(com.usnaviguide.radarnow.alerts.AlertAPIAgent$AlertsState)> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.URLStream: java.lang.String readURLAsString(java.lang.String)> --> $r7 = virtualinvoke r6.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.api.networking.DiskCacheQueue$2: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.DiskCacheQueue$2
<com.usnaviguide.radarnow.api.networking.DiskCacheQueue: void loadCache(com.android.volley.Request)> --> r0 := @this: com.usnaviguide.radarnow.api.networking.DiskCacheQueue
<com.mightypocket.lib.StreamUtils: byte[] readBytesFromFileIfExists(java.io.File)> --> $r0 := @parameter0: java.io.File
<com.mightypocket.lib.StreamUtils: byte[] readBytesFromFile(java.io.File)> --> $r0 := @parameter0: java.io.File
<com.mightypocket.lib.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream)> --> $r0 := @parameter0: java.io.InputStream
<com.mightypocket.lib.StreamUtils: void copy(java.io.InputStream,java.io.OutputStream,boolean)> --> $r0 := @parameter0: java.io.InputStream
<com.mightypocket.lib.StreamUtils$StreamCopier: void copy()> --> r0 := @this: com.mightypocket.lib.StreamUtils$StreamCopier
<com.mightypocket.lib.StreamUtils$StreamCopier: void copy()> --> virtualinvoke $r3.<java.io.OutputStream: void write(byte[],int,int)>(r1, 0, $i0)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.radarmap.RadarMapReoccurringRunnables$3: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapReoccurringRunnables$3
<com.orm.SugarRecord: void deleteAll(android.content.Context,java.lang.Class)> --> $r0 := @parameter0: android.content.Context
<com.orm.SugarRecord: void deleteAll(android.content.Context,java.lang.Class)> --> virtualinvoke $r3.<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])>($r4, null, null)
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r11 = new java.io.BufferedInputStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r7 := @caughtexception
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> virtualinvoke r5.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLongitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = (com.usnaviguide.radarnow.overlays.RNMapView) $r13
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView> = $r6
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()> --> return r0
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r11 = virtualinvoke r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.radarmap.RadarMapActivity activity()>()
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> if $r6 != null goto $r6 = r0.<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView mMapView>
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition putInQueue(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r11 = new java.io.BufferedInputStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r7 := @caughtexception
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> virtualinvoke r5.<java.net.HttpURLConnection: void disconnect()>()
--------------------------------------------------------

<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> $d0 = virtualinvoke $r1.<android.location.Location: double getLatitude()>()
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: void onLocationChanged(android.location.Location)> --> if $r1 == null goto return
<com.usnaviguide.radarnow.radarmap.DriverModeLocationListener: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.DriverModeLocationListener
<com.usnaviguide.radarnow.radarmap.RadarMapActivity: com.usnaviguide.radarnow.overlays.RNMapView getMapView()> --> r0 := @this: com.usnaviguide.radarnow.radarmap.RadarMapActivity
<com.mightypocket.lib.MightyLog: void i(java.lang.String,java.lang.Object[])> --> $r0 := @parameter0: java.lang.String
<com.mightypocket.lib.MightyLogger: void i(java.lang.String,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.MightyLogger: void addLog(java.lang.String,com.mightypocket.lib.MightyLogger$OnPrintLogCallback,java.lang.Object[])> --> r0 := @this: com.mightypocket.lib.MightyLogger
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.Promise run(com.mightypocket.lib.OperationQueue$BackgroundRunnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue: com.mightypocket.lib.PromisedCondition schedule(java.lang.Runnable)> --> r0 := @this: com.mightypocket.lib.OperationQueue
<com.mightypocket.lib.OperationQueue$BackgroundRunnable: void run()> --> r0 := @this: com.mightypocket.lib.OperationQueue$BackgroundRunnable
<com.usnaviguide.radarnow.alerts.AlertAPIAgent$5: void internalRun()> --> r0 := @this: com.usnaviguide.radarnow.alerts.AlertAPIAgent$5
<com.usnaviguide.radarnow.core.app.RadarNowApp: int balancerIdRegistration()> --> $r0 = <com.usnaviguide.radarnow.core.app.RadarNowApp: com.usnaviguide.radarnow.api.networking.ServerBalancer _serverBalancer>
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int balancerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer: int getBestServerId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: int bestId()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics: void refresh()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics
<com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread: void run()> --> r0 := @this: com.usnaviguide.radarnow.api.networking.ServerBalancer$ServerDiagnostics$DiagnosticsThread
<java.lang.Thread: void run()> --> this := @this: java.lang.Thread
<com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker: void run()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$AbsWorker
<com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker: void execute()> --> r0 := @this: com.usnaviguide.radarnow.images.ImageSupervisor$DownloadWorker
<com.usnaviguide.radarnow.images.BitmapDownloader: android.graphics.Bitmap load()> --> r0 := @this: com.usnaviguide.radarnow.images.BitmapDownloader
<com.mightypocket.lib.URLStream: java.io.InputStream getInMemoryStream()> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> r0 := @this: com.mightypocket.lib.URLStream
<com.mightypocket.lib.URLStream: void readStream(com.mightypocket.lib.URLStream$OnReadStream)> --> $r6 = virtualinvoke r5.<java.net.HttpURLConnection: java.io.InputStream getInputStream()>()
--------------------------------------------------------

