<android.location.Location: double getLatitude()> -> _SOURCE_
<android.location.Location: double getLongitude()> -> _SOURCE_
<android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)> -> _SOURCE_
<android.location.LocationListener: void onLocationChanged(android.location.Location)> -> _SOURCE_

<android.util.Log: int d(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int w(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int wtf(java.lang.String,java.lang.Throwable)> -> _SINK_
<android.util.Log: int println(int, java.lang.String, java.lang.String)> -> _SINK_
<android.util.Log: boolean isLoggable(java.lang.String, int)> -> _SINK_

<android.os.Bundle: void putAll(android.os.Bundle)> -> _SINK_
<android.os.Bundle: void putBinder(java.lang.String,android.os.IBinder)> -> _SINK_
<android.os.Bundle: void putBoolean(java.lang.String,boolean)> -> _SINK_
<android.os.Bundle: void putBooleanArray(java.lang.String,boolean[])> -> _SINK_
<android.os.Bundle: void putBundle(java.lang.String,android.os.Bundle)> -> _SINK_
<android.os.Bundle: void putCharArray(java.lang.String,char[])> -> _SINK_
<android.os.Bundle: void putCharSequence(java.lang.String,java.lang.CharSequence)> -> _SINK_
<android.os.Bundle: void putDouble(java.lang.String,double)> -> _SINK_
<android.os.Bundle: void putFloat(java.lang.String,float)> -> _SINK_
<android.os.Bundle: void putInt(java.lang.String,int)> -> _SINK_
<android.os.Bundle: void putIntArray(java.lang.String,int[])> -> _SINK_
<android.os.Bundle: void putIntegerArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putLong(java.lang.String,long)> -> _SINK_
<android.os.Bundle: void putParcelable(java.lang.String,android.os.Parcelable)> -> _SINK_
<android.os.Bundle: void putParcelableArray(java.lang.String,android.os.Parcelable[])> -> _SINK_
<android.os.Bundle: void putParcelableArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<android.os.Bundle: void putSerializable(java.lang.String,java.io.Serializable)> -> _SINK_
<android.os.Bundle: void putString(java.lang.String,java.lang.String)> -> _SINK_
<android.os.Bundle: void putStringArray(java.lang.String,java.lang.String[])> -> _SINK_
<android.os.Bundle: void putStringArrayList(java.lang.String,java.util.ArrayList)> -> _SINK_
<java.io.BufferedOutputStream: void write(byte[])> -> _SINK_
<java.io.BufferedOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.BufferedWriter: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(byte[])> -> _SINK_
<java.io.ByteArrayOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ByteArrayOutputStream: void write(int)> -> _SINK_
<java.io.DataOutputStream: void write(byte[])> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileWriter: void write(java.lang.String)> -> _SINK_
<java.io.OutputStream: void write(byte[])> -> _SINK_
<java.io.OutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.OutputStream: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String)> -> _SINK_
<java.io.StringWriter: void write(char[],int,int)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.FileWriter: void write(java.lang.String)> -> _SINK_
<java.io.FileWriter: void write(char[], int, int)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[], int, int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[])> -> _SINK_
<java.io.RandomAccessFile: void write(byte[], int, int)> -> _SINK_
<java.nio.file.Files: void write(java.nio.file.Path, byte[], java.nio.file.OpenOption...)> -> _SINK_
<java.nio.file.Files: java.io.OutputStream newOutputStream(java.nio.file.Path, java.nio.file.OpenOption...)> -> _SINK_
<android.content.Context: java.io.FileOutputStream openFileOutput(java.lang.String, int)> -> _SINK_
<android.content.Context: java.io.FileInputStream openFileInput(java.lang.String)> -> _SINK_
<java.io.BufferedWriter: void write(char[],int,int)> -> _SINK_
<java.io.BufferedWriter: void write(int)> -> _SINK_
<java.io.BufferedWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.CharArrayWriter: void write(int)> -> _SINK_
<java.io.CharArrayWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.CharArrayWriter: void writeTo(java.io.Writer)> -> _SINK_
<java.io.DataOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.DataOutputStream: void write(int)> -> _SINK_
<java.io.DataOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.DataOutputStream: void writeByte(int)> -> _SINK_
<java.io.DataOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeChar(int)> -> _SINK_
<java.io.DataOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.DataOutputStream: void writeDouble(double)> -> _SINK_
<java.io.DataOutputStream: void writeFloat(float)> -> _SINK_
<java.io.DataOutputStream: void writeInt(int)> -> _SINK_
<java.io.DataOutputStream: void writeLong(long)> -> _SINK_
<java.io.DataOutputStream: void writeShort(int)> -> _SINK_
<java.io.DataOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.FileOutputStream: void write(byte[])> -> _SINK_
<java.io.FileOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FileOutputStream: void write(int)> -> _SINK_
<java.io.FilterOutputStream: void write(byte[])> -> _SINK_
<java.io.FilterOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.FilterOutputStream: void write(int)> -> _SINK_
<java.io.FilterWriter: void write(char[],int,int)> -> _SINK_
<java.io.FilterWriter: void write(int)> -> _SINK_
<java.io.FilterWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[])> -> _SINK_
<java.io.ObjectOutputStream: void write(byte[],int,int)> -> _SINK_
<java.io.ObjectOutputStream: void write(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBoolean(boolean)> -> _SINK_
<java.io.ObjectOutputStream: void writeByte(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeBytes(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeChar(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeChars(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeDouble(double)> -> _SINK_
<java.io.ObjectOutputStream: void writeFields()> -> _SINK_
<java.io.ObjectOutputStream: void writeFloat(float)> -> _SINK_
<java.io.ObjectOutputStream: void writeInt(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeLong(long)> -> _SINK_
<java.io.ObjectOutputStream: void writeObject(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeObjectOverride(java.lang.Object)> -> _SINK_
<java.io.ObjectOutputStream: void writeShort(int)> -> _SINK_
<java.io.ObjectOutputStream: void writeStreamHeader()> -> _SINK_
<java.io.ObjectOutputStream: void writeUTF(java.lang.String)> -> _SINK_
<java.io.ObjectOutputStream: void writeUnshared(java.lang.Object)> -> _SINK_
<java.io.OutputStreamWriter: void write(char[],int,int)> -> _SINK_
<java.io.OutputStreamWriter: void write(int)> -> _SINK_
<java.io.OutputStreamWriter: void write(java.lang.String,int,int)> -> _SINK_
<java.io.PipedWriter: void write(char[],int,int)> -> _SINK_
<java.io.PipedWriter: void write(int)> -> _SINK_
<java.io.PipedWriter: void write(char[],int,int)> -> _SINK_
<java.io.PipedWriter: void write(int)> -> _SINK_
<java.io.RandomAccessFile: void write(byte[])> -> _SINK_
<java.io.RandomAccessFile: void write(byte[],int,int)> -> _SINK_
<java.io.RandomAccessFile: void write(int)> -> _SINK_
<java.io.RandomAccessFile: void writeBoolean(boolean)> -> _SINK_
<java.io.RandomAccessFile: void writeByte(byte)> -> _SINK_
<java.io.RandomAccessFile: void writeBytes(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeChar(int)> -> _SINK_
<java.io.RandomAccessFile: void writeChars(java.lang.String)> -> _SINK_
<java.io.RandomAccessFile: void writeDouble(double)> -> _SINK_
<java.io.RandomAccessFile: void writeFloat(float)> -> _SINK_
<java.io.RandomAccessFile: void writeInt(int)> -> _SINK_
<java.io.RandomAccessFile: void writeLong(long)> -> _SINK_
<java.io.RandomAccessFile: void writeShort(int)> -> _SINK_
<java.io.RandomAccessFile: void writeUTF(java.lang.String)> -> _SINK_
<java.io.Writer: java.io.Writer append(char)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence)> -> _SINK_
<java.io.Writer: java.io.Writer append(java.lang.CharSequence,int,int)> -> _SINK_
<java.io.Writer: void write(char[])> -> _SINK_
<java.io.Writer: void write(char[],int,int)> -> _SINK_
<java.io.Writer: void write(int)> -> _SINK_
<java.io.Writer: void write(java.lang.String)> -> _SINK_
<java.io.Writer: void write(java.lang.String,int,int)> -> _SINK_
<org.apache.http.conn.BasicManagedEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.http.entity.BufferedHttpEntity: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.http.entity.HttpEntityWrapper: void writeTo(java.io.OutputStream)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[])> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void write(int)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(java.lang.String)> -> _SINK_
<org.apache.http.impl.conn.LoggingSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(java.lang.String)> -> _SINK_
<org.apache.http.impl.io.AbstractSessionOutputBuffer: void writeLine(org.apache.http.util.CharArrayBuffer)> -> _SINK_
<org.apache.http.impl.io.ChunkedOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.ContentLengthOutputStream: void write(int)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[])> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(byte[],int,int)> -> _SINK_
<org.apache.http.impl.io.IdentityOutputStream: void write(int)> -> _SINK_

<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<io.intercom.android.sdk.ActivityLifecycleHandler: boolean sendMessage(android.os.Message)> -> _SINK_
<java.net.HttpURLConnection: void connect()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SINK_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SINK_
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SINK_
<java.net.HttpURLConnection: void setDoInput(boolean)> -> _SINK_
<java.net.HttpURLConnection: void setDoOutput(boolean)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> -> _SINK_
<java.net.Socket: java.io.InputStream getInputStream()> -> _SINK_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.URL: void <init>(java.lang.String)> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SINK_
<java.net.URL: void <init>(java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,int,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
<java.net.URL: void <init>(java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.net.URL,java.lang.String)> -> _SINK_
<java.net.URL: void <init>(java.net.URL,java.lang.String,java.net.URLStreamHandler)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URL: void set(java.lang.String,java.lang.String,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String)> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: java.io.InputStream getInputStream()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void connect()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void setDoInput(boolean)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void setDoOutput(boolean)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void setRequestMethod(java.lang.String)> -> _SINK_
<okhttp3.Call: okhttp3.Response execute()> -> _SINK_
<okhttp3.Call: void enqueue(okhttp3.Callback)> -> _SINK_
<okhttp3.MediaType: okhttp3.MediaType parse(java.lang.String)> -> _SINK_
<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)> -> _SINK_
<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.HttpURLConnection: int getResponseCode()> -> _SINK_
<java.net.HttpURLConnection: void disconnect()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void disconnect()> -> _SINK_
<java.net.Socket: void close()> -> _SINK_
<okhttp3.WebSocket: boolean send(java.lang.String)> -> _SINK_
<okhttp3.WebSocket: boolean send(okio.ByteString)> -> _SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)> -> _SINK_
<libcore.net.http.AbstractHttpInputStream: void cacheWrite(byte[],int,int)> -> _SINK_
<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void writeToSocket(java.io.OutputStream)> -> _SINK_
<java.net.DatagramSocketImpl: void recieve(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)> -> _SINK_

<android.content.ContentResolver: android.net.Uri insert(android.net.Uri,android.content.ContentValues)> -> _SINK_
<android.content.ContentResolver: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<io.intercom.android.sdk.ActivityLifecycleHandler: boolean sendMessage(android.os.Message)> -> _SINK_
<java.net.HttpURLConnection: void connect()> -> _SINK_
<java.net.HttpURLConnection: java.lang.String getResponseMessage()> -> _SINK_
<java.net.HttpURLConnection: java.io.InputStream getInputStream()> -> _SINK_
<java.net.HttpURLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.HttpURLConnection: void setDoInput(boolean)> -> _SINK_
<java.net.HttpURLConnection: void setDoOutput(boolean)> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByAddress(byte[])> -> _SINK_
<java.net.InetAddress: java.net.InetAddress getByName(java.lang.String)> -> _SINK_
<java.net.Socket: java.io.InputStream getInputStream()> -> _SINK_
<java.net.Socket: java.io.OutputStream getOutputStream()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection()> -> _SINK_
<java.net.URL: java.net.URLConnection openConnection(java.net.Proxy)> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String)> -> _SINK_
<java.net.URLDecoder: java.lang.String decode(java.lang.String,java.lang.String)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String)> -> _SINK_
<java.net.URLEncoder: java.lang.String encode(java.lang.String,java.lang.String)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: java.io.InputStream getInputStream()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: java.io.OutputStream getOutputStream()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void connect()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void setDoInput(boolean)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void setDoOutput(boolean)> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void setRequestMethod(java.lang.String)> -> _SINK_
<okhttp3.Call: okhttp3.Response execute()> -> _SINK_
<okhttp3.Call: void enqueue(okhttp3.Callback)> -> _SINK_
<okhttp3.OkHttpClient: okhttp3.Call newCall(okhttp3.Request)> -> _SINK_
<okhttp3.Request$Builder: okhttp3.Request$Builder url(java.lang.String)> -> _SINK_
<java.net.DatagramSocket: void send(java.net.DatagramPacket)> -> _SINK_
<java.net.HttpURLConnection: int getResponseCode()> -> _SINK_
<java.net.HttpURLConnection: void disconnect()> -> _SINK_
<javax.net.ssl.HttpsURLConnection: void disconnect()> -> _SINK_
<java.net.Socket: void close()> -> _SINK_
<okhttp3.WebSocket: boolean send(java.lang.String)> -> _SINK_
<okhttp3.WebSocket: boolean send(okio.ByteString)> -> _SINK_
<java.nio.channels.SocketChannel: int write(java.nio.ByteBuffer)> -> _SINK_
<java.nio.channels.SocketChannel: int read(java.nio.ByteBuffer)> -> _SINK_
<libcore.net.http.AbstractHttpInputStream: void cacheWrite(byte[],int,int)> -> _SINK_
<libcore.net.http.ChunkedOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.FixedLengthOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void write(byte[],int,int)> -> _SINK_
<libcore.net.http.RetryableOutputStream: void writeToSocket(java.io.OutputStream)> -> _SINK_
<java.net.DatagramSocketImpl: void recieve(java.net.DatagramPacket)> -> _SINK_
<java.net.DatagramSocketImpl: void send(java.net.DatagramPacket)> -> _SINK_

<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putFloat(java.lang.String,float)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putInt(java.lang.String,int)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putLong(java.lang.String,long)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)> -> _SINK_
<android.content.SharedPreferences$Editor: android.content.SharedPreferences$Editor putStringSet(java.lang.String, java.util.Set<java.lang.String> -> _SINK_)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String,java.lang.String,android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String,java.lang.Object[])> -> _SINK_
<io.realm.Realm: void insertOrUpdate(io.realm.RealmModel)> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: int delete(java.lang.String,java.lang.String,java.lang.String[])> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: int update(java.lang.String,android.content.ContentValues,java.lang.String,java.lang.String[])> -> _SINK_
<net.sqlcipher.database.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int delete(java.lang.String, java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor rawQuery(java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void close()> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri, java.lang.String, java.lang.String[])> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: int update(java.lang.String, android.content.ContentValues, java.lang.String, java.lang.String[])> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insert(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: long insertOrThrow(java.lang.String, java.lang.String, android.content.ContentValues)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: void execSQL(java.lang.String, java.lang.Object[])> -> _SINK_
<android.database.sqlite.SQLiteStatement: long executeInsert()> -> _SINK_
<android.database.sqlite.SQLiteStatement: void execute()> -> _SINK_
<android.content.ContentResolver: int delete(android.net.Uri, java.lang.String, java.lang.String[])> -> _SINK_
<android.content.ContentResolver: android.database.Cursor query(android.net.Uri, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String)> -> _SINK_
<android.database.sqlite.SQLiteDatabase: android.database.Cursor query(java.lang.String, java.lang.String[], java.lang.String, java.lang.String[], java.lang.String, java.lang.String, java.lang.String)> -> _SINK_

